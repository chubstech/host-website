{"version":3,"sources":["components/Realtime.js","components/Baselines.js","pages/Home.js","components/ReportTable.js","components/ReportChart.js","pages/Report.js","pages/Help.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Realtime","state","time","Date","events","Ring","percentile50Out","percentile90Out","getNewEvent","t","TimeEvent","this","stream","Stream","pipeline","from","windowBy","emitOn","aggregate","value","percentile","to","EventOut","event","push","setState","interval","setInterval","getTime","newEvents","addEvent","clearInterval","beginTime","latestTime","fiveMinuteStyle","normal","fill","opacity","highlight","selected","eventSeries","TimeSeries","name","toArray","perc50Series","perc90Series","initialBeginTime","endTime","timeRange","TimeRange","charts","axis","series","style","columns","styler","key","color","width","dashed","id","className","type","categories","label","fontSize","borderWidth","borderColor","title","height","min","max","React","Component","displayName","points","require","widget","data","reverse","series1","series2","Baselines","tracker","timerange","range","handleTrackerChanged","handleTimeRangeChange","format","Home","class","ReportTable","props","obs_time","db_reading","stroke","baselineStyle","line","strokeWidth","strokeDasharray","baselineStyleLite","baselineStyleExtraLite","ReportChart","titleStyle","fontWeight","timeAxisTickCount","position","avg","stdev","Report","curr","getMonth","getDate","getFullYear","Help","Sidebar","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e62a200.chunk.js","sourcesContent":["import React from 'react';\nimport Ring from \"ringjs\";\n\nimport {\n  TimeRange,\n  TimeEvent,\n  Pipeline as pipeline,\n  Stream,\n  EventOut,\n  percentile,\n  TimeSeries\n} from \"pondjs\";\n\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  ScatterChart,\n  BarChart,\n  Legend,\n  styler\n} from \"react-timeseries-charts\";\n\n/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nconst sec = 1000;\nconst minute = 60 * sec;\nconst hours = 60 * minute;\nconst rate = 80;\n\nclass Realtime extends React.Component {\n  static displayName = \"AggregatorDemo\";\n\n  state = {\n    // time: new Date(2015, 0, 1),\n    time: new Date(),\n    events: new Ring(200),\n    percentile50Out: new Ring(100),\n    percentile90Out: new Ring(100)\n  };\n\n  getNewEvent = t => {\n    return new TimeEvent(t, 100);\n  };\n\n  componentDidMount() {\n    //\n    // Setup our aggregation pipelines\n    //\n\n    this.stream = new Stream();\n\n    pipeline()\n      .from(this.stream)\n      .windowBy(\"5m\")\n      .emitOn(\"discard\")\n      .aggregate({\n        value: { value: percentile(90) }\n      })\n      .to(EventOut, event => {\n        const events = this.state.percentile90Out;\n        events.push(event);\n        this.setState({ percentile90Out: events });\n      });\n\n    pipeline()\n      .from(this.stream)\n      .windowBy(\"5m\")\n      .emitOn(\"discard\")\n      .aggregate({\n        value: { value: percentile(50) }\n      })\n      .to(EventOut, event => {\n        const events = this.state.percentile50Out;\n        events.push(event);\n        this.setState({ percentile50Out: events });\n      });\n\n    //\n    // Setup our interval to advance the time and generate raw events\n    //\n\n    const increment = minute;\n    this.interval = setInterval(() => {\n      const t = new Date(this.state.time.getTime() + increment);\n      const event = this.getNewEvent(t);\n\n      // Raw events\n      const newEvents = this.state.events;\n      newEvents.push(event);\n      this.setState({ time: t, events: newEvents });\n\n      // Let our aggregators process the event\n      this.stream.addEvent(event);\n    }, rate);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const latestTime = `${this.state.time}`;\n\n    const fiveMinuteStyle = {\n      value: {\n        normal: { fill: \"#619F3A\", opacity: 0.2 },\n        highlight: { fill: \"619F3A\", opacity: 0.5 },\n        selected: { fill: \"619F3A\", opacity: 0.5 }\n      }\n    };\n\n    const scatterStyle = {\n      value: {\n        normal: {\n          fill: \"steelblue\",\n          opacity: 0.5\n        }\n      }\n    };\n\n    //\n    // Create a TimeSeries for our raw, 5min and hourly events\n    //\n\n    const eventSeries = new TimeSeries({\n      name: \"raw\",\n      events: this.state.events.toArray()\n    });\n\n    const perc50Series = new TimeSeries({\n      name: \"five minute perc50\",\n      events: this.state.percentile50Out.toArray()\n    });\n\n    const perc90Series = new TimeSeries({\n      name: \"five minute perc90\",\n      events: this.state.percentile90Out.toArray()\n    });\n\n    // Timerange for the chart axis\n    // const initialBeginTime = new Date(2015, 0, 1);\n    const initialBeginTime = new Date(); // Current Date\n\n    const timeWindow = 3 * hours;\n\n    let beginTime;\n    const endTime = new Date(this.state.time.getTime() + minute);\n    if (endTime.getTime() - timeWindow < initialBeginTime.getTime()) {\n      beginTime = initialBeginTime;\n    } else {\n      beginTime = new Date(endTime.getTime() - timeWindow);\n    }\n    const timeRange = new TimeRange(beginTime, endTime);\n\n    // Charts (after a certain amount of time, just show hourly rollup)\n    const charts = (\n      <Charts>\n        <BarChart\n          axis=\"y\"\n          series={perc90Series}\n          style={fiveMinuteStyle}\n          columns={[\"value\"]}\n        />\n        <BarChart\n          axis=\"y\"\n          series={perc50Series}\n          style={fiveMinuteStyle}\n          columns={[\"value\"]}\n        />\n        <ScatterChart axis=\"y\" series={eventSeries} style={scatterStyle} />\n      </Charts>\n    );\n\n    const dateStyle = {\n      fontSize: 12,\n      color: \"#AAA\",\n      borderWidth: 1,\n      borderColor: \"#F4F4F4\"\n    };\n\n    const style = styler([\n      { key: \"perc50\", color: \"#C5DCB7\", width: 1, dashed: true },\n      { key: \"perc90\", color: \"#DFECD7\", width: 2 }\n    ]);\n\n    return (\n      <div id='chart'>\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            <Legend\n              type=\"swatch\"\n              style={style}\n              categories={[\n                {\n                  key: \"perc50\",\n                  label: \"Regular dB Levels\",\n                  style: { fill: \"#C5DCB7\" }\n                },\n                {\n                  key: \"perc90\",\n                  label: \"Highest dB Levels\",\n                  style: { fill: \"#DFECD7\" }\n                }\n              ]}\n            />\n          </div>\n          <div className=\"col-md-8\">\n            <span style={dateStyle}>{latestTime}</span>\n          </div>\n        </div>\n        <hr />\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n\n              <ChartContainer title=\"Active Noise Level\" timeRange={timeRange} width=\"1200\">\n                <ChartRow height=\"250\">\n                  <YAxis\n                    id=\"y\"\n                    label=\"dB Levels\"\n                    min={0}\n                    max={150} // This changes the y value of graph in terms of dB levels should be 0-200\n                    width=\"100\"\n                    type=\"linear\"\n                  />\n                  {charts}\n                </ChartRow>\n              </ChartContainer>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Realtime;","import React from 'react';\nimport { TimeSeries } from \"pondjs\";\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  LineChart\n} from \"react-timeseries-charts\";\n\n\n// Data\nconst data = require(\"../usd_vs_euro.json\");\nconst points = data.widget[0].data.reverse();\nconst series1 = new TimeSeries({\n  name: \"USD_vs_EURO\",\n  columns: [\"time\", \"value\"],\n  points\n});\n\nconst series2 = new TimeSeries({\n  name: \"USD_vs_EURO\",\n  columns: [\"time\", \"value\"],\n  points\n});\n\nclass Baselines extends React.Component {\n  state = {\n    tracker: null,\n    timerange: series1.range()\n  };\n\n  handleTrackerChanged = tracker => {\n    this.setState({ tracker });\n  };\n\n  handleTimeRangeChange = timerange => {\n    this.setState({ timerange });\n  };\n\n  render() {\n      return (\n          //<Resizable>\n        /*\n        <ChartContainer\n            title=\"Euro price (USD)\"\n            titleStyle={{ fill: \"#555\", fontWeight: 500 }}\n            timeRange={series.range()}\n            format=\"%b '%y\"\n            timeAxisTickCount={5}\n            width={3440}\n        >\n        <ChartRow height=\"800\">\n        <YAxis\n            id=\"price\"\n            label=\"Price ($)\"\n            min={series.min()}\n            max={series.max()}\n            width=\"60\"\n            format=\"$,.2f\"\n        />\n        <Charts>\n              <LineChart axis=\"price\" series={series} style={style} />\n              <Baseline\n                axis=\"price\"\n                style={baselineStyleLite}\n                value={series.max()}\n                label=\"Max\"\n                position=\"right\"\n              />\n              <Baseline\n                axis=\"price\"\n                style={baselineStyleLite}\n                value={series.min()}\n                label=\"Min\"\n                position=\"right\"\n              />\n              <Baseline\n                axis=\"price\"\n                style={baselineStyleExtraLite}\n                value={series.avg() - series.stdev()}\n              />\n              <Baseline\n                axis=\"price\"\n                style={baselineStyleExtraLite}\n                value={series.avg() + series.stdev()}\n              />\n              <Baseline\n                axis=\"price\"\n                style={baselineStyle}\n                value={series.avg()}\n                label=\"Avg\"\n                position=\"right\"\n              />\n            </Charts>\n          </ChartRow>\n        </ChartContainer>\n*/\n      //</Resizable>\n      // <Resizable>\n          <ChartContainer title=\"Average Hospital Noise Level Overall\" format=\"%b '%y\" timeRange={series1.timerange()} width={1200}>\n         <ChartRow height=\"200\">\n           <YAxis id=\"axis1\" label=\"dB Level\" min={0} max={100} width=\"60\" type=\"linear\" />\n           <Charts>\n             <LineChart axis=\"axis1\" series={series1} />\n             <LineChart axis=\"axis2\" series={series2} />\n           </Charts>\n             <YAxis id=\"axis2\" label=\"dB Level\" min={0} max={100} width=\"80\" type=\"linear\" />\n         </ChartRow>\n      </ChartContainer>\n      // </Resizable>\n\n    );\n  }\n}\n\nexport default Baselines;","import React from 'react';\nimport '../App.css';\nimport Realtime from '../components/Realtime';\nimport Baselines from '../components/Baselines';\n\nconst Home = () => {\n    return (\n       <div>\n        <h1 class=\"no-print\">Noise Manager WebApp</h1>\n          <p>Real time data of each section/device</p>\n          <div className=\"App-header\">\n              <Realtime />\n              <Baselines />\n            </div>\n       </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\n\n\nclass ReportTable extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          data: [\n            {\n                \"time_obs\": 1586030214,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 43\n            },\n            {\n                \"time_obs\": 1586030214,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 67\n            },\n            {\n                \"time_obs\": 1586030215,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 33\n            },\n            {\n                \"time_obs\": 1586030215,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 63\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 64\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 61\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 53\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 58\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 62\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 53\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 46\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 50\n            },\n            {\n                \"time_obs\": 1586030221,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 45\n            }\n        ]\n        \n\n        };\n\n\n    }\n\n\n    getTime( obs_time ) {\n\n        let date = new Date(0);\n        var myDate = new Date( obs_time *100);\n        return myDate;\n        // while( count < data_array.length ) {\n\n        //     let db_level = data_array[count].db_reading;\n        //     let timeobs = data_array[count].time_obs;\n        //     let date = new Date(0);\n\n\n        //     // Date from the api data\n        //     var myDate = new Date( timeobs *100);\n\n        //     console.log('myDate', myDate);\n        //     console.log('COUNT', count);\n        //     console.log('Date()', t);\n\n        //     count++;\n\n        //     return new TimeEvent( myDate, db_level);\n        // }\n        \n    }\n\n\n\n    render() {\n        return (\n\n            <div>\n\n\n                <h3>Daily Summary Table</h3>\n\n                <table>\n\n                    <thead id='table-header'>\n                        <tr>\n                            <th>ID Number</th>\n                            <th>Avg dB</th>\n                            <th>Peak dB</th>\n                        </tr>\n                    </thead>\n\n                    <tr>\n                        <th>1</th>\n                        <th>55 dB</th>\n                        <th>{this.state.data[0].db_reading} dB</th>\n                        {/* {this.state.data.map( item => \n                            <th> { item.db_reading } </th>\n                            )} */}\n                    </tr>\n\n                    <tr>\n                        <th>2</th>\n                        <th>52 dB</th>\n                        <th>72 dB</th>\n                    </tr>\n\n                    <tr>\n                        <th>3</th>\n                        <th>68 dB</th>\n                        <th>87 dB</th>\n                    </tr>\n\n                    <tr>\n                        <th>4</th>\n                        <th>70 dB</th>\n                        <th>73 dB</th>\n                    </tr>\n\n                    <tr>\n                        <th>5</th>\n                        <th>60 dB</th>\n                        <th>69 dB</th>\n                    </tr>\n\n\n                </table>\n\n\n            </div>\n\n\n        );\n    }\n\n\n\n\n}\n\n\n\n\n  \n  export default ReportTable;","import React from 'react';\nimport { TimeSeries } from \"pondjs\";\nimport {\n    Charts,\n    ChartContainer,\n    ChartRow,\n    YAxis,\n    LineChart,\n    Baseline,\n    Resizable\n  } from \"react-timeseries-charts\";\n  \n\n  const data = require(\"./usd_vs_euro.json\");\n  const points = data.widget[0].data.reverse();\n  const series = new TimeSeries({\n      name: \"USD_vs_EURO\",\n      columns: [\"time\", \"value\"],\n      points\n  });\n  \n  const style = {\n      value: {\n          stroke: \"#a02c2c\",\n          opacity: 0.2\n      }\n  };\n  \n  const baselineStyle = {\n      line: {\n          stroke: \"steelblue\",\n          strokeWidth: 1,\n          opacity: 0.4,\n          strokeDasharray: \"none\"\n      },\n      label: {\n          fill: \"steelblue\"\n      }\n  };\n  \n  const baselineStyleLite = {\n      line: {\n          stroke: \"steelblue\",\n          strokeWidth: 1,\n          opacity: 0.5\n      },\n      label: {\n          fill: \"steelblue\"\n      }\n  };\n  \n  const baselineStyleExtraLite = {\n      line: {\n          stroke: \"steelblue\",\n          strokeWidth: 1,\n          opacity: 0.2,\n          strokeDasharray: \"1,1\"\n      },\n      label: {\n          fill: \"steelblue\"\n      }\n  };\n  \n  class ReportChart extends React.Component {\n      state = {\n          tracker: null,\n          timerange: series.range()\n      };\n  \n      handleTrackerChanged = tracker => {\n          this.setState({ tracker });\n      };\n  \n      handleTimeRangeChange = timerange => {\n          this.setState({ timerange });\n      };\n\n\n\n\n  \n      render() {\n          return (\n\n                \n\n              <Resizable>\n                  <ChartContainer\n                      title=\"Daily Noise Report\"\n                      titleStyle={{ fill: \"#555\", fontWeight: 500 }}\n                      timeRange={series.range()}\n                      format=\"%b '%y\"\n                      timeAxisTickCount={5}\n                  >\n                      <ChartRow height=\"200\">\n                          <YAxis\n                              id=\"price\"\n                              label=\"dB Level (Noise)\"\n                              min={series.min()}\n                              max={series.max()}\n                              width=\"50\"\n                              format=\",.2f\"\n                          />\n                          <Charts>\n                              <LineChart axis=\"price\" series={series} style={style} />\n                              <Baseline\n                                  axis=\"price\"\n                                  style={baselineStyleLite}\n                                  value={series.max()}\n                                  label=\"Max\"\n                                  position=\"right\"\n                              />\n                              <Baseline\n                                  axis=\"price\"\n                                  style={baselineStyleLite}\n                                  value={series.min()}\n                                  label=\"Min\"\n                                  position=\"right\"\n                              />\n                              <Baseline\n                                  axis=\"price\"\n                                  style={baselineStyleExtraLite}\n                                  value={series.avg() - series.stdev()}\n                              />\n                              <Baseline\n                                  axis=\"price\"\n                                  style={baselineStyleExtraLite}\n                                  value={series.avg() + series.stdev()}\n                              />\n                              <Baseline\n                                  axis=\"price\"\n                                  style={baselineStyle}\n                                  value={series.avg()}\n                                  label=\"Avg\"\n                                  position=\"right\"\n                              />\n                          </Charts>\n                      </ChartRow>\n                  </ChartContainer>\n              </Resizable>\n          );\n      }\n  }\n\n\n\n\n\n  \n  export default ReportChart;","import React from 'react';\nimport ReportTable from '../components/ReportTable';\nimport ReportChart from '../components/ReportChart';\n\n\nconst Report = () => {\n   var curr = new Date();\n    return (\n\n\n       <div id='content'>\n          <h1>Your Noise Report Summary</h1>\n\n\n          <p>Report for: { curr.getMonth() }/{ curr.getDate() }/{ curr.getFullYear() }</p>\n\n\n         <ReportChart/>\n\n\n          <ReportTable/>\n       </div>\n    );\n}\n\nexport default Report;\n","import React from 'react';\n\nconst Help = () => {\n    return (\n       <div>\n          <h1>Help</h1>\n          <p>Please contact UCI's team Chubby Cats.</p>\n          <p>ziv@uci.edu</p>\n       </div>\n    );\n}\n\nexport default Help;\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nfunction Sidebar() {\n  return (\n    <div className=\"sidebar no-print\">\n      <h2>Innovation Lab</h2>\n      <ul>\n        <li><NavLink to=\"/host-website\">Home</NavLink></li>\n        <li><NavLink to=\"/report\">Report</NavLink></li>\n        <li><NavLink to=\"/help\">Help</NavLink></li>\n        </ul>\n    </div>\n  )\n}\n\nexport default Sidebar\n","import React, { Component } from 'react';\nimport './App.css';\nimport {\n  BrowserRouter,\n  Route\n} from 'react-router-dom';\n\n\n//Pages\nimport Home from './pages/Home.js';\nimport Report from './pages/Report';\nimport Help from './pages/Help';\n\n//Components\nimport Sidebar from './components/Sidebar';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        {/*All routes go here!*/}\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/host-website\" component={Home} />\n        <Route exact path=\"/report\" component={Report} />\n        <Route exact path=\"/help\" component={Help} />\n\n        <Sidebar/>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}