{"version":3,"sources":["components/IoTChart.js","pages/Home.js","components/ReportTableAPI.js","components/ReportChart.js","pages/Report.js","pages/Help.js","App.js","serviceWorker.js","index.js"],"names":["IoTChart","fetch","then","response","json","devices","jsonUsers","JSON","stringify","parse","map","e","userType","baseAPIURL","makeAPIRequest","user_id","info","today","Math","floor","Date","getTime","past","round","filteredJson","filter","time_obs","dict","Object","time","loudness","unixStorage","niceTime","dateObj","hours","getHours","minutes","getMinutes","ampm","makeNiceTime","db_reading","canvas","document","createElement","chartId","id","createTextNode","querySelector","appendChild","context","getElementById","getContext","window","Chart","type","data","labels","keys","reverse","datasets","label","values","borderColor","backgroundColor","lineTension","options","title","display","text","position","fontSize","fontColor","layout","padding","top","bottom","scales","xAxes","scaleLabel","labelString","ticks","maxTicksLimit","yAxes","beginAtZero","Component","updateChartMethod","value","console","log","chart","new_data","x","forEach","dataset","pop","push","update","updateChartHelper","setTimeout","Home","React","color_count","createDataset","user_file","user","colors","help","json_data","peak","peaktimes","avg","avgBase","result","activeHour","dbAvg","hourlyNumCount","final_result","i","length","toLocaleString","s","getAvgHourlyData","fill","chartOptions","showScale","pointDot","ReportChart","props","changeText","state","setState","chartReference","createRef","chartData","json_files","dataset_list","item","className","ref","this","height","width","key","Report","curr","Button","variant","size","onClick","preventDefault","print","toLocaleDateString","Help","App","Container","basename","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","NavLink","exact","path","component","from","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.77a5debf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Chart from \"chart.js\";\r\nimport { Line } from 'react-chartjs-2';\r\nimport 'chartjs-plugin-streaming';\r\n//var Component = React.Component;\r\n\r\nfunction makeAPIRequest(userType) {\r\n    var baseAPIURL = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/';\r\n    baseAPIURL = baseAPIURL + userType;\r\n    return fetch(baseAPIURL)\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            var jsonTest = json;\r\n            return jsonTest;\r\n        });\r\n}\r\n\r\nfunction makeAPIRequestUsers() {\r\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            var jsonTest = json;\r\n            return jsonTest;\r\n        });\r\n}\r\n\r\nfunction getLoudestOne(time, loudness, unixStorage)\r\n{\r\n    if(time in unixStorage){\r\n        if (unixStorage[time] < loudness) {\r\n            unixStorage[time] = loudness\r\n        }\r\n    }\r\n    else {\r\n        unixStorage[time] = loudness\r\n    }\r\n}\r\n\r\nfunction makeNiceTime(dateObj)\r\n{\r\n  var hours = dateObj.getHours();\r\n  // Get minutes part from the timestamp\r\n  var minutes = dateObj.getMinutes();\r\n  // Get seconds part from the timestamp\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n\r\n}\r\n\r\n\r\nexport default class IoTChart extends Component {\r\n    componentDidMount() {\r\n        var promiseA = makeAPIRequestUsers().then(devices => {\r\n            var jsonUsers = JSON.stringify(devices);\r\n            jsonUsers = JSON.parse(jsonUsers);\r\n            jsonUsers.map(function (e) {\r\n            //console.log(e.user_id);\r\n                var promiseB = makeAPIRequest(e.user_id).then(info => {\r\n                    var json = JSON.stringify(info);\r\n                    json = JSON.parse(json);\r\n                    var today = Math.floor(new Date().getTime()/1000.0);\r\n                    var past = Math.round(today - 7200);\r\n                    var filteredJson = json.filter(function (e) {\r\n                        if (e.time_obs >= past && e.time_obs < today) {\r\n                            return e.time_obs;\r\n                        }\r\n                    }\r\n                    );\r\n                    var dict = new Object();\r\n                    filteredJson.map(function (e) {\r\n                        var timeStampDate = new Date(e.time_obs * 1000);\r\n                        var niceTime = makeNiceTime(timeStampDate);\r\n                        getLoudestOne(niceTime, e.db_reading, dict);\r\n                    });\r\n                    var canvas = document.createElement('canvas'),\r\n                    chartId = 'chart' + e.user_id;\r\n                    canvas.id = chartId;\r\n                    var heading1 = document.createElement(\"H2\");\r\n                    var chartLabel = document.createTextNode(e.user_id);\r\n                    //heading1.appendChild(chartLabel);\r\n                    //document.querySelector(\"#chartContainer\").appendChild(heading1);\r\n                    document.querySelector(\"#chartContainer\").appendChild(canvas);\r\n\r\n                    var context = document.getElementById(chartId).getContext('2d');\r\n                    window[chartId] = new Chart(context, {\r\n                        type: 'line',\r\n                        data: {\r\n                            //Bring in data\r\n                            labels: Object.keys(dict).reverse(),\r\n                            datasets: [{\r\n                                label: \"DB Levels\",\r\n                                data: Object.values(dict).reverse(),\r\n                                borderColor: 'rgb(135, 188, 200)',\r\n                                backgroundColor: 'rgba(147, 215, 245, 0.5)',\r\n                                lineTension: 0,\r\n                            }]\r\n                        },\r\n                        options: {\r\n                            title: {\r\n                                display: true,\r\n                                text: e.user_id,\r\n                                position: 'top',\r\n                                fontSize: 30,\r\n                                fontColor: '#000000'\r\n                            },\r\n                            layout: {\r\n                                padding: {\r\n                                    top: 20,\r\n                                    bottom: 20\r\n                                }\r\n                            },\r\n                            scales: {\r\n                                xAxes: [{\r\n                                    scaleLabel: {\r\n                                        display: true,\r\n                                        labelString: 'Time (hh:mm 12-Hour)'\r\n                                    },\r\n                                    ticks: {\r\n                                        maxTicksLimit: 20\r\n                                    }\r\n                                }],\r\n                                yAxes: [{\r\n                                    scaleLabel: {\r\n                                        display: true,\r\n                                        labelString: 'Recorded Decibels (dB)'\r\n                                    },\r\n                                    ticks: {\r\n                                        beginAtZero: true\r\n                                    }\r\n                                }]\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n          });\r\n\r\n    }\r\n  render() {\r\n      return (\r\n          <div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport Chart from \"chart.js\";\r\nimport IoTChart from '../components/IoTChart.js'\r\n\r\n\r\n\r\nfunction makeAPIRequest(userType) {\r\n    var baseAPIURL = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/';\r\n    baseAPIURL = baseAPIURL + userType;\r\n    console.log(\"making api call (users)\");\r\n    return fetch(baseAPIURL)\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            var jsonTest = json;\r\n            return jsonTest;\r\n        });\r\n\r\n}\r\n\r\nfunction makeAPIRequestUsers() {\r\n    console.log(\"making user api call\");\r\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            var jsonTest = json;\r\n            return jsonTest;\r\n        });\r\n}\r\n\r\nfunction getLoudestOne(time, loudness, unixStorage)\r\n{\r\n    if(time in unixStorage){\r\n        if (unixStorage[time] < loudness) {\r\n            unixStorage[time] = loudness\r\n        }\r\n    }\r\n    else {\r\n        unixStorage[time] = loudness\r\n    }\r\n}\r\n\r\nfunction makeNiceTime(dateObj)\r\n{\r\n  var hours = dateObj.getHours();\r\n  // Get minutes part from the timestamp\r\n  var minutes = dateObj.getMinutes();\r\n  // Get seconds part from the timestamp\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n\r\n}\r\n\r\nfunction updateChartHelper(chart, label, data)\r\n{\r\n  //this is what actually updates the charts\r\n  console.log(chart);\r\n  chart.data.labels = label;\r\n  var new_data = data.map(x=>+x);\r\n  chart.data.datasets.forEach((dataset) => {\r\n    dataset.data.pop();\r\n  });\r\n  chart.data.datasets.forEach((dataset) => {\r\n       dataset.data.push(new_data);\r\n   });\r\n  chart.update();\r\n}\r\n\r\nfunction updateChartMethod(value)\r\n{\r\n  var promiseA = makeAPIRequestUsers().then(devices => {\r\n      var jsonUsers = JSON.stringify(devices);\r\n      jsonUsers = JSON.parse(jsonUsers);\r\n      jsonUsers.map(function (e) {\r\n            //console.log(e.user_id);\r\n            var promiseB = makeAPIRequest(e.user_id).then(info => {\r\n                var json = JSON.stringify(info);\r\n                json = JSON.parse(json);\r\n                var today = Math.floor(new Date().getTime()/1000.0);\r\n                var past = Math.round(today - 7200);\r\n                var filteredJson = json.filter(function (e) {\r\n                    if (e.time_obs >= past && e.time_obs < today) {\r\n                        return e.time_obs;\r\n                    }\r\n                }\r\n                );\r\n                var dict = new Object();\r\n                filteredJson.map(function (e) {\r\n                    var timeStampDate = new Date(e.time_obs * 1000);\r\n                    var niceTime = makeNiceTime(timeStampDate);\r\n                    getLoudestOne(niceTime, e.db_reading, dict);\r\n                });\r\n                var label = Object.keys(dict).reverse();\r\n                var data = Object.values(dict).reverse();\r\n                updateChartHelper(window['chart'+e.user_id],label,data);\r\n                setTimeout(function () { updateChartMethod(value - 1); }, 60000); //comment to update on its own\r\n                //setInterval(function () { updateChartMethod(value - 1); }, 60000); //uncomment to update on its own\r\n          });\r\n      });\r\n    });\r\n}\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <h1>Noise Manager WebApp</h1>\r\n            <p>Real time data of each section/device</p>\r\n            <div id=\"chartContainer\">\r\n                <IoTChart />\r\n            </div>\r\n            <script>\r\n            $(document).ready(function() {\r\n                    setTimeout(function () { updateChartMethod(100); }, 70000) //comment to update on its own\r\n                //setInterval(function () { updateChartMethod(100) }, 60000) //uncomment to update on its own\r\n            };\r\n            </script>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nfunction makeAPIRequest(userType) {\r\n    var baseAPIURL = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/';\r\n    baseAPIURL = baseAPIURL + userType\r\n    return fetch(baseAPIURL)\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            return json;\r\n        });\r\n}\r\n\r\nfunction makeAPIRequestUsers() {\r\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            return json;\r\n        });\r\n}\r\n\r\nclass ReportTable extends React.Component {\r\n\r\n  componentDidMount() {\r\n    var curr = Math.floor(Date.now() / 1000);\r\n    // var pastDay =  Math.round(curr - 43200); //12 hours\r\n    var pastDay =  Math.round(curr - 86400); //24 hours\r\n    makeAPIRequestUsers()\r\n      .then((users) => {\r\n        var jsonUsers = JSON.stringify(users);\r\n        jsonUsers = JSON.parse(jsonUsers);\r\n        jsonUsers.forEach(function(e) {\r\n          makeAPIRequest(e.user_id)\r\n            .then((rawdata) => {\r\n              var data = JSON.stringify(rawdata);\r\n              data = JSON.parse(data);\r\n              var filteredJson = data.filter(function (e) {\r\n                if (e.time_obs >= pastDay && e.time_obs < curr) {\r\n                  return e.time_obs;\r\n                }\r\n              }\r\n              );\r\n\r\n              var peak = 0;\r\n              var avg = 0;\r\n              var peaktimes = {};\r\n\r\n              filteredJson.forEach((item, i) => {\r\n                avg += item.db_reading;\r\n                if (item.db_reading >= peak) {\r\n                  delete peaktimes[peak];\r\n                  peak = item.db_reading;\r\n                  var time = new Date(item.time_obs * 1000);\r\n                  if (peaktimes[item.db_reading]) {\r\n                    peaktimes[item.db_reading].push(time.toLocaleString());\r\n                  }\r\n                  else {\r\n                    peaktimes[item.db_reading] = [time.toLocaleString()];\r\n                  }\r\n                }\r\n              })\r\n              console.log(\"peaktimes\");\r\n              console.log(peaktimes);\r\n              var d1 = document.getElementById('table');\r\n              d1.insertAdjacentHTML('beforeend', '<tr><td>'+e.user_id+'</td><td>'+ Math.round(avg/data.length)+'</td><td>'+ peak +'</td><td>'+ peaktimes[peak] +'</tr>');\r\n            })\r\n        })\r\n      })\r\n  }\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n              <h3>Daily Summary Table</h3>\r\n              <table>\r\n              <tbody id=\"table\">\r\n                <tr>\r\n                 <th id=\"table-header\">Section Name</th>\r\n                 <th id=\"table-header\">Average dB</th>\r\n                 <th id=\"table-header\">Peak dB</th>\r\n                 <th id=\"table-header\">Peak dB Time</th>\r\n                </tr>\r\n                </tbody>\r\n              </table>\r\n          </div>\r\n        );\r\n  }\r\n}\r\nexport default ReportTable;\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Button from 'react-bootstrap/Button';\r\nlet color_count = 0;\r\n\r\n\r\nfunction getAvgHourlyData( json_data ) { //Gathers the db Levels of each hour from the json and finds avg db level per hr\r\n  var peak = 0;\r\n  var peaktimes = {};\r\n  let avg = 0;\r\n  let avgBase = 0;\r\n\r\n    let result = [];\r\n    let activeHour = 0;\r\n    let dbAvg = 0;\r\n    let hourlyNumCount = 0;\r\n    // let chart_index = [0,1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12];\r\n    let final_result = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];//25\r\n    let activeDate = 0;\r\n\r\n    for(let i = 0; i < json_data.length ; i++) {\r\n        var time = new Date( json_data[i].time_obs *1000 );\r\n\r\n        if( activeHour == 0 ) {\r\n            activeHour = time.getHours();\r\n        } else if ( time.getHours() != activeHour ) {\r\n            result.push( [Math.round(dbAvg / hourlyNumCount), activeHour ])\r\n            activeHour = time.getHours();\r\n            dbAvg = 0;\r\n            hourlyNumCount = 0;\r\n        } else if ( i == json_data.length-1 ) {\r\n            result.push( [Math.round(dbAvg / hourlyNumCount), activeHour ])\r\n        }\r\n        dbAvg+= json_data[i].db_reading;\r\n        if (json_data[i].db_reading >= peak) {\r\n          delete peaktimes[peak];\r\n          peak = json_data[i].db_reading;\r\n          if (peaktimes[json_data[i].db_reading]) {\r\n            peaktimes[json_data[i].db_reading].push(time.toLocaleString());\r\n          }\r\n          else {\r\n            peaktimes[json_data[i].db_reading] = [time.toLocaleString()];\r\n          }\r\n        }\r\n        hourlyNumCount++;\r\n\r\n    }\r\n    for( var s = 0; s < result.length; s++){ // Loops through the list to put it on the final list that is shown in the data\r\n            let desiredIndex = result[s][1] ;\r\n            final_result[ desiredIndex ] = result[s][0];\r\n            if (result[s][0] !== 0) {\r\n              avg += result[s][0];\r\n              avgBase++;\r\n            }\r\n    }\r\n    return [final_result, Math.round(avg/avgBase), peak, peaktimes[peak]];\r\n\r\n}\r\n\r\nfunction createDataset( user_file, user ) { //Creates a dataset given the json file\r\n\r\n    const colors = [ 'rgb(25, 129, 102)', 'rgba(171,185,255)', 'rgb(19, 72, 250)', 'rgb(174, 255, 171)', 'rgb(255, 205, 139)', 'rgb(252, 58, 113)', 'rgb(232, 222, 46)', 'rgb(178, 62, 207)', 'rgb(158, 56, 5)'];\r\n    var help = getAvgHourlyData( user_file )\r\n    let result = {\r\n        label: user,\r\n        fill:false,\r\n        backgroundColor: colors[color_count],\r\n        borderColor: colors[color_count],\r\n        data: help[0],\r\n        avg: help[1],\r\n        peak: help[2],\r\n        peaktimes: help[3]\r\n    };\r\n    color_count++;\r\n    return result;\r\n}\r\n\r\n\r\n\r\nvar chartOptions = {\r\n    showScale: true,\r\n    pointDot: true,\r\n    title: {\r\n        display: true,\r\n        text: 'Average Noise Levels in the Past 24 Hours (Hourly)',\r\n        fontSize:20\r\n    },\r\n    scales: {\r\n        yAxes: [{\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Noise (dB) Levels'\r\n            }\r\n          }]\r\n       }\r\n\r\n}\r\n\r\nfunction makeAPIRequest(userType) {\r\n    let api_site = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/'+ userType;\r\n    return fetch( api_site )\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            var jsonTest = json;\r\n            return jsonTest;\r\n        });\r\n}\r\n\r\n\r\nfunction makeAPIRequestUsers() {\r\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            var jsonTest = json;\r\n            return jsonTest;\r\n        });\r\n}\r\n\r\n\r\n\r\nclass ReportChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.chartReference = React.createRef();\r\n        this.label = ['12AM', '1AM', '2AM', '3AM', '4AM', '5AM', '6AM', '7AM', '8AM','9AM','10AM','11AM','12PM','1PM','2PM','3PM','4PM','5PM','6PM','7PM','8PM', '9PM', '10PM', '11PM'];\r\n        this.state = {\r\n            text: 'Weekly Report',\r\n            chartData:\r\n             {\r\n                labels: this.label,\r\n                datasets: []\r\n             },\r\n             json_files: []\r\n        };\r\n\r\n    }\r\n\r\n    changeText = () => { //Changes text whenever the button is clicked -- going to add the functionality to switch graphs\r\n        if ( this.state.text == 'Weekly Report' ) {\r\n            this.setState({ text: 'Daily Report' });\r\n        } else {\r\n            this.setState({ text: 'Weekly Report' });\r\n\r\n        }\r\n      }\r\n\r\n\r\n\r\n    componentDidMount() { //Sets the state of datasets from the json files that are present\r\n\r\n        let dataset_list = [];\r\n\r\n        var promiseA = makeAPIRequestUsers().then(devices => { // Makes API request to get current users list\r\n            var jsonUsers = JSON.stringify(devices);\r\n            jsonUsers = JSON.parse(jsonUsers);\r\n            jsonUsers.forEach((item, i) => {\r\n                var api_data = makeAPIRequest(item.user_id).then(info => { //Loops through each user to create dataset and pushes it to the state\r\n                    var json = JSON.stringify(info);\r\n                    json = JSON.parse(json);\r\n                    var dataset = createDataset( json, json[0].user_id );\r\n                                                              console.log(dataset);\r\n                    dataset_list.push( dataset);\r\n                    if ( dataset_list.length == jsonUsers.length) {\r\n                        this.setState({\r\n                            chartData: {\r\n                                datasets: dataset_list\r\n                            }\r\n                        });\r\n                        return dataset_list;\r\n                    }\r\n                });\r\n        });\r\n\r\n\r\n    });\r\n\r\n}\r\n        render() {\r\n            return (\r\n              <div>\r\n                <div className='lineChart'>\r\n                    <Line\r\n                    ref={this.chartReference}\r\n                    data={this.state.chartData}\r\n                    options={chartOptions}\r\n                    height={250}\r\n                    width={600}\r\n                    />\r\n                </div>\r\n                <br></br><br></br>\r\n                <div>\r\n                    <h3>Daily Summary Table</h3>\r\n                    <table>\r\n                    <tbody>\r\n                      <tr>\r\n                       <th id=\"table-header\">Section Name</th>\r\n                       <th id=\"table-header\">Average dB</th>\r\n                       <th id=\"table-header\">Peak dB</th>\r\n                       <th id=\"table-header\">Peak dB Time</th>\r\n                      </tr>\r\n                      {this.state.chartData.datasets.map((item) =>\r\n                        <tr key={item.label}>\r\n                        <td>{item.label}</td>\r\n                        <td>{item.avg}</td>\r\n                        <td> {item.peak}</td>\r\n                        <td>{item.peaktimes}</td>\r\n                        </tr>\r\n                      )}\r\n                      </tbody>\r\n                    </table>\r\n                </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n  export default ReportChart;\r\n","import React from 'react';\r\nimport ReportTable from '../components/ReportTableAPI';\r\nimport ReportChart from '../components/ReportChart';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst Report = () => {\r\n   var curr = new Date();\r\n   function printPage(e) {\r\n     e.preventDefault();\r\n     window.print();\r\n   }\r\n    return (\r\n       <div>\r\n        <div className=\"no-print print-btn\">\r\n          <Button variant=\"info\" size=\"lg\" onClick={printPage}>Print report</Button>\r\n        </div>\r\n\r\n          <h1>Your Noise Report Summary</h1>\r\n          <p>Generated on <b>{ curr.toLocaleDateString() }</b></p>\r\n\r\n          <ReportChart/>\r\n          <br></br>\r\n          <br></br>\r\n          {/*<ReportTable/>*/}\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Report;\r\n","import React from 'react';\r\n\r\nconst Help = () => {\r\n    return (\r\n       <div>\r\n          <h1>Help</h1>\r\n          <p>Please contact UCI's team Chubby Cats.</p>\r\n          <p>ziv@uci.edu</p>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Help;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nimport {\r\n  HashRouter,\r\n  Route,\r\n  Link,\r\n  NavLink,\r\n  Switch,\r\n  Redirect\r\n} from 'react-router-dom';\r\n\r\n//Pages\r\nimport Home from './pages/Home.js';\r\nimport Report from './pages/Report';\r\nimport Help from './pages/Help';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <HashRouter basename='/'>\r\n              <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" >\r\n                <Navbar.Brand as={Link} to=\"/\">Wall Mount Tracking</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                  <Nav className=\"mr-auto\">\r\n                    <Nav.Link as={NavLink} to=\"/host-website\">Home</Nav.Link>\r\n                    <Nav.Link as={NavLink} to=\"/report\">Report</Nav.Link>\r\n                    <Nav.Link as={NavLink} to=\"/help\">Help</Nav.Link>\r\n                  </Nav>\r\n                </Navbar.Collapse>\r\n              </Navbar>\r\n              < br />\r\n              <Switch>\r\n                <Route exact path='/host-website' component={Home}/>\r\n                <Route exact path='/report' component={Report}/>\r\n                <Route exact path='/help' component={Help}/>\r\n                <Redirect from=\"/\" to=\"/host-website\"/>\r\n              </Switch>\r\n          </HashRouter>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(<Router>< App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}