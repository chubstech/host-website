{"version":3,"sources":["components/IoTChart.js","components/AnaChart.js","pages/Home.js","components/ReportTableAPI.js","components/ReportChart.js","pages/Report.js","pages/Help.js","App.js","serviceWorker.js","index.js"],"names":["IoTChart","fetch","then","response","json","devices","jsonUsers","JSON","stringify","parse","console","log","map","e","user_id","userType","baseAPIURL","makeAPIRequest","info","current","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getCurrentDate","filteredJson","filter","time_obs","dict","Object","time","loudness","unixStorage","niceTime","dateObj","hours","minutes","ampm","makeNiceTime","db_reading","canvas","document","createElement","chartId","id","heading1","chartLabel","createTextNode","appendChild","querySelector","context","getElementById","getContext","window","Chart","type","data","labels","keys","datasets","label","values","options","title","display","text","scales","xAxes","ticks","maxTicksLimit","yAxes","beginAtZero","React","Component","Home","ReportTable","pastDay","Math","round","now","users","rawdata","peak","avg","peaktimes","forEach","item","i","push","toLocaleString","insertAdjacentHTML","length","color_count","getAvgHourlyData","json_data","result","activeHour","dbAvg","hourlyNumCount","final_result","s","chartOptions","showScale","pointDot","fontSize","scaleLabel","labelString","ReportChart","props","changeText","state","setState","chartReference","createRef","chartData","json_files","dataset_list","dataset","user_file","user","colors","fill","backgroundColor","borderColor","createDataset","className","ref","this","height","width","class","Button","variant","size","onClick","Report","curr","preventDefault","print","toLocaleDateString","Help","App","Container","basename","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","NavLink","exact","path","component","from","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.edde8383.chunk.js","sourcesContent":["import React from 'react'\r\nimport Chart from \"chart.js\";\r\nvar Component = React.Component;\r\n\r\nvar data;\r\nfunction makeAPIRequest(userType) {\r\n    var baseAPIURL = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/';\r\n    baseAPIURL = baseAPIURL + userType;\r\n    return fetch(baseAPIURL)\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            var jsonTest = json;\r\n            return jsonTest;\r\n        });\r\n}\r\n\r\nfunction makeAPIRequestUsers() {\r\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            var jsonTest = json;\r\n            return jsonTest;\r\n        });\r\n}\r\n\r\nfunction getCurrentDate()\r\n{\r\n  var toBuild;\r\n    var date = new Date();\r\n    //date.getDate()-2 accounts for time changing\r\n  toBuild = new Date(date.getFullYear(), date.getMonth(), date.getDate()-3, date.getHours()-2, date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n  return toBuild;\r\n}\r\n\r\nfunction getLoudestOne(time, loudness, unixStorage)\r\n{\r\n    if(time in unixStorage){\r\n        if (unixStorage[time] < loudness) {\r\n            unixStorage[time] = loudness\r\n        }\r\n    }\r\n    else {\r\n        unixStorage[time] = loudness\r\n    }\r\n}\r\n\r\nfunction makeNiceTime(dateObj)\r\n{\r\n  var hours = dateObj.getHours();\r\n  // Get minutes part from the timestamp\r\n  var minutes = dateObj.getMinutes();\r\n  // Get seconds part from the timestamp\r\n  var ampm = hours >= 12 ? 'pm' : 'am';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12; // the hour '0' should be '12'\r\n  minutes = minutes < 10 ? '0'+minutes : minutes;\r\n  var strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime;\r\n\r\n}\r\n\r\nexport default class IoTChart extends Component {\r\n    componentDidMount() {\r\n        var promiseA = makeAPIRequestUsers().then(devices => { //uncomment once we are ready to use api to call for user list\r\n            //var jsonFiles = require('../test-data-files/users.json');//iterates through list of user\r\n            var jsonUsers = JSON.stringify(devices); //uncomment once we are ready to use api to call for user list\r\n            jsonUsers = JSON.parse(jsonUsers); //uncomment once we are ready to use api to call for user list\r\n            console.log(jsonUsers); //uncomment once we are ready to use api to call for user list\r\n            var count = 0;\r\n            jsonUsers.map(function (e) { //uncomment once we are ready to use api to call for user list\r\n            console.log(e.user_id);\r\n                                //jsonFiles.forEach((item, i) => { //comment once we are ready to use api to call for user list\r\n                        var promiseB = makeAPIRequest(e.user_id).then(info => { //uncomment once we are ready to use api to call for user list\r\n                          //  var promiseB = makeAPIRequest(info).then(info => {\r\n                                var json = JSON.stringify(info);\r\n                                json = JSON.parse(json);\r\n                                var current = getCurrentDate();\r\n                                var filteredJson = json.filter(function (e) {\r\n                                    var tempTimeStampDate = new Date(e.time_obs * 1000);\r\n                                    if (tempTimeStampDate >= current) {\r\n                                        return e.time_obs;\r\n                                    }\r\n                                }\r\n                              );\r\n                                console.log(filteredJson);\r\n                                var dict = new Object();\r\n                                filteredJson.map(function (e) {\r\n                                    var timeStampDate = new Date(e.time_obs * 1000);\r\n                                    var niceTime = makeNiceTime(timeStampDate);\r\n                                    getLoudestOne(niceTime, e.db_reading, dict);\r\n                                });\r\n                                var canvas = document.createElement('canvas'),\r\n                                chartId = 'chart' + e.user_id;\r\n                                canvas.id = chartId;\r\n                                var heading1 = document.createElement(\"H2\"); //creates heading2 tag\r\n                                var chartLabel = document.createTextNode(e.user_id); //creates label text //uncomment once we are ready to call api for user list\r\n                                //var chartLabel = document.createTextNode(item); //creates label text //comment once we are ready to call api for user list\r\n                                heading1.appendChild(chartLabel);//appends heading2 to the text\r\n                                document.querySelector(\"#chartContainer\").appendChild(heading1); //appends label to chartContainer div\r\n                                document.querySelector(\"#chartContainer\").appendChild(canvas);// appends chart to chartCOntainer div\r\n                                //document.body.appendChild(canvas) //old code\r\n\r\n                                var context = document.getElementById(chartId).getContext('2d');\r\n                                window[chartId] = new Chart(context, {\r\n                                    type: 'line',\r\n                                    data: {\r\n                                        //Bring in data\r\n                                        labels: Object.keys(dict),\r\n                                        datasets: [\r\n                                            {\r\n                                                label: \"DB Levels\",\r\n                                                data: Object.values(dict),\r\n                                            }\r\n                                        ]\r\n                                    },\r\n                                    options: {\r\n                                        title: {\r\n                                            display: true,\r\n                                            //text: item //comment once we are ready to use api to call for user list\r\n                                            text: e.user_id //uncomment once we are ready to use api to call for user list\r\n                                        },\r\n                                        scales: {\r\n                                            xAxes: [{\r\n                                                ticks: {\r\n                                                    maxTicksLimit: 20\r\n                                                }\r\n                                            }],\r\n                                            yAxes: [{\r\n                                                ticks: {\r\n                                                    beginAtZero: true\r\n                                                }\r\n                                            }]\r\n                                        }\r\n                                    }\r\n                                });\r\n\r\n                            //});\r\n                        }); //uncomment once we are ready to use api to call for user list\r\n                    //}); //comment once we are ready to use api to call for user list\r\n            }); //uncomment once we are ready to use api to call for user list\r\n        }); //uncomment once we are ready to use api to call for user list\r\n\r\n    }\r\n  render() {\r\n      return (\r\n          <div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport Chart from \"chart.js\";\r\nvar Component = React.Component;\r\n\r\nfunction makeAPIRequest(userType) {\r\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/Patient1')\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            //console.log(json);\r\n            var jsonTest = json;\r\n            return jsonTest;\r\n        });\r\n}\r\n\r\nexport default class AnaChart extends Component {\r\n    chartRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n        //console.log(makeAPIRequest(\"dummyInput\")); //makeAPI request works and user is able to see data after waiting in console only\r\n        \r\n        var promiseA =\r\n            makeAPIRequest(\"Patient1\").then(info => {\r\n                //console.log(info);\r\n                var json = JSON.stringify(info);\r\n                json = JSON.parse(json);\r\n                //console.log(json);\r\n                //console.log(typeof json);\r\n                var dataDict = new Object();\r\n                var dataArr = [];\r\n                for (var i = 0; i < json.length; i++) {\r\n                    //console.log(json[i].time_obs);\r\n                    dataDict[json[i].time_obs] = json[i].db_reading;\r\n                    dataArr.push(json[i]);\r\n                    \r\n                }\r\n                //console.log(dataDict);\r\n                //console.log(dataArr); \r\n\r\n                const myChartRef = this.chartRef.current.getContext(\"2d\"); //creates a 2D chart\r\n                var labels = dataArr.map(function (e) { //generates the labels for the data\r\n                    var dateObj = new Date(e.time_obs * 1000); //converts Unix Time Stamp to date object and places it in variable dateObj\r\n                    //console.log(dateObj.toDateString);\r\n                    var hours = dateObj.getUTCHours(); // variable hours (label) is assigned\r\n                    var minutes = dateObj.getUTCMinutes(); //variable mins (label) is assigned\r\n\r\n                    // Get seconds part from the timestamp\r\n                    var seconds = dateObj.getUTCSeconds(); // variable seconds (label) is assigned\r\n                    //dateObj.toDateString() + \" \" + \r\n                    var formattedTime = hours.toString().padStart(2, '0') + ':' + ///formats the time into a more readable maner HH:MM:SS 24HRS Mode using the variables we created earlier\r\n                        minutes.toString().padStart(2, '0') + ':' +\r\n                        seconds.toString().padStart(2, '0');\r\n                    return formattedTime //returns the string with the readable time\r\n                });\r\n                var data = dataArr.map(function (e) {\r\n                    return e.db_reading;\r\n                });\r\n\r\n                new Chart(myChartRef, {\r\n                    type: \"line\",\r\n                    data: {\r\n                        //Bring in data\r\n                        labels: labels,\r\n                        datasets: [\r\n                            {\r\n                                label: \"DB Levels\",\r\n                                data: data,\r\n                            }\r\n                        ]\r\n                    },\r\n                    options: {\r\n                        //Customize chart options\r\n                    }\r\n                });\r\n            });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas\r\n                    id=\"myChart\"\r\n                    ref={this.chartRef}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport '../App.css';\r\nimport IoTChart from '../components/IoTChart.js'\r\nimport AnaChart from '../components/AnaChart.js'\r\n\r\nconst Home = () => {\r\n    return (\r\n      <div>\r\n        <h1>Noise Manager WebApp</h1>\r\n            <p>Real time data of each section/device</p>\r\n            <div id=\"chartContainer\">\r\n                <IoTChart />\r\n            </div>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nfunction makeAPIRequest(userType) {\r\n    var baseAPIURL = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/';\r\n    baseAPIURL = baseAPIURL + userType\r\n    return fetch(baseAPIURL)\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            return json;\r\n        });\r\n}\r\n\r\nfunction makeAPIRequestUsers() {\r\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            return json;\r\n        });\r\n}\r\n\r\nclass ReportTable extends React.Component {\r\n\r\n  componentDidMount() {\r\n    var pastDay =  Math.round(Date.now() / 1000) - 86400;\r\n    // var pastDay =  1588974396 - 86400; //esp32 stopped sending data 5/8. uncomment to show something on table\r\n    makeAPIRequestUsers()\r\n      .then((users) => {\r\n        var jsonUsers = JSON.stringify(users);\r\n        jsonUsers = JSON.parse(jsonUsers);\r\n        jsonUsers.map(function(e) {\r\n          makeAPIRequest(e.user_id)\r\n            .then((rawdata) => {\r\n              var data = JSON.stringify(rawdata);\r\n              data = JSON.parse(data);\r\n              var filteredJson = data.filter(function (e) {\r\n                  return e.time_obs >= pastDay;\r\n                  }\r\n              );\r\n\r\n              var peak = 0;\r\n              var avg = 0;\r\n              var peaktimes = {};\r\n\r\n              filteredJson.forEach((item, i) => {\r\n                avg += item.db_reading;\r\n                if (item.db_reading > peak) {\r\n                  peak = item.db_reading;\r\n                }\r\n\r\n                var time = new Date(item.time_obs * 1000);\r\n                if (peaktimes[item.db_reading]) {\r\n                  peaktimes[item.db_reading].push(time.toLocaleString());\r\n                }\r\n                else {\r\n                  peaktimes[item.db_reading] = [time.toLocaleString()];\r\n                }\r\n              })\r\n              var d1 = document.getElementById('table');\r\n              d1.insertAdjacentHTML('beforeend', '<tr><td>'+e.user_id+'</td><td>'+ Math.round(avg/data.length)+'</td><td>'+ peak +'</td><td>'+ peaktimes[peak] +'</tr>');\r\n            })\r\n        })\r\n      })\r\n  }\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n              <h3>Daily Summary Table</h3>\r\n              <table>\r\n              <tbody id=\"table\">\r\n                <tr>\r\n                 <th id=\"table-header\">Section Name</th>\r\n                 <th id=\"table-header\">Average dB</th>\r\n                 <th id=\"table-header\">Peak dB</th>\r\n                 <th id=\"table-header\">Peak dB Time</th>\r\n                </tr>\r\n                </tbody>\r\n              </table>\r\n          </div>\r\n        );\r\n  }\r\n}\r\nexport default ReportTable;\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Button from 'react-bootstrap/Button';\r\nlet color_count = 0;\r\n\r\n\r\nfunction getAvgHourlyData( json_data ) { //Gathers the db Levels of each hour from the json and finds avg db level per hr\r\n\r\n    let result = [];\r\n    let activeHour = 0;\r\n    let dbAvg = 0;\r\n    let hourlyNumCount = 0;\r\n    // let chart_index = [0,1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12];\r\n    let final_result = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];//25\r\n    let activeDate = 0;\r\n\r\n    for(let i = 0; i < json_data.length ; i++) {\r\n        var time = new Date( json_data[i].time_obs *1000 );\r\n\r\n        if( activeHour == 0 ) {\r\n            activeHour = time.getHours();\r\n        } else if ( time.getHours() != activeHour ) {\r\n            result.push( [Math.round(dbAvg / hourlyNumCount), activeHour ])\r\n            activeHour = time.getHours();\r\n            dbAvg = 0;\r\n            hourlyNumCount = 0;\r\n        } else if ( i == json_data.length-1 ) {\r\n            result.push( [Math.round(dbAvg / hourlyNumCount), activeHour ])\r\n        }\r\n        dbAvg+= json_data[i].db_reading;\r\n        hourlyNumCount++;\r\n        \r\n    }\r\n    for( var s = 0; s < result.length; s++){ // Loops through the list to put it on the final list that is shown in the data\r\n            let desiredIndex = result[s][1] ;\r\n            final_result[ desiredIndex ] = result[s][0];\r\n    }\r\n    return final_result;\r\n\r\n}\r\n\r\nfunction createDataset( user_file, user ) { //Creates a dataset given the json file\r\n\r\n    const colors = [ 'rgb(25, 129, 102)', 'rgba(171,185,255)', 'rgb(19, 72, 250)', 'rgb(174, 255, 171)', 'rgb(255, 205, 139)', 'rgb(252, 58, 113)', 'rgb(232, 222, 46)', 'rgb(178, 62, 207)', 'rgb(158, 56, 5)'];\r\n    let result = {\r\n        label: user,\r\n        fill:false,\r\n        backgroundColor: colors[color_count],\r\n        borderColor: colors[color_count],\r\n        data: getAvgHourlyData( user_file ), \r\n    };\r\n    color_count++;\r\n    return result;\r\n}\r\n\r\n\r\n\r\nvar chartOptions = {\r\n    showScale: true,\r\n    pointDot: true,\r\n    title: {\r\n        display: true,\r\n        text: 'Average Noise Levels (Hourly)',\r\n        fontSize:20\r\n    },\r\n    scales: {\r\n        yAxes: [{\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Noise (dB) Levels'\r\n            }\r\n          }]\r\n       }\r\n\r\n}\r\n\r\nfunction makeAPIRequest(userType) {\r\n    let api_site = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/'+ userType;\r\n    return fetch( api_site )\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            var jsonTest = json;\r\n            return jsonTest;\r\n        });\r\n}\r\n\r\n\r\nfunction makeAPIRequestUsers() {\r\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            var jsonTest = json;\r\n            return jsonTest;\r\n        });\r\n}\r\n\r\n\r\n\r\nclass ReportChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.chartReference = React.createRef();\r\n        this.label = ['12AM', '1AM', '2AM', '3AM', '4AM', '5AM', '6AM', '7AM', '8AM','9AM','10AM','11AM','12PM','1PM','2PM','3PM','4PM','5PM','6PM','7PM','8PM', '9PM', '10PM', '11PM'];\r\n        this.state = {\r\n            text: 'Weekly Report',\r\n            chartData:\r\n             {\r\n                labels: this.label,\r\n                datasets: []\r\n             }, \r\n             json_files: []\r\n        };\r\n\r\n    }\r\n\r\n    changeText = () => { //Changes text whenever the button is clicked -- going to add the functionality to switch graphs\r\n        if ( this.state.text == 'Weekly Report' ) {\r\n            this.setState({ text: 'Daily Report' }); \r\n        } else {\r\n            this.setState({ text: 'Weekly Report' }); \r\n\r\n        }\r\n      } \r\n\r\n\r\n    \r\n    componentDidMount() { //Sets the state of datasets from the json files that are present\r\n\r\n        let dataset_list = [];\r\n\r\n        var promiseA = makeAPIRequestUsers().then(devices => { // Makes API request to get current users list\r\n            var jsonUsers = JSON.stringify(devices);\r\n            jsonUsers = JSON.parse(jsonUsers); \r\n            jsonUsers.forEach((item, i) => {\r\n                var api_data = makeAPIRequest(item.user_id).then(info => { //Loops through each user to create dataset and pushes it to the state\r\n                    var json = JSON.stringify(info);\r\n                    json = JSON.parse(json);\r\n                    var dataset = createDataset( json, json[0].user_id ); \r\n                    dataset_list.push( dataset);   \r\n                    if ( dataset_list.length == jsonUsers.length) {\r\n                        this.setState({\r\n                            chartData: {\r\n                                datasets: dataset_list\r\n                            }\r\n                        });\r\n                        return dataset_list;\r\n                    }\r\n\r\n                });\r\n        });\r\n    \r\n    });\r\n    \r\n}\r\n\r\n        render() {\r\n            return (\r\n                <div className='lineChart'>\r\n                    <Line \r\n                    ref={this.chartReference}\r\n                    data={this.state.chartData}\r\n                    options={chartOptions}\r\n                    height={250}\r\n                    width={600}\r\n                    />\r\n\r\n                    <div class=\"btn btn-info\">\r\n                    <Button id='reportbutton' variant=\"info\" size=\"sm\" \r\n                    onClick={ () => { this.changeText()}  }>{this.state.text}</Button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n  export default ReportChart;","import React from 'react';\r\nimport ReportTable from '../components/ReportTableAPI';\r\nimport ReportChart from '../components/ReportChart';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst Report = () => {\r\n   var curr = new Date();\r\n   function printPage(e) {\r\n     e.preventDefault();\r\n     window.print();\r\n   }\r\n    return (\r\n       <div>\r\n        <div className=\"no-print print-btn\">\r\n          <Button variant=\"info\" size=\"lg\" onClick={printPage}>Print report</Button>\r\n        </div>\r\n\r\n          <h1>Your Noise Report Summary</h1>\r\n          <p>Generated on <b>{ curr.toLocaleDateString() }</b></p>\r\n\r\n          <ReportChart/>\r\n          <br></br>\r\n          <br></br>\r\n          <ReportTable/>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Report;\r\n","import React from 'react';\r\n\r\nconst Help = () => {\r\n    return (\r\n       <div>\r\n          <h1>Help</h1>\r\n          <p>Please contact UCI's team Chubby Cats.</p>\r\n          <p>ziv@uci.edu</p>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Help;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nimport {\r\n  HashRouter,\r\n  Route,\r\n  Link,\r\n  NavLink,\r\n  Switch,\r\n  Redirect\r\n} from 'react-router-dom';\r\n\r\n//Pages\r\nimport Home from './pages/Home.js';\r\nimport Report from './pages/Report';\r\nimport Help from './pages/Help';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <HashRouter basename='/'>\r\n              <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" >\r\n                <Navbar.Brand as={Link} to=\"/\">React Demo App</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                  <Nav className=\"mr-auto\">\r\n                    <Nav.Link as={NavLink} to=\"/host-website\">Home</Nav.Link>\r\n                    <Nav.Link as={NavLink} to=\"/report\">Report</Nav.Link>\r\n                    <Nav.Link as={NavLink} to=\"/help\">Help</Nav.Link>\r\n                  </Nav>\r\n                </Navbar.Collapse>\r\n              </Navbar>\r\n              < br />\r\n              <Switch>\r\n                <Route exact path='/host-website' component={Home}/>\r\n                <Route exact path='/report' component={Report}/>\r\n                <Route exact path='/help' component={Help}/>\r\n                <Redirect from=\"/\" to=\"/host-website\"/>\r\n              </Switch>\r\n          </HashRouter>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(<Router>< App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}