{"version":3,"sources":["components/Realtime.js","components/Baselines.js","components/FranksChart.js","pages/Home.js","components/ReportTable.js","js/styler.js","Legend.js","js/util.js","js/curve.js","components/LineChart.js","components/ReportChart.js","pages/Report.js","pages/Help.js","App.js","serviceWorker.js","index.js"],"names":["Realtime","state","time","Date","events","Ring","percentile50Out","percentile90Out","getNewEvent","t","TimeEvent","this","stream","Stream","pipeline","from","windowBy","emitOn","aggregate","value","percentile","to","EventOut","event","push","setState","interval","setInterval","getTime","newEvents","addEvent","clearInterval","beginTime","latestTime","fiveMinuteStyle","normal","fill","opacity","highlight","selected","eventSeries","TimeSeries","name","toArray","perc50Series","perc90Series","initialBeginTime","endTime","timeRange","TimeRange","charts","axis","series","style","columns","styler","key","color","width","dashed","id","className","type","categories","label","fontSize","borderWidth","borderColor","title","height","min","max","React","Component","displayName","points","require","widget","data","reverse","series1","series2","Baselines","tracker","timerange","range","handleTrackerChanged","handleTimeRangeChange","format","FrankLineGraph","chartRef","createRef","myChartRef","current","getContext","jsonfile","dict","Object","labels","map","e","time_obs","db_reading","dateObj","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","toString","padStart","Chart","datasets","options","ref","Home","ReportTable","props","obs_time","Styler","scheme","columnStyles","_","isArray","forEach","column","isString","isObject","columnNames","c","has","colorbrewer","Error","colorScheme","length","columnCount","colorSchemeKeys","keys","minSchemeSize","maxSchemeSize","colorLookupSize","numColumns","colorLookup","i","indexOf","columnName","styleSymbol","stroke","cursor","strokeWidth","strokeDasharray","labelStyle","paddingRight","valueStyle","legendStyle","symbol","highlighted","muted","styleLine","styleSelectedLine","styleArea","styleSelectedArea","line","area","fillStyle","selectedStyle","defaultStyle","LegendItem","stopPropagation","onSelectionChange","onHighlightChange","symbolWidth","symbolHeight","float","x1","y1","parseInt","x2","y2","x","y","rx","ry","w","h","radius","cx","cy","r","symbolStyle","itemKey","symbolType","renderSwatch","renderLine","renderDot","display","flexDirection","onClick","handleClick","onMouseMove","handleHover","onMouseLeave","handleHoverLeave","alignItems","Legend","category","isFunction","isHighlighted","isSelected","selection","isDisabled","disabled","mode","styleMap","providedStyle","styleMode","merge","items","align","stack","justifyContent","marginBottom","flexWrap","defaultProps","scaleAsString","scale","domain","curveBasisClosed","curveBasisOpen","curveBasis","curveBundle","curveCardinalClosed","curveCardinalOpen","curveCardinal","curveCatmullRomClosed","curveCatmullRomOpen","curveCatmullRom","curveLinearClosed","curveLinear","curveMonotoneX","curveMonotoneY","curveNatural","curveStep","curveStepAfter","curveStepBefore","LineChart","nextProps","newSeries","oldSeries","timeScale","yScale","interpolation","widthChanged","timeScaleChanged","yAxisScaleChanged","interpolationChanged","highlightChanged","selectionChanged","columnsChanged","seriesChanged","size","is","lineChartStyle","providedPathStyleMap","pointerEvents","path","curve","curves","d","pathStyle","pathLines","count","breakLine","currentPoints","timestamp","begin","end","get","isNull","isNaN","isFinite","renderPath","cleanedPoints","renderLines","visible","smooth","test_data","noiseSeries","result","buildPoints","ReportChart","handleMouseMove","timeAxisStyle","ticks","values","showGrid","maxTime","minTime","timeAxisAngledLabels","timeAxisHeight","onTrackerChanged","onBackgroundClick","enablePanZoom","onTimeRangeChanged","minDuration","hideAxisLine","position","Report","curr","class","Button","variant","preventDefault","window","print","getMonth","getDate","getFullYear","border","padding","margin","Help","App","Container","Navbar","bg","expand","Brand","as","Link","Toggle","aria-controls","Collapse","Nav","NavLink","exact","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92960cc0.chunk.js","sourcesContent":["import React from 'react';\r\nimport Ring from \"ringjs\";\r\n\r\nimport {\r\n  TimeRange,\r\n  TimeEvent,\r\n  Pipeline as pipeline,\r\n  Stream,\r\n  EventOut,\r\n  percentile,\r\n  TimeSeries\r\n} from \"pondjs\";\r\n\r\nimport {\r\n  Charts,\r\n  ChartContainer,\r\n  ChartRow,\r\n  YAxis,\r\n  ScatterChart,\r\n  BarChart,\r\n  Legend,\r\n  styler\r\n} from \"react-timeseries-charts\";\r\n\r\n/**\r\n *  Copyright (c) 2016, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nconst sec = 1000;\r\nconst minute = 60 * sec;\r\nconst hours = 60 * minute;\r\nconst rate = 80;\r\n\r\nclass Realtime extends React.Component {\r\n  static displayName = \"AggregatorDemo\";\r\n\r\n  state = {\r\n    // time: new Date(2015, 0, 1),\r\n    time: new Date(),\r\n    events: new Ring(200),\r\n    percentile50Out: new Ring(100),\r\n    percentile90Out: new Ring(100)\r\n  };\r\n\r\n  getNewEvent = t => {\r\n    return new TimeEvent(t, 100);\r\n  };\r\n\r\n  componentDidMount() {\r\n    //\r\n    // Setup our aggregation pipelines\r\n    //\r\n\r\n    this.stream = new Stream();\r\n\r\n    pipeline()\r\n      .from(this.stream)\r\n      .windowBy(\"5m\")\r\n      .emitOn(\"discard\")\r\n      .aggregate({\r\n        value: { value: percentile(90) }\r\n      })\r\n      .to(EventOut, event => {\r\n        const events = this.state.percentile90Out;\r\n        events.push(event);\r\n        this.setState({ percentile90Out: events });\r\n      });\r\n\r\n    pipeline()\r\n      .from(this.stream)\r\n      .windowBy(\"5m\")\r\n      .emitOn(\"discard\")\r\n      .aggregate({\r\n        value: { value: percentile(50) }\r\n      })\r\n      .to(EventOut, event => {\r\n        const events = this.state.percentile50Out;\r\n        events.push(event);\r\n        this.setState({ percentile50Out: events });\r\n      });\r\n\r\n    //\r\n    // Setup our interval to advance the time and generate raw events\r\n    //\r\n\r\n    const increment = minute;\r\n    this.interval = setInterval(() => {\r\n      const t = new Date(this.state.time.getTime() + increment);\r\n      const event = this.getNewEvent(t);\r\n\r\n      // Raw events\r\n      const newEvents = this.state.events;\r\n      newEvents.push(event);\r\n      this.setState({ time: t, events: newEvents });\r\n\r\n      // Let our aggregators process the event\r\n      this.stream.addEvent(event);\r\n    }, rate);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const latestTime = `${this.state.time}`;\r\n\r\n    const fiveMinuteStyle = {\r\n      value: {\r\n        normal: { fill: \"#619F3A\", opacity: 0.2 },\r\n        highlight: { fill: \"619F3A\", opacity: 0.5 },\r\n        selected: { fill: \"619F3A\", opacity: 0.5 }\r\n      }\r\n    };\r\n\r\n    const scatterStyle = {\r\n      value: {\r\n        normal: {\r\n          fill: \"steelblue\",\r\n          opacity: 0.5\r\n        }\r\n      }\r\n    };\r\n\r\n    //\r\n    // Create a TimeSeries for our raw, 5min and hourly events\r\n    //\r\n\r\n    const eventSeries = new TimeSeries({\r\n      name: \"raw\",\r\n      events: this.state.events.toArray()\r\n    });\r\n\r\n    const perc50Series = new TimeSeries({\r\n      name: \"five minute perc50\",\r\n      events: this.state.percentile50Out.toArray()\r\n    });\r\n\r\n    const perc90Series = new TimeSeries({\r\n      name: \"five minute perc90\",\r\n      events: this.state.percentile90Out.toArray()\r\n    });\r\n\r\n    // Timerange for the chart axis\r\n    // const initialBeginTime = new Date(2015, 0, 1);\r\n    const initialBeginTime = new Date(); // Current Date\r\n\r\n    const timeWindow = 3 * hours;\r\n\r\n    let beginTime;\r\n    const endTime = new Date(this.state.time.getTime() + minute);\r\n    if (endTime.getTime() - timeWindow < initialBeginTime.getTime()) {\r\n      beginTime = initialBeginTime;\r\n    } else {\r\n      beginTime = new Date(endTime.getTime() - timeWindow);\r\n    }\r\n    const timeRange = new TimeRange(beginTime, endTime);\r\n\r\n    // Charts (after a certain amount of time, just show hourly rollup)\r\n    const charts = (\r\n      <Charts>\r\n        <BarChart\r\n          axis=\"y\"\r\n          series={perc90Series}\r\n          style={fiveMinuteStyle}\r\n          columns={[\"value\"]}\r\n        />\r\n        <BarChart\r\n          axis=\"y\"\r\n          series={perc50Series}\r\n          style={fiveMinuteStyle}\r\n          columns={[\"value\"]}\r\n        />\r\n        <ScatterChart axis=\"y\" series={eventSeries} style={scatterStyle} />\r\n      </Charts>\r\n    );\r\n\r\n    const dateStyle = {\r\n      fontSize: 12,\r\n      color: \"#AAA\",\r\n      borderWidth: 1,\r\n      borderColor: \"#F4F4F4\"\r\n    };\r\n\r\n    const style = styler([\r\n      { key: \"perc50\", color: \"#C5DCB7\", width: 1, dashed: true },\r\n      { key: \"perc90\", color: \"#DFECD7\", width: 2 }\r\n    ]);\r\n\r\n    return (\r\n      <div id='chart'>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            <Legend\r\n              type=\"swatch\"\r\n              style={style}\r\n              categories={[\r\n                {\r\n                  key: \"perc50\",\r\n                  label: \"Regular dB Levels\",\r\n                  style: { fill: \"#C5DCB7\" }\r\n                },\r\n                {\r\n                  key: \"perc90\",\r\n                  label: \"Highest dB Levels\",\r\n                  style: { fill: \"#DFECD7\" }\r\n                }\r\n              ]}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-8\">\r\n            <span style={dateStyle}>{latestTime}</span>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n\r\n              <ChartContainer title=\"Active Noise Level\" timeRange={timeRange} width=\"1200\">\r\n                <ChartRow height=\"250\">\r\n                  <YAxis\r\n                    id=\"y\"\r\n                    label=\"dB Levels\"\r\n                    min={0}\r\n                    max={150} // This changes the y value of graph in terms of dB levels should be 0-200\r\n                    width=\"100\"\r\n                    type=\"linear\"\r\n                  />\r\n                  {charts}\r\n                </ChartRow>\r\n              </ChartContainer>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Realtime;","import React from 'react';\r\nimport { TimeSeries } from \"pondjs\";\r\nimport {\r\n  Charts,\r\n  ChartContainer,\r\n  ChartRow,\r\n  YAxis,\r\n  LineChart\r\n} from \"react-timeseries-charts\";\r\n\r\n\r\n// Data\r\nconst data = require(\"../usd_vs_euro.json\");\r\nconst points = data.widget[0].data.reverse();\r\nconst series1 = new TimeSeries({\r\n  name: \"USD_vs_EURO\",\r\n  columns: [\"time\", \"value\"],\r\n  points\r\n});\r\n\r\nconst series2 = new TimeSeries({\r\n  name: \"USD_vs_EURO\",\r\n  columns: [\"time\", \"value\"],\r\n  points\r\n});\r\n\r\nclass Baselines extends React.Component {\r\n  state = {\r\n    tracker: null,\r\n    timerange: series1.range()\r\n  };\r\n\r\n  handleTrackerChanged = tracker => {\r\n    this.setState({ tracker });\r\n  };\r\n\r\n  handleTimeRangeChange = timerange => {\r\n    this.setState({ timerange });\r\n  };\r\n\r\n  render() {\r\n      return (\r\n          //<Resizable>\r\n        /*\r\n        <ChartContainer\r\n            title=\"Euro price (USD)\"\r\n            titleStyle={{ fill: \"#555\", fontWeight: 500 }}\r\n            timeRange={series.range()}\r\n            format=\"%b '%y\"\r\n            timeAxisTickCount={5}\r\n            width={3440}\r\n        >\r\n        <ChartRow height=\"800\">\r\n        <YAxis\r\n            id=\"price\"\r\n            label=\"Price ($)\"\r\n            min={series.min()}\r\n            max={series.max()}\r\n            width=\"60\"\r\n            format=\"$,.2f\"\r\n        />\r\n        <Charts>\r\n              <LineChart axis=\"price\" series={series} style={style} />\r\n              <Baseline\r\n                axis=\"price\"\r\n                style={baselineStyleLite}\r\n                value={series.max()}\r\n                label=\"Max\"\r\n                position=\"right\"\r\n              />\r\n              <Baseline\r\n                axis=\"price\"\r\n                style={baselineStyleLite}\r\n                value={series.min()}\r\n                label=\"Min\"\r\n                position=\"right\"\r\n              />\r\n              <Baseline\r\n                axis=\"price\"\r\n                style={baselineStyleExtraLite}\r\n                value={series.avg() - series.stdev()}\r\n              />\r\n              <Baseline\r\n                axis=\"price\"\r\n                style={baselineStyleExtraLite}\r\n                value={series.avg() + series.stdev()}\r\n              />\r\n              <Baseline\r\n                axis=\"price\"\r\n                style={baselineStyle}\r\n                value={series.avg()}\r\n                label=\"Avg\"\r\n                position=\"right\"\r\n              />\r\n            </Charts>\r\n          </ChartRow>\r\n        </ChartContainer>\r\n*/\r\n      //</Resizable>\r\n      // <Resizable>\r\n          <ChartContainer title=\"Average Hospital Noise Level Overall\" format=\"%b '%y\" timeRange={series1.timerange()} width={1200}>\r\n         <ChartRow height=\"200\">\r\n           <YAxis id=\"axis1\" label=\"dB Level\" min={0} max={100} width=\"60\" type=\"linear\" />\r\n           <Charts>\r\n             <LineChart axis=\"axis1\" series={series1} />\r\n             <LineChart axis=\"axis2\" series={series2} />\r\n           </Charts>\r\n             <YAxis id=\"axis2\" label=\"dB Level\" min={0} max={100} width=\"80\" type=\"linear\" />\r\n         </ChartRow>\r\n      </ChartContainer>\r\n      // </Resizable>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Baselines;","import React from 'react'\r\nimport Chart from \"chart.js\";\r\nvar Component = React.Component;\r\n\r\n\r\nexport default class FrankLineGraph extends Component {\r\n    chartRef = React.createRef();\r\n\r\n    componentDidMount() {\r\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n\t\t\t\tvar jsonfile = require('../test_data.json');\r\n\t\t\t\tvar dict = new Object();\r\n\t\t\t\tvar labels = jsonfile.map(function(e) {\r\n\t\t\t\t\tdict[e.time_obs] = e.db_reading;\r\n\t\t\t\t\tif(dict[e.time_obs] < e.db_reading)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdict[e.time_obs] = e.db_reading;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar dateObj = new Date(e.time_obs * 1000);\r\n\t\t\t\t\tvar hours = dateObj.getUTCHours();\r\n\t\t\t\t\t// Get minutes part from the timestamp\r\n\t\t\t\t\tvar minutes = dateObj.getUTCMinutes();\r\n\r\n\t\t\t\t\t// Get seconds part from the timestamp\r\n\t\t\t\t\tvar seconds = dateObj.getUTCSeconds();\r\n\t\t\t\t\tvar formattedTime = hours.toString().padStart(2, '0') + ':' +\r\n                minutes.toString().padStart(2, '0') + ':' +\r\n                seconds.toString().padStart(2, '0');\r\n\t\t\t\t  return formattedTime\r\n\t\t\t\t});\r\n\t\t\t\tvar data = jsonfile.map(function(e) {\r\n\t\t\t\t   return dict[e.time_obs]\r\n\t\t\t\t});;\r\n        new Chart(myChartRef, {\r\n            type: \"line\",\r\n            data: {\r\n                //Bring in data\r\n                labels: labels,\r\n                datasets: [\r\n                    {\r\n                        label: \"DB Levels\",\r\n                        data: data,\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n                //Customize chart options\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <canvas\r\n                    id=\"myChart\"\r\n                    ref={this.chartRef}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport Realtime from '../components/Realtime';\r\nimport Baselines from '../components/Baselines';\r\nimport FrankLineGraph from '../components/FranksChart'\r\n\r\nconst Home = () => {\r\n    return (\r\n      <div>\r\n        <h1>Noise Manager WebApp</h1>\r\n        <p>Real time data of each section/device</p>\r\n        \r\n        <FrankLineGraph />\r\n        <br/>\r\n        <Realtime />\r\n        <Baselines />\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\n\r\nclass ReportTable extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          data: [\r\n            {\r\n                \"time_obs\": 1586030214,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 43\r\n            },\r\n            {\r\n                \"time_obs\": 1586030214,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 67\r\n            },\r\n            {\r\n                \"time_obs\": 1586030215,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 33\r\n            },\r\n            {\r\n                \"time_obs\": 1586030215,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 63\r\n            },\r\n            {\r\n                \"time_obs\": 1586030219,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 64\r\n            },\r\n            {\r\n                \"time_obs\": 1586030219,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 61\r\n            },\r\n            {\r\n                \"time_obs\": 1586030219,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 53\r\n            },\r\n            {\r\n                \"time_obs\": 1586030219,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 58\r\n            },\r\n            {\r\n                \"time_obs\": 1586030219,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 62\r\n            },\r\n            {\r\n                \"time_obs\": 1586030219,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 53\r\n            },\r\n            {\r\n                \"time_obs\": 1586030219,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 46\r\n            },\r\n            {\r\n                \"time_obs\": 1586030219,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 50\r\n            },\r\n            {\r\n                \"time_obs\": 1586030221,\r\n                \"user_id\": \"Debug\",\r\n                \"db_reading\": 45\r\n            }\r\n        ]\r\n        \r\n\r\n        };\r\n\r\n\r\n    }\r\n\r\n\r\n    getTime( obs_time ) {\r\n\r\n        let date = new Date(0);\r\n        var myDate = new Date( obs_time *100);\r\n        return myDate;\r\n        // while( count < data_array.length ) {\r\n\r\n        //     let db_level = data_array[count].db_reading;\r\n        //     let timeobs = data_array[count].time_obs;\r\n        //     let date = new Date(0);\r\n\r\n\r\n        //     // Date from the api data\r\n        //     var myDate = new Date( timeobs *100);\r\n\r\n        //     console.log('myDate', myDate);\r\n        //     console.log('COUNT', count);\r\n        //     console.log('Date()', t);\r\n\r\n        //     count++;\r\n\r\n        //     return new TimeEvent( myDate, db_level);\r\n        // }\r\n        \r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n\r\n\r\n                <h3>Daily Summary Table</h3>\r\n\r\n                <table>\r\n\r\n                    <thead id='table-header'>\r\n                        <tr>\r\n                            <th>ID Number</th>\r\n                            <th>Avg dB</th>\r\n                            <th>Peak dB</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tr>\r\n                        <th>1</th>\r\n                        <th>55 dB</th>\r\n                        <th>{this.state.data[0].db_reading} dB</th>\r\n                        {/* {this.state.data.map( item => \r\n                            <th> { item.db_reading } </th>\r\n                            )} */}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th>2</th>\r\n                        <th>52 dB</th>\r\n                        <th>72 dB</th>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th>3</th>\r\n                        <th>68 dB</th>\r\n                        <th>87 dB</th>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th>4</th>\r\n                        <th>70 dB</th>\r\n                        <th>73 dB</th>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th>5</th>\r\n                        <th>60 dB</th>\r\n                        <th>69 dB</th>\r\n                    </tr>\r\n\r\n\r\n                </table>\r\n\r\n\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n  \r\n  export default ReportTable;","/**\r\n *  Copyright (c) 2016, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport _ from \"underscore\";\r\nimport colorbrewer from \"colorbrewer\";\r\n\r\n/**\r\n * For our Style we want to represent two things:\r\n *\r\n *   1. The overall style of an AreaChart should be consistent across a site\r\n *   2. The specific style of a columnName (e.g. \"pressure\") should be consistent\r\n *\r\n * The overall style is implemented with methods specific to\r\n * each chart type or entity:\r\n *\r\n *   - lineChartStyle()\r\n *   - areaChartStyle()\r\n *   - legendStyle()\r\n *   - etc\r\n *\r\n * These will render out an object that can be passed into the\r\n * charts themselves and will control the visual appearance,\r\n * keyed by columnName. This abstracts away the SVG details of the\r\n * underlying DOM elements.\r\n *\r\n * For the specific style we define here three out of the box parameters\r\n * by which one column can be different from another when rendered:\r\n *   - color\r\n *   - width (of a line)\r\n *   - dashed or not\r\n *\r\n */\r\nexport class Styler {\r\n    /**\r\n     * The columns define the style associated with a particular\r\n     * quantity, such as \"inTraffic\" or \"temperature\". The columns\r\n     * are an array, with each element being either a string, or\r\n     * and object defining the style.\r\n     *\r\n     *  * Using a string makes the assumption that you want to use a\r\n     * color scheme, so you need to define that if you don't want the\r\n     * default. A color will be then assigned to each column based\r\n     * on the scheme. The string is the column name.\r\n     *\r\n     *  * In the second case of providing an object, you define properties\r\n     * of the style yourself. Each object should contain a \"key\" property\r\n     * which is the column name and optionally the `width` and `dashed`\r\n     * property. If you don't supply the color, then the color\r\n     * will come from the scheme.\r\n     *\r\n     */\r\n    constructor(columns, scheme = \"Paired\") {\r\n        this.columnStyles = {};\r\n        if (_.isArray(columns)) {\r\n            columns.forEach(column => {\r\n                if (_.isString(column)) {\r\n                    this.columnStyles[column] = { key: column };\r\n                } else if (_.isObject(column)) {\r\n                    const { key, ...style } = column;\r\n                    this.columnStyles[key] = style;\r\n                }\r\n            });\r\n        }\r\n        this.columnNames = _.map(columns, c => {\r\n            const cc = _.isString(c) ? c : c.key;\r\n            return cc;\r\n        });\r\n\r\n        if (scheme && !_.has(colorbrewer, scheme)) {\r\n            throw new Error(`Unknown scheme '${scheme}' supplied to Style constructor`);\r\n        }\r\n        this.colorScheme = scheme;\r\n    }\r\n\r\n    numColumns() {\r\n        return this.columnNames.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the color scheme with the appropiate number of colors.\r\n     * If there are more columns than the largest set in the scheme then\r\n     * just the largest scheme set will be returned.\r\n     * If there are less columns than the smallest set in the scheme then\r\n     * just the smallest scheme will be returned.\r\n     * @param  {number} columnCount The number of columns to apply the scheme to\r\n     * @return {array}              An array with the scheme colors in it.\r\n     */\r\n    colorLookup(columnCount) {\r\n        const colorSchemeKeys = _.keys(colorbrewer[this.colorScheme]);\r\n        const minSchemeSize = _.min(colorSchemeKeys);\r\n        const maxSchemeSize = _.max(colorSchemeKeys);\r\n        let colorLookupSize = columnCount > maxSchemeSize ? maxSchemeSize : columnCount;\r\n        colorLookupSize = _.max([colorLookupSize, minSchemeSize]);\r\n        return this.colorScheme ? colorbrewer[this.colorScheme][colorLookupSize] : [];\r\n    }\r\n\r\n    /**\r\n     */\r\n    legendStyle(column, type) {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const i = _.indexOf(this.columnNames, column);\r\n        const columnName = this.columnNames[i];\r\n        const { color, width = 1, dashed = false } = this.columnStyles[columnName];\r\n        const c = color || colorLookup[i % colorLookup.length];\r\n\r\n        let styleSymbol = {};\r\n        if (type === \"swatch\" || type === \"dot\") {\r\n            styleSymbol = {\r\n                fill: c,\r\n                opacity: 0.9,\r\n                stroke: c,\r\n                cursor: \"pointer\"\r\n            };\r\n        } else if (type === \"line\") {\r\n            styleSymbol = {\r\n                opacity: 0.9,\r\n                stroke: c,\r\n                strokeWidth: width,\r\n                cursor: \"pointer\"\r\n            };\r\n            if (dashed) {\r\n                styleSymbol.strokeDasharray = \"4,2\";\r\n            }\r\n        }\r\n\r\n        const labelStyle = {\r\n            fontSize: \"normal\",\r\n            color: \"#333\",\r\n            paddingRight: 10,\r\n            cursor: \"pointer\"\r\n        };\r\n        const valueStyle = {\r\n            fontSize: \"smaller\",\r\n            color: \"#999\",\r\n            cursor: \"pointer\"\r\n        };\r\n        const legendStyle = {\r\n            symbol: {\r\n                normal: { ...styleSymbol, opacity: 0.7 },\r\n                highlighted: { ...styleSymbol, opacity: 0.8 },\r\n                selected: { ...styleSymbol, opacity: 0.8 },\r\n                muted: { ...styleSymbol, opacity: 0.2 }\r\n            },\r\n            label: {\r\n                normal: { ...labelStyle, opacity: 0.7 },\r\n                highlighted: { ...labelStyle, opacity: 0.8 },\r\n                selected: { ...labelStyle, opacity: 0.8 },\r\n                muted: { ...labelStyle, opacity: 0.5 }\r\n            },\r\n            value: {\r\n                normal: { ...valueStyle, opacity: 0.7 },\r\n                highlighted: { ...valueStyle, opacity: 0.8 },\r\n                selected: { ...valueStyle, opacity: 0.8 },\r\n                muted: { ...valueStyle, opacity: 0.5 }\r\n            }\r\n        };\r\n        return legendStyle;\r\n    }\r\n\r\n    areaChartStyle() {\r\n        const style = {};\r\n\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n\r\n        let i = 0;\r\n        _.forEach(this.columnStyles, ({ color, selected, width = 1, dashed = false }, column) => {\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const styleLine = {\r\n                stroke: c,\r\n                fill: \"none\",\r\n                strokeWidth: width\r\n            };\r\n            const styleSelectedLine = {\r\n                stroke: selected || color,\r\n                fill: \"none\",\r\n                strokeWidth: width\r\n            };\r\n            if (dashed) {\r\n                styleLine.strokeDasharray = \"4,2\";\r\n            }\r\n            const styleArea = {\r\n                fill: c,\r\n                stroke: \"none\"\r\n            };\r\n            const styleSelectedArea = {\r\n                fill: selected || color,\r\n                stroke: \"none\"\r\n            };\r\n            style[column] = {\r\n                line: {\r\n                    normal: { ...styleLine, opacity: 0.9 },\r\n                    highlighted: { ...styleLine, opacity: 1.0 },\r\n                    selected: { ...styleSelectedLine, opacity: 1.0 },\r\n                    muted: { ...styleLine, opacity: 0.4 }\r\n                },\r\n                area: {\r\n                    normal: { ...styleArea, opacity: 0.7 },\r\n                    highlighted: { ...styleArea, opacity: 0.8 },\r\n                    selected: { ...styleSelectedArea, opacity: 0.8 },\r\n                    muted: { ...styleArea, opacity: 0.2 }\r\n                }\r\n            };\r\n            i += 1;\r\n        });\r\n        return style;\r\n    }\r\n\r\n    lineChartStyle() {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const style = {};\r\n        _.forEach(this.columnStyles, ({ color, selected, width = 1, dashed = false }, column) => {\r\n            const i = _.indexOf(this.columnNames, column);\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const styleLine = {\r\n                stroke: c,\r\n                strokeWidth: width,\r\n                fill: \"none\"\r\n            };\r\n            const styleSelectedLine = {\r\n                stroke: selected || c,\r\n                strokeWidth: width,\r\n                fill: \"none\"\r\n            };\r\n\r\n            if (dashed) {\r\n                styleLine.strokeDasharray = \"4,2\";\r\n            }\r\n            style[column] = {\r\n                normal: { ...styleLine, opacity: 0.8, strokeWidth: width },\r\n                highlighted: { ...styleLine, opacity: 1.0, strokeWidth: width },\r\n                selected: { ...styleSelectedLine, opacity: 1.0, strokeWidth: width },\r\n                muted: { ...styleLine, opacity: 0.2, strokeWidth: width }\r\n            };\r\n        });\r\n        return style;\r\n    }\r\n\r\n    barChartStyle() {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const style = {};\r\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\r\n            const i = _.indexOf(this.columnNames, column);\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const fillStyle = {\r\n                fill: c\r\n            };\r\n            const selectedStyle = {\r\n                fill: selected || c\r\n            };\r\n            style[column] = {\r\n                normal: { ...fillStyle, opacity: 0.8 },\r\n                highlighted: { ...fillStyle, opacity: 1.0 },\r\n                selected: { ...selectedStyle, opacity: 1.0 },\r\n                muted: { ...fillStyle, opacity: 0.2 }\r\n            };\r\n        });\r\n        return style;\r\n    }\r\n\r\n    scatterChartStyle() {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const style = {};\r\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\r\n            const i = _.indexOf(this.columnNames, column);\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const fillStyle = {\r\n                fill: c\r\n            };\r\n            const selectedStyle = {\r\n                fill: selected || c\r\n            };\r\n            style[column] = {\r\n                normal: { ...fillStyle, opacity: 0.8 },\r\n                highlighted: { ...fillStyle, opacity: 1.0 },\r\n                selected: { ...selectedStyle, opacity: 1.0 },\r\n                muted: { ...fillStyle, opacity: 0.2 }\r\n            };\r\n        });\r\n        return style;\r\n    }\r\n\r\n    axisStyle(column) {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const i = _.indexOf(this.columnNames, column);\r\n        const columnName = this.columnNames[i];\r\n        const { color } = this.columnStyles[columnName];\r\n        const c = color || colorLookup[i % colorLookup.length];\r\n        return {\r\n            label: {\r\n                fill: c\r\n            }\r\n        };\r\n    }\r\n\r\n    boxChartStyle() {\r\n        const style = {};\r\n\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n\r\n        let i = 0;\r\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const styleArea = {\r\n                fill: c,\r\n                stroke: \"none\"\r\n            };\r\n            const styleSelectedArea = {\r\n                fill: selected || color,\r\n                stroke: \"none\"\r\n            };\r\n            style[column] = [\r\n                {\r\n                    normal: { ...styleArea, opacity: 0.2 },\r\n                    highlighted: { ...styleArea, opacity: 0.3 },\r\n                    selected: { ...styleSelectedArea, opacity: 0.3 },\r\n                    muted: { ...styleArea, opacity: 0.1 }\r\n                },\r\n                {\r\n                    normal: { ...styleArea, opacity: 0.5 },\r\n                    highlighted: { ...styleArea, opacity: 0.6 },\r\n                    selected: { ...styleSelectedArea, opacity: 0.6 },\r\n                    muted: { ...styleArea, opacity: 0.2 }\r\n                },\r\n                {\r\n                    normal: { ...styleArea, opacity: 0.9 },\r\n                    highlighted: { ...styleArea, opacity: 1.0 },\r\n                    selected: { ...styleSelectedArea, opacity: 1.0 },\r\n                    muted: { ...styleArea, opacity: 0.2 }\r\n                }\r\n            ];\r\n            i += 1;\r\n        });\r\n        return style;\r\n    }\r\n}\r\n\r\nexport default function styler(columns, scheme) {\r\n    return new Styler(columns, scheme);\r\n}","/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport _ from \"underscore\";\r\nimport merge from \"merge\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Styler } from \"../src/js/styler\";\r\n\r\nconst defaultStyle = {\r\n    symbol: {\r\n        normal: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 1 },\r\n        highlighted: { stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1 },\r\n        selected: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 2 },\r\n        muted: { stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1 }\r\n    },\r\n    label: {\r\n        normal: { fontSize: \"normal\", color: \"#333\" },\r\n        highlighted: { fontSize: \"normal\", color: \"#222\" },\r\n        selected: { fontSize: \"normal\", color: \"#333\" },\r\n        muted: { fontSize: \"normal\", color: \"#333\", opacity: 0.4 }\r\n    },\r\n    value: {\r\n        normal: { fontSize: \"normal\", color: \"#333\" },\r\n        highlighted: { fontSize: \"normal\", color: \"#222\" },\r\n        selected: { fontSize: \"normal\", color: \"#333\" },\r\n        muted: { fontSize: \"normal\", color: \"#333\", opacity: 0.4 }\r\n    }\r\n};\r\n\r\n/**\r\n * Legends are simple to define.\r\n *\r\n * First specify the styles you want each item to have. This is either\r\n * the CSS that should be appied to rendered symbol. Or you can provide\r\n * a Styler object. See below for full styling details.\r\n *\r\n * ```\r\n * const style = Styler([\r\n *     {key: \"aud\", color: \"steelblue\", width: 1, dashed: true},\r\n *     {key: \"euro\", color: \"#F68B24\", width: 2}\r\n * ]);\r\n * ```\r\n *\r\n * Next build a list of categories you want in the legend.\r\n *\r\n * ```\r\n * const categories = [\r\n *     {key: \"aust\", label: \"AUD\", value: \"1.52\", disabled: true},\r\n *     {key: \"usa\", label: \"USD\", value: \"1.43\", disabled: false}\r\n * ];\r\n * ```\r\n * For each category to display you must provide a key, a label and\r\n * if it should be displayed disabled or not.\r\n *\r\n * Then render the legend, with type either \"line\", \"swatch\" or \"dot\":\r\n *\r\n * ```\r\n * <Legend type=\"line\" style={style} categories={categories} />\r\n * ```\r\n *\r\n * Optionally you can also display a value below the label. This is\r\n * useful when hovering over another chart on the page, or to display\r\n * the current value of live data. You can see this defined in the\r\n * above categories.\r\n *\r\n * The legend can also be supplied with callback functions which will\r\n * tell you if the user has clicked or hovered over on one of the legend\r\n * items. You can use this to sync highlighting and selection to a\r\n * chart.\r\n *\r\n * ## Styling\r\n *\r\n * There are three methods of styling a legend:\r\n *  - using a Styler object\r\n *  - using an object containing inline styles\r\n *  - using a function which returns an inline style\r\n *\r\n * A Styler object can be supplied directly to the `style` prop\r\n * of the legend. This is the simplest approach, since you can\r\n * usually just use the same Styler as you use for your chart.\r\n *\r\n * Supplying an object to the `style` prop gives you more control\r\n * than the Styler, since you can provide the actual CSS properties\r\n * for each element of the legend. The format for the object is:\r\n *\r\n * ```\r\n * {\r\n *     columnName1: {\r\n      symbol: {\r\n        normal: {...styleSymbol},\r\n        highlighted: {...styleSymbol},\r\n        selected: {...styleSymbol},\r\n        muted: {...styleSymbol}\r\n      },\r\n      label: {\r\n        normal: {...labelStyle},\r\n        highlighted: {...labelStyle},\r\n        selected: {...labelStyle},\r\n        muted: {...labelStyle}\r\n      },\r\n      value: {\r\n        normal: {...valueStyle},\r\n        highlighted: {...valueStyle},\r\n        selected: {...valueStyle},\r\n        muted: {...valueStyle}\r\n      }\r\n *     },\r\n *     columnName2 : {\r\n *         ...\r\n *     },\r\n *     ...\r\n *  }\r\n *\r\n *  - symbolStyle is the CSS properties for the symbol, which\r\n * is either a swatch, dot or line. For a line, you'd want to\r\n * provide the SVG <line> properties, for a swatch you'd provide\r\n * the SVG <rect> properties and for a dot the <ellipse> properties.\r\n *  - labelStyle is the main label for the legend item. It is a\r\n *  SVG <text> element, so you can control the font properties.\r\n *  - valueStyle is the optional value. As with the labelStyle you\r\n *  this is an SVG <text> element.\r\n *\r\n * Finally, you can provide a function to the `style` prop. This\r\n * is similar to providing an object, except your function will\r\n * be called with the columnName and you should return the map\r\n * containing symbol, label and value styles.\r\n */\r\n\r\nclass LegendItem extends React.Component {\r\n    handleClick(e, key) {\r\n        e.stopPropagation();\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange(key);\r\n        }\r\n    }\r\n\r\n    handleHover(e, key) {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(key);\r\n        }\r\n    }\r\n\r\n    handleHoverLeave() {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(null);\r\n        }\r\n    }\r\n\r\n    renderLine(style) {\r\n        const { symbolWidth, symbolHeight } = this.props;\r\n        return (\r\n            <svg style={{ float: \"left\" }} width={symbolWidth} height={symbolHeight}>\r\n                <line\r\n                    style={style}\r\n                    x1={0}\r\n                    y1={parseInt(symbolWidth / 2, 10)}\r\n                    x2={symbolWidth}\r\n                    y2={parseInt(symbolWidth / 2, 10)}\r\n                    stroke=\"black\"\r\n                    strokeWidth=\"2\"\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    renderSwatch(style) {\r\n        const { symbolWidth, symbolHeight } = this.props;\r\n        return (\r\n            <svg style={{ float: \"left\" }} width={symbolWidth} height={symbolHeight}>\r\n                <rect\r\n                    style={style}\r\n                    x={2}\r\n                    y={2}\r\n                    width={symbolWidth - 4}\r\n                    height={symbolHeight - 4}\r\n                    rx={2}\r\n                    ry={2}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    renderDot(style) {\r\n        const { symbolWidth, symbolHeight } = this.props;\r\n        const w = parseInt(symbolWidth / 2, 10);\r\n        const h = parseInt(symbolHeight / 2, 10);\r\n        const radius = w * 0.75;\r\n\r\n        return (\r\n            <svg style={{ float: \"left\" }} width={symbolWidth} height={symbolHeight}>\r\n                <circle style={style} cx={w} cy={h} r={radius} />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { symbolStyle, labelStyle, valueStyle, itemKey, symbolType } = this.props;\r\n\r\n        let symbol;\r\n        switch (symbolType) {\r\n            case \"swatch\":\r\n                symbol = this.renderSwatch(symbolStyle);\r\n                break;\r\n            case \"line\":\r\n                symbol = this.renderLine(symbolStyle);\r\n                break;\r\n            case \"dot\":\r\n                symbol = this.renderDot(symbolStyle);\r\n                break;\r\n            default:\r\n            //pass\r\n        }\r\n\r\n        // TODO: We shouldn't be adding interactions to a element like this.\r\n        //       The alternative it to put it on a <a> or something?\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\"\r\n                }}\r\n                key={itemKey}\r\n                onClick={e => this.handleClick(e, itemKey)}\r\n                onMouseMove={e => this.handleHover(e, itemKey)}\r\n                onMouseLeave={() => this.handleHoverLeave()}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"row\",\r\n                        alignItems: \"center\"\r\n                    }}\r\n                >\r\n                    <div style={{ width: \"20px\" }}>{symbol}</div>\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}\r\n                    >\r\n                        <div style={labelStyle}>{this.props.label}</div>\r\n                        <div style={valueStyle}>{this.props.value}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default class Legend extends React.Component {\r\n    handleClick(e, key) {\r\n        e.stopPropagation();\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange(key);\r\n        }\r\n    }\r\n\r\n    handleHover(e, key) {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(key);\r\n        }\r\n    }\r\n\r\n    handleHoverLeave() {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For each category item we get the users stle preference. This\r\n     * can be supplied in a number of ways:\r\n     *  * Typically you would get the legend stle from a Style instance\r\n     *  * Alternatively, you can pass in a style object which has your\r\n     *    category in it and the associated style\r\n     *  * Finally, the provided style can also be a function\r\n     */\r\n    providedStyle(category, type) {\r\n        let style = {};\r\n        if (this.props.style) {\r\n            if (this.props.style instanceof Styler) {\r\n                style = this.props.style.legendStyle(category.key, type);\r\n            } else if (_.isFunction(this.props.style)) {\r\n                style = this.props.style(category.key);\r\n            } else if (_.isObject(this.props.style)) {\r\n                style = this.props.style ? this.props.style[category.key] : defaultStyle;\r\n            }\r\n        }\r\n        return style;\r\n    }\r\n\r\n    /**\r\n     * For each category this function takes the current\r\n     * selected and highlighted item, along with the disabled\r\n     * state of the item, and returns the mode it should be\r\n     * rendered in: normal, selected, highlighted, or muted\r\n     */\r\n    styleMode(category) {\r\n        const isHighlighted = this.props.highlight && category.key === this.props.highlight;\r\n        const isSelected = this.props.selection && category.key === this.props.selection;\r\n        const isDisabled = category.disabled;\r\n\r\n        let mode = \"normal\";\r\n        if (this.props.selection) {\r\n            if (isSelected) {\r\n                mode = \"selected\";\r\n            } else if (isHighlighted) {\r\n                mode = \"highlighted\";\r\n            } else {\r\n                mode = \"muted\";\r\n            }\r\n        } else if (isHighlighted) {\r\n            mode = \"highlighted\";\r\n        } else if (isDisabled) {\r\n            mode = \"muted\";\r\n        }\r\n        return mode;\r\n    }\r\n\r\n    symbolStyle(category, type) {\r\n        const styleMap = this.providedStyle(category, type);\r\n        const styleMode = this.styleMode(category);\r\n        return merge(\r\n            true,\r\n            defaultStyle[styleMode],\r\n            styleMap.symbol ? styleMap.symbol[styleMode] : {}\r\n        );\r\n    }\r\n\r\n    labelStyle(category) {\r\n        const styleMap = this.providedStyle(category);\r\n        const styleMode = this.styleMode(category);\r\n        return merge(\r\n            true,\r\n            defaultStyle[styleMode],\r\n            styleMap.label ? styleMap.label[styleMode] : {}\r\n        );\r\n    }\r\n\r\n    valueStyle(category) {\r\n        const styleMap = this.providedStyle(category);\r\n        const styleMode = this.styleMode(category);\r\n        return merge(\r\n            true,\r\n            defaultStyle[styleMode],\r\n            styleMap.value ? styleMap.value[styleMode] : {}\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { type = \"swatch\", symbolWidth, symbolHeight } = this.props;\r\n        const items = this.props.categories.map(category => {\r\n            const { key, label, value, symbolType = type } = category;\r\n            const symbolStyle = this.symbolStyle(category, symbolType);\r\n            const labelStyle = this.labelStyle(category);\r\n            const valueStyle = this.valueStyle(category);\r\n            return (\r\n                <LegendItem\r\n                    key={key}\r\n                    type={type}\r\n                    itemKey={key}\r\n                    label={label}\r\n                    value={value}\r\n                    symbolType={symbolType}\r\n                    symbolWidth={symbolWidth}\r\n                    symbolHeight={symbolHeight}\r\n                    symbolStyle={symbolStyle}\r\n                    labelStyle={labelStyle}\r\n                    valueStyle={valueStyle}\r\n                    onSelectionChange={this.props.onSelectionChange}\r\n                    onHighlightChange={this.props.onHighlightChange}\r\n                />\r\n            );\r\n        });\r\n\r\n        const align = this.props.align === \"left\" ? \"flex-start\" : \"flex-end\";\r\n\r\n        if (this.props.stack) {\r\n            return (\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: align,\r\n                        flexDirection: \"column\",\r\n                        marginBottom: this.props.marginBottom\r\n                    }}\r\n                >\r\n                    {items}\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: align,\r\n                        flexWrap: \"wrap\",\r\n                        marginBottom: this.props.marginBottom\r\n                    }}\r\n                >\r\n                    {items}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nLegend.propTypes = {\r\n    /**\r\n     * The overall style of the legend items, either a color \"swatch\", a\r\n     * colored \"line\", or a \"dot\".\r\n     */\r\n    type: PropTypes.oneOf([\"swatch\", \"line\", \"dot\"]),\r\n\r\n    /**\r\n     * Alignment of the legend within the available space. Either left or right.\r\n     */\r\n    align: PropTypes.oneOf([\"left\", \"right\"]),\r\n\r\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.instanceOf(Styler)]),\r\n\r\n    /**\r\n     * The categories array specifies details and style for each item in the legend. For each item:\r\n     *  * \"key\" - (required) the name by which the legend will be known\r\n     *  * \"label\" - (required) the displayed label\r\n     *  * \"style\" - the swatch, dot, or line style. Typically you'd just\r\n     *              specify {backgroundColor: \"#1f77b4\"}\r\n     *  * \"labelStyle\" - the label style\r\n     *  * \"disabled\" - a disabled state\r\n     *\r\n     * ```\r\n     * const categories = [\r\n     *    {key: \"aust\", label: \"AUD\", disabled: this.state.disabled[\"aust\"],\r\n     *      style: {backgroundColor: \"#1f77b4\"}},\r\n     *    {key: \"usa\", label: \"USD\", disabled: this.state.disabled[\"usa\"],\r\n     *      style: {backgroundColor: \"#aec7e8\"}}\r\n     * ];\r\n     * ```\r\n     */\r\n    categories: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            key: PropTypes.string.isRequired, // eslint-disable-line\r\n            label: PropTypes.string.isRequired, // eslint-disable-line\r\n            disabled: PropTypes.bool, // eslint-disable-line\r\n            style: PropTypes.object, // eslint-disable-line\r\n            labelStyle: PropTypes.object // eslint-disable-line\r\n        })\r\n    ).isRequired,\r\n\r\n    /**\r\n     * The width of the legend symbol\r\n     */\r\n    symbolWidth: PropTypes.number,\r\n\r\n    /**\r\n     * The height of the legend symbol\r\n     */\r\n    symbolHeight: PropTypes.number,\r\n\r\n    /**\r\n     * Which item, specified by its key, should be rendered as highlighted\r\n     */\r\n    highlight: PropTypes.string,\r\n\r\n    /**\r\n     * Which item, specified by its key, should be rendered as selected\r\n     */\r\n    selection: PropTypes.string,\r\n\r\n    /**\r\n     * Callback will be called with a legend item is selected (i.e. it is clicked\r\n     * on by the user)\r\n     */\r\n    onSelectionChange: PropTypes.func,\r\n\r\n    /**\r\n     * Callback will be called with a legend item is highlighted (i.e. it is hovered\r\n     * over by the user)\r\n     */\r\n    onHighlightChange: PropTypes.func,\r\n\r\n    /**\r\n     * Defines whether to stack legend items vertically or not\r\n     */\r\n    stack: PropTypes.bool,\r\n\r\n    /**\r\n     * The margin at the bottom. Default value is 20px\r\n     */\r\n    marginBottom: PropTypes.string\r\n};\r\n\r\nLegend.defaultProps = {\r\n    style: {},\r\n    labelStyle: {},\r\n    type: \"swatch\", // or \"line\" or \"dot\"\r\n    align: \"left\",\r\n    symbolWidth: 16,\r\n    symbolHeight: 16,\r\n    stack: false,\r\n    marginBottom: \"20px\"\r\n};","/**\r\n *  Copyright (c) 2016, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nexport function scaleAsString(scale) {\r\n    return `${scale.domain()}-${scale.range()}`;\r\n}\r\n\r\n// http://stackoverflow.com/a/28857255\r\nexport function getElementOffset(element) {\r\n    const de = document.documentElement;\r\n    const box = element.getBoundingClientRect();\r\n    const top = box.top + window.pageYOffset - de.clientTop;\r\n    const left = box.left + window.pageXOffset - de.clientLeft;\r\n    return { top, left };\r\n}","/**\r\n *  Copyright (c) 2017, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport {\r\n    curveBasisClosed,\r\n    curveBasisOpen,\r\n    curveBasis,\r\n    curveBundle,\r\n    curveCardinalClosed,\r\n    curveCardinalOpen,\r\n    curveCardinal,\r\n    curveCatmullRomClosed,\r\n    curveCatmullRomOpen,\r\n    curveCatmullRom,\r\n    curveLinearClosed,\r\n    curveLinear,\r\n    curveMonotoneX,\r\n    curveMonotoneY,\r\n    curveNatural,\r\n    curveStep,\r\n    curveStepAfter,\r\n    curveStepBefore\r\n} from \"d3-shape\";\r\n\r\nexport default {\r\n    curveBasisClosed,\r\n    curveBasisOpen,\r\n    curveBasis,\r\n    curveBundle,\r\n    curveCardinalClosed,\r\n    curveCardinalOpen,\r\n    curveCardinal,\r\n    curveCatmullRomClosed,\r\n    curveCatmullRomOpen,\r\n    curveCatmullRom,\r\n    curveLinearClosed,\r\n    curveLinear,\r\n    curveMonotoneX,\r\n    curveMonotoneY,\r\n    curveNatural,\r\n    curveStep,\r\n    curveStepAfter,\r\n    curveStepBefore\r\n};","/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport _ from \"underscore\";\r\nimport { line } from \"d3-shape\";\r\nimport merge from \"merge\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TimeSeries } from \"pondjs\";\r\n\r\nimport { Styler } from \"../js/styler\";\r\nimport { scaleAsString } from \"../js/util\";\r\nimport curves from \"../js/curve\";\r\n\r\nconst defaultStyle = {\r\n    normal: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 1 },\r\n    highlighted: { stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1 },\r\n    selected: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 2 },\r\n    muted: { stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1 }\r\n};\r\n\r\n/**\r\n * The `<LineChart>` component is able to display multiple columns of a TimeSeries\r\n * as separate line charts.\r\n *\r\n * The `<LineChart>` should be used within `<ChartContainer>` etc., as this will\r\n * construct the horizontal and vertical axis, and manage other elements.\r\n *\r\n * Here is an example of two columns of a TimeSeries being plotted with the `<LineChart>`:\r\n *\r\n * ```\r\n  <ChartContainer timeRange={this.state.timerange} >\r\n    <ChartRow height=\"200\">\r\n      <YAxis id=\"y\" label=\"Price ($)\" min={0.5} max={1.5} format=\"$,.2f\" />\r\n      <Charts>\r\n        <LineChart\r\n          axis=\"y\"\r\n          breakLine={false}\r\n          series={currencySeries}\r\n          columns={[\"aud\", \"euro\"]}\r\n          style={style}\r\n          interpolation=\"curveBasis\" />\r\n      </Charts>\r\n    </ChartRow>\r\n  </ChartContainer>\r\n * ```\r\n */\r\nexport default class LineChart extends React.Component {\r\n    shouldComponentUpdate(nextProps) {\r\n        const newSeries = nextProps.series;\r\n        const oldSeries = this.props.series;\r\n\r\n        const width = nextProps.width;\r\n        const timeScale = nextProps.timeScale;\r\n        const yScale = nextProps.yScale;\r\n        const interpolation = nextProps.interpolation;\r\n        const highlight = nextProps.highlight;\r\n        const selection = nextProps.selection;\r\n        const columns = nextProps.columns;\r\n\r\n        // What changed?\r\n        const widthChanged = this.props.width !== width;\r\n        const timeScaleChanged = scaleAsString(this.props.timeScale) !== scaleAsString(timeScale);\r\n        const yAxisScaleChanged = this.props.yScale !== yScale;\r\n        const interpolationChanged = this.props.interpolation !== interpolation;\r\n        const highlightChanged = this.props.highlight !== highlight;\r\n        const selectionChanged = this.props.selection !== selection;\r\n        const columnsChanged = this.props.columns !== columns;\r\n\r\n        let seriesChanged = false;\r\n        if (oldSeries.size() !== newSeries.size()) {\r\n            seriesChanged = true;\r\n        } else {\r\n            seriesChanged = !TimeSeries.is(oldSeries, newSeries);\r\n        }\r\n\r\n        return (\r\n            widthChanged ||\r\n            seriesChanged ||\r\n            timeScaleChanged ||\r\n            yAxisScaleChanged ||\r\n            interpolationChanged ||\r\n            highlightChanged ||\r\n            selectionChanged ||\r\n            columnsChanged\r\n        );\r\n    }\r\n\r\n    handleHover(e, column) {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(column);\r\n        }\r\n    }\r\n\r\n    handleHoverLeave() {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(null);\r\n        }\r\n    }\r\n\r\n    handleClick(e, column) {\r\n        e.stopPropagation();\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange(column);\r\n        }\r\n    }\r\n\r\n    providedPathStyleMap(column) {\r\n        let style = {};\r\n        if (this.props.style) {\r\n            if (this.props.style instanceof Styler) {\r\n                style = this.props.style.lineChartStyle()[column];\r\n            } else if (_.isFunction(this.props.style)) {\r\n                style = this.props.style(column);\r\n            } else if (_.isObject(this.props.style)) {\r\n                style = this.props.style ? this.props.style[column] : defaultStyle;\r\n            }\r\n        }\r\n        return style;\r\n    }\r\n\r\n    /**\r\n     * Returns the style used for drawing the path\r\n     */\r\n    pathStyle(column) {\r\n        let style;\r\n\r\n        const styleMap = this.providedPathStyleMap(column);\r\n        const isHighlighted = this.props.highlight && column === this.props.highlight;\r\n        const isSelected = this.props.selection && column === this.props.selection;\r\n\r\n        if (this.props.selection) {\r\n            if (isSelected) {\r\n                style = merge(\r\n                    true,\r\n                    defaultStyle.selected,\r\n                    styleMap.selected ? styleMap.selected : {}\r\n                );\r\n            } else if (isHighlighted) {\r\n                style = merge(\r\n                    true,\r\n                    defaultStyle.highlighted,\r\n                    styleMap.highlighted ? styleMap.highlighted : {}\r\n                );\r\n            } else {\r\n                style = merge(true, defaultStyle.muted, styleMap.muted ? styleMap.muted : {});\r\n            }\r\n        } else if (isHighlighted) {\r\n            style = merge(\r\n                true,\r\n                defaultStyle.highlighted,\r\n                styleMap.highlighted ? styleMap.highlighted : {}\r\n            );\r\n        } else {\r\n            style = merge(true, defaultStyle.normal, styleMap.normal);\r\n        }\r\n\r\n        style.pointerEvents = \"none\";\r\n\r\n        return style;\r\n    }\r\n\r\n    renderPath(data, column, key) {\r\n        const hitStyle = {\r\n            stroke: \"white\",\r\n            fill: \"none\",\r\n            opacity: 0.0,\r\n            strokeWidth: 7,\r\n            cursor: \"crosshair\",\r\n            pointerEvents: \"stroke\"\r\n        };\r\n\r\n        // D3 generates each path\r\n        const path = line()\r\n            .curve(curves[this.props.interpolation])\r\n            .x(d => this.props.timeScale(d.x))\r\n            .y(d => this.props.yScale(d.y))(data);\r\n\r\n        return (\r\n            <g key={key}>\r\n                <path d={path} style={this.pathStyle(column)} />\r\n                <path\r\n                    d={path}\r\n                    style={hitStyle}\r\n                    onClick={e => this.handleClick(e, column)}\r\n                    onMouseLeave={() => this.handleHoverLeave()}\r\n                    onMouseMove={e => this.handleHover(e, column)}\r\n                />\r\n            </g>\r\n        );\r\n    }\r\n\r\n    renderLines() {\r\n        return _.map(this.props.columns, column => this.renderLine(column));\r\n    }\r\n\r\n    renderLine(column) {\r\n        const pathLines = [];\r\n        let count = 1;\r\n        if (this.props.breakLine) {\r\n            // Remove nulls and NaNs from the line by generating a break in the line\r\n            let currentPoints = null;\r\n            for (const d of this.props.series.events()) {\r\n                const timestamp = new Date(\r\n                    d.begin().getTime() + (d.end().getTime() - d.begin().getTime()) / 2\r\n                );\r\n                const value = d.get(column);\r\n                const badPoint = _.isNull(value) || _.isNaN(value) || !_.isFinite(value);\r\n                if (!badPoint) {\r\n                    if (!currentPoints) currentPoints = [];\r\n                    currentPoints.push({ x: timestamp, y: value });\r\n                } else if (currentPoints) {\r\n                    if (currentPoints.length > 1) {\r\n                        pathLines.push(this.renderPath(currentPoints, column, count));\r\n                        count += 1;\r\n                    }\r\n                    currentPoints = null;\r\n                }\r\n            }\r\n            if (currentPoints && currentPoints.length > 1) {\r\n                pathLines.push(this.renderPath(currentPoints, column, count));\r\n                count += 1;\r\n            }\r\n        } else {\r\n            // Ignore nulls and NaNs in the line\r\n            const cleanedPoints = [];\r\n            for (const d of this.props.series.events()) {\r\n                const timestamp = new Date(\r\n                    d.begin().getTime() + (d.end().getTime() - d.begin().getTime()) / 2\r\n                );\r\n                const value = d.get(column);\r\n                const badPoint = _.isNull(value) || _.isNaN(value) || !_.isFinite(value);\r\n                if (!badPoint) {\r\n                    cleanedPoints.push({ x: timestamp, y: value });\r\n                }\r\n            }\r\n\r\n            pathLines.push(this.renderPath(cleanedPoints, column, count));\r\n            count += 1;\r\n        }\r\n\r\n        return <g key={column}>{pathLines}</g>;\r\n    }\r\n\r\n    render() {\r\n        return <g>{this.renderLines()}</g>;\r\n    }\r\n}\r\n\r\nLineChart.propTypes = {\r\n    /**\r\n     * Show or hide this chart\r\n     */\r\n    visible: PropTypes.bool,\r\n\r\n    /**\r\n     * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize\r\n     */\r\n    series: PropTypes.instanceOf(TimeSeries).isRequired,\r\n\r\n    /**\r\n     * Reference to the axis which provides the vertical scale for drawing.\r\n     * e.g. specifying `axis=\"trafficRate\"` would refer the y-scale of the YAxis\r\n     * with id=\"trafficRate\".\r\n     */\r\n    axis: PropTypes.string.isRequired, // eslint-disable-line\r\n\r\n    /**\r\n     * Which columns from the series to draw.\r\n     * \r\n     * NOTE : Columns can't have periods because periods \r\n     * represent a path to deep data in the underlying events \r\n     * (i.e. reference into nested data structures)\r\n     */\r\n    columns: PropTypes.arrayOf(PropTypes.string),\r\n\r\n    /**\r\n     * The styles to apply to the underlying SVG lines. This is a mapping\r\n     * of column names to objects with style attributes, in the following\r\n     * format:\r\n     *\r\n     * ```\r\n     * const style = {\r\n     *     in: {\r\n     *         normal: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\r\n     *         highlighted: {stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1},\r\n     *         selected: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\r\n     *         muted: {stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1}\r\n     *     },\r\n     *     out: {\r\n     *         ...\r\n     *     }\r\n     * };\r\n     *\r\n     *  <LineChart style={style} ... />\r\n     * ```\r\n     *\r\n     * Alternatively, you can pass in a `Styler`. For example:\r\n     *\r\n     * ```\r\n     * const currencyStyle = Styler([\r\n     *     {key: \"aud\", color: \"steelblue\", width: 1, dashed: true},\r\n     *     {key: \"euro\", color: \"#F68B24\", width: 2}\r\n     * ]);\r\n     *\r\n     * <LineChart columns={[\"aud\", \"euro\"]} style={currencyStyle} ... />\r\n     *\r\n     * ```\r\n     */\r\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.instanceOf(Styler)]),\r\n\r\n    /**\r\n     * Any of D3's interpolation modes.\r\n     */\r\n    interpolation: PropTypes.oneOf([\r\n        \"curveBasis\",\r\n        \"curveBasisOpen\",\r\n        \"curveBundle\",\r\n        \"curveCardinal\",\r\n        \"curveCardinalOpen\",\r\n        \"curveCatmullRom\",\r\n        \"curveCatmullRomOpen\",\r\n        \"curveLinear\",\r\n        \"curveMonotoneX\",\r\n        \"curveMonotoneY\",\r\n        \"curveNatural\",\r\n        \"curveRadial\",\r\n        \"curveStep\",\r\n        \"curveStepAfter\",\r\n        \"curveStepBefore\"\r\n    ]),\r\n\r\n    /**\r\n     * The determines how to handle bad/missing values in the supplied\r\n     * TimeSeries. A missing value can be null or NaN. If breakLine\r\n     * is set to true (the default) then the line will be broken on either\r\n     * side of the bad value(s). If breakLine is false bad values\r\n     * are simply removed and the adjoining points are connected.\r\n     */\r\n    breakLine: PropTypes.bool,\r\n\r\n    /**\r\n     * The selected item, which will be rendered in the \"selected\" style.\r\n     * If a line is selected, all other lines will be rendered in the \"muted\" style.\r\n     *\r\n     * See also `onSelectionChange`\r\n     */\r\n    selection: PropTypes.string,\r\n\r\n    /**\r\n     * A callback that will be called when the selection changes. It will be called\r\n     * with the column corresponding to the line being clicked.\r\n     */\r\n    onSelectionChange: PropTypes.func,\r\n\r\n    /**\r\n     * The highlighted column, which will be rendered in the \"highlighted\" style.\r\n     *\r\n     * See also `onHighlightChange`\r\n     */\r\n    highlight: PropTypes.string,\r\n\r\n    /**\r\n     * A callback that will be called when the hovered over line changes.\r\n     * It will be called with the corresponding column.\r\n     */\r\n    onHighlightChange: PropTypes.func,\r\n\r\n    /**\r\n     * [Internal] The timeScale supplied by the surrounding ChartContainer\r\n     */\r\n    timeScale: PropTypes.func,\r\n\r\n    /**\r\n     * [Internal] The yScale supplied by the associated YAxis\r\n     */\r\n    yScale: PropTypes.func,\r\n\r\n    /**\r\n     * [Internal] The width supplied by the surrounding ChartContainer\r\n     */\r\n    width: PropTypes.number\r\n};\r\n\r\nLineChart.defaultProps = {\r\n    visible: true,\r\n    columns: [\"value\"],\r\n    smooth: true,\r\n    interpolation: \"curveLinear\",\r\n    breakLine: true\r\n};","import React from 'react';\r\nimport { TimeSeries } from \"pondjs\";\r\nimport _ from \"underscore\";\r\nimport {\r\n    Charts,\r\n    ChartContainer,\r\n    ChartRow,\r\n    YAxis,\r\n    Baseline,\r\n    Resizable\r\n  } from \"react-timeseries-charts\";\r\n  \r\n import styler from './../js/styler' \r\nimport Legend from './../Legend'\r\nimport LineChart from './LineChart'\r\n\r\n\r\n\r\nconst test_data = require('./../test_data.json');\r\n\r\n\r\nfunction buildPoints() {\r\n\r\n    let result = [];\r\n\r\n    for(let i = 0; i < test_data.length ; i++) {\r\n\r\n        var time = new Date( test_data[i].time_obs *100 );\r\n        result.push( [time,  test_data[i].db_reading, (test_data[i].db_reading -10) ] );\r\n\r\n    }\r\n\r\n    return result;\r\n\r\n\r\n}\r\n\r\nconst noiseSeries = new TimeSeries({\r\n    name: \"Noise\",\r\n    columns: [\"time\", \"debug1\"],  //columns: [\"time\", \"debug1\", \"debug2\"],\r\n    points: buildPoints()\r\n});\r\n\r\nconst style = styler([\r\n    { key: \"debug1\", color: \"steelblue\", width: 3 },\r\n    // { key: \"debug2\", color: \"#F68B24\", width: 2 }\r\n]);\r\n\r\n\r\nclass ReportChart extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tracker: null,\r\n            timerange: noiseSeries.range(),\r\n            x: null,\r\n            y: null\r\n        };\r\n\r\n    }\r\n    handleTrackerChanged = tracker => {\r\n        if (!tracker) {\r\n            this.setState({ tracker, x: null, y: null });\r\n        } else {\r\n            this.setState({ tracker });\r\n        }\r\n    };\r\n\r\n    handleTimeRangeChange = timerange => {\r\n        this.setState({ timerange });\r\n    };\r\n\r\n    handleMouseMove = (x, y) => {\r\n        this.setState({ x, y });\r\n    };\r\n\r\n    render() {\r\n        const range = this.state.timerange;\r\n\r\n\r\n        return (\r\n            <div>\r\n\r\n                <p><strong>*Scroll up to Zoom in chart</strong></p>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <Resizable>\r\n                            <ChartContainer\r\n                                timeRange={range}\r\n                                timeAxisStyle={{\r\n                                    ticks: {\r\n                                        stroke: \"black\",\r\n                                        opacity: 0.25,\r\n                                        \"stroke-dasharray\": \"1,1\"\r\n                                        // Note: this isn't in camel case because this is\r\n                                        // passed into d3's style\r\n                                    },\r\n                                    values: {\r\n                                        fill: \"black\",\r\n                                        \"font-size\": 12\r\n                                    }\r\n                                }}\r\n                                showGrid={true}\r\n                                paddingRight={125}\r\n                                maxTime={noiseSeries.range().end()}\r\n                                minTime={noiseSeries.range().begin()}\r\n                                timeAxisAngledLabels={true}\r\n                                timeAxisHeight={65}\r\n                                onTrackerChanged={this.handleTrackerChanged}\r\n                                onBackgroundClick={() => this.setState({ selection: null })}\r\n                                enablePanZoom={true}\r\n                                onTimeRangeChanged={this.handleTimeRangeChange}\r\n                                onMouseMove={(x, y) => this.handleMouseMove(x, y)}\r\n                                minDuration={1000 * 60 * 60 * 24 * 30}\r\n                            >\r\n                                <ChartRow height=\"400\">\r\n                                    <YAxis\r\n                                        id=\"y\"\r\n                                        label=\"(dB) Noise Level\"\r\n                                        min={0}\r\n                                        max={100}\r\n                                        style={{\r\n                                            ticks: {\r\n                                                stroke: \"#AAA\",\r\n                                                opacity: 0.25,\r\n                                                \"stroke-dasharray\": \"1,1\"\r\n                                                // Note: this isn't in camel case because this is\r\n                                                // passed into d3's style\r\n                                            }\r\n       \r\n                                        }}\r\n                                        showGrid\r\n                                        hideAxisLine\r\n                                        width=\"50\"\r\n                                        type=\"linear\"\r\n                                        format=\"\"\r\n                                    />\r\n                                    <Charts>\r\n                                        <LineChart\r\n                                            axis=\"y\"\r\n                                            breakLine={false}\r\n                                            series={noiseSeries}\r\n                                            columns={[\"debug1\"]} //columns={[\"debug1\", \"debug2\"]}\r\n                                            style={style}\r\n                                            interpolation=\"curveBasis\"\r\n                                            highlight={this.state.highlight}\r\n                                            onHighlightChange={highlight =>\r\n                                                this.setState({ highlight })\r\n                                            }\r\n                                            selection={this.state.selection}\r\n                                            onSelectionChange={selection =>\r\n                                                this.setState({ selection })\r\n                                            }\r\n                                        />\r\n                                        <Baseline\r\n                                            axis=\"y\"\r\n                                            value={70}\r\n                                            label=\"Noise (dB) Level Cap\"\r\n                                            position=\"right\"\r\n\r\n                                        />\r\n                                    </Charts>\r\n                                </ChartRow>\r\n                            </ChartContainer>\r\n                        </Resizable>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <span>\r\n                            <Legend\r\n                                type=\"line\"\r\n                                align=\"right\"\r\n                                style={style}\r\n                                highlight={this.state.highlight}\r\n                                onHighlightChange={highlight => this.setState({ highlight })}\r\n                                selection={this.state.selection}\r\n                                onSelectionChange={selection => this.setState({ selection })}\r\n                                categories={[\r\n                                    { key: \"debug1\", label: \"User1 (Debug)\"},\r\n                                    // { key: \"debug2\", label: \"User2\"}\r\n                                ]}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  export default ReportChart;","import React from 'react';\r\nimport ReportTable from '../components/ReportTable';\r\nimport ReportChart from '../components/ReportChart';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst Report = () => {\r\n   var curr = new Date();\r\n\r\n\r\n   var curr = new Date();\r\n   function printPage(e) {\r\n     e.preventDefault();\r\n     window.print();\r\n   }\r\n\r\n\r\n    return (\r\n\r\n\r\n       <div id='content'>\r\n\r\n          <div class=\"no-print\">\r\n            <Button variant=\"info\" className=\"print-btn\" onClick={printPage}>Print report</Button>\r\n          </div>\r\n\r\n          <h1>Your Noise Report Summary: { curr.getMonth() }/{ curr.getDate() }/{ curr.getFullYear() }</h1>\r\n\r\n         <div style={{border: '1px solid black', padding: 50, margin: 30}}>\r\n            <ReportChart/>\r\n         </div>\r\n\r\n         <div style={{padding: 20, margin: 30}}>\r\n          <ReportTable/>\r\n         </div>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Report;\r\n","import React from 'react';\r\n\r\nconst Help = () => {\r\n    return (\r\n       <div>\r\n          <h1>Help</h1>\r\n          <p>Please contact UCI's team Chubby Cats.</p>\r\n          <p>ziv@uci.edu</p>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Help;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n  Link,\r\n  NavLink,\r\n  Switch,\r\n  Redirect\r\n} from 'react-router-dom';\r\n\r\n//Pages\r\nimport Home from './pages/Home.js';\r\nimport Report from './pages/Report';\r\nimport Help from './pages/Help';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <BrowserRouter>\r\n              <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" >\r\n                <Navbar.Brand as={Link} to=\"/\">React Demo App</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                  <Nav className=\"mr-auto\">\r\n                    <Nav.Link as={NavLink} to=\"/host-website\">Home</Nav.Link>\r\n                    <Nav.Link as={NavLink} to=\"/report\">Report</Nav.Link>\r\n                    <Nav.Link as={NavLink} to=\"/help\">Help</Nav.Link>\r\n                  </Nav>\r\n                </Navbar.Collapse>\r\n              </Navbar>\r\n              < br />\r\n              <Switch>\r\n                <Route exact path='/host-website' component={Home}/>\r\n                <Route exact path='/report' component={Report}/>\r\n                <Route exact path='/help' component={Help}/>\r\n                <Redirect from=\"/\" to=\"/host-website\"/>\r\n              </Switch>\r\n          </BrowserRouter>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router} from 'react-router-dom';\r\n\r\nReactDOM.render(<Router>< App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}