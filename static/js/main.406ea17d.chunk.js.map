{"version":3,"sources":["test-data-files sync /^/.//.*/.json$","components/Realtime.js","components/Baselines.js","components/IoTChart.js","components/FranksChart.js","pages/Home.js","components/ReportTable.js","js/styler.js","Legend.js","js/util.js","js/curve.js","components/LineChart.js","components/ReportChart.js","pages/Report.js","pages/Help.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Realtime","state","time","Date","events","Ring","percentile50Out","percentile90Out","getNewEvent","t","TimeEvent","this","stream","Stream","pipeline","from","windowBy","emitOn","aggregate","value","percentile","to","EventOut","event","push","setState","interval","setInterval","getTime","newEvents","addEvent","clearInterval","beginTime","latestTime","fiveMinuteStyle","normal","fill","opacity","highlight","selected","eventSeries","TimeSeries","name","toArray","perc50Series","perc90Series","initialBeginTime","endTime","timeRange","TimeRange","charts","axis","series","style","columns","styler","key","color","width","dashed","className","type","categories","label","fontSize","borderWidth","borderColor","title","height","min","max","React","Component","displayName","points","require","widget","data","reverse","series1","series2","IoTChart","forEach","item","i","currentFile","dict","labels","time_obs","db_reading","dateObj","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","toString","padStart","canvas","document","createElement","chartId","body","appendChild","context","getElementById","getContext","window","Chart","datasets","Home","ReportTable","props","obs_time","Styler","scheme","columnStyles","_","isArray","column","isString","isObject","columnNames","c","has","colorbrewer","colorScheme","length","columnCount","colorSchemeKeys","minSchemeSize","maxSchemeSize","colorLookupSize","numColumns","colorLookup","indexOf","columnName","styleSymbol","stroke","cursor","strokeWidth","strokeDasharray","labelStyle","paddingRight","valueStyle","legendStyle","symbol","highlighted","muted","styleLine","styleSelectedLine","styleArea","styleSelectedArea","line","area","fillStyle","selectedStyle","defaultStyle","LegendItem","stopPropagation","onSelectionChange","onHighlightChange","symbolWidth","symbolHeight","float","x1","y1","parseInt","x2","y2","x","y","rx","ry","w","h","radius","cx","cy","r","symbolStyle","itemKey","symbolType","renderSwatch","renderLine","renderDot","display","flexDirection","onClick","handleClick","onMouseMove","handleHover","onMouseLeave","handleHoverLeave","alignItems","Legend","category","isFunction","isHighlighted","isSelected","selection","isDisabled","disabled","mode","styleMap","providedStyle","styleMode","merge","items","align","stack","justifyContent","marginBottom","flexWrap","defaultProps","scaleAsString","scale","domain","range","curveBasisClosed","curveBasisOpen","curveBasis","curveBundle","curveCardinalClosed","curveCardinalOpen","curveCardinal","curveCatmullRomClosed","curveCatmullRomOpen","curveCatmullRom","curveLinearClosed","curveLinear","curveMonotoneX","curveMonotoneY","curveNatural","curveStep","curveStepAfter","curveStepBefore","LineChart","nextProps","newSeries","oldSeries","timeScale","yScale","interpolation","widthChanged","timeScaleChanged","yAxisScaleChanged","interpolationChanged","highlightChanged","selectionChanged","columnsChanged","seriesChanged","size","is","lineChartStyle","providedPathStyleMap","pointerEvents","path","curve","curves","d","pathStyle","pathLines","count","breakLine","currentPoints","timestamp","begin","end","get","isNull","isNaN","isFinite","renderPath","cleanedPoints","renderLines","visible","smooth","test_data","noiseSeries","result","buildPoints","ReportChart","handleTrackerChanged","tracker","handleTimeRangeChange","timerange","handleMouseMove","timeAxisStyle","ticks","values","showGrid","maxTime","minTime","timeAxisAngledLabels","timeAxisHeight","onTrackerChanged","onBackgroundClick","enablePanZoom","onTimeRangeChanged","minDuration","hideAxisLine","format","position","Report","curr","class","Button","variant","preventDefault","print","getMonth","getDate","getFullYear","Help","App","Container","basename","Navbar","bg","expand","Brand","as","Link","Toggle","aria-controls","Collapse","Nav","NavLink","exact","component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.406ea17d.chunk.js","sourcesContent":["var map = {\n\t\"./Debug.json\": 166,\n\t\"./Dr1.json\": 233,\n\t\"./Esp32.json\": 234,\n\t\"./Nurse1.json\": 235,\n\t\"./Patient1.json\": 236,\n\t\"./users.json\": 167\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 232;","import React from 'react';\nimport Ring from \"ringjs\";\n\nimport {\n  TimeRange,\n  TimeEvent,\n  Pipeline as pipeline,\n  Stream,\n  EventOut,\n  percentile,\n  TimeSeries\n} from \"pondjs\";\n\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  ScatterChart,\n  BarChart,\n  Legend,\n  styler\n} from \"react-timeseries-charts\";\n\n/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nconst sec = 1000;\nconst minute = 60 * sec;\nconst hours = 60 * minute;\nconst rate = 80;\n\nclass Realtime extends React.Component {\n  static displayName = \"AggregatorDemo\";\n\n  state = {\n    // time: new Date(2015, 0, 1),\n    time: new Date(),\n    events: new Ring(200),\n    percentile50Out: new Ring(100),\n    percentile90Out: new Ring(100)\n  };\n\n  getNewEvent = t => {\n    return new TimeEvent(t, 100);\n  };\n\n  componentDidMount() {\n    //\n    // Setup our aggregation pipelines\n    //\n\n    this.stream = new Stream();\n\n    pipeline()\n      .from(this.stream)\n      .windowBy(\"5m\")\n      .emitOn(\"discard\")\n      .aggregate({\n        value: { value: percentile(90) }\n      })\n      .to(EventOut, event => {\n        const events = this.state.percentile90Out;\n        events.push(event);\n        this.setState({ percentile90Out: events });\n      });\n\n    pipeline()\n      .from(this.stream)\n      .windowBy(\"5m\")\n      .emitOn(\"discard\")\n      .aggregate({\n        value: { value: percentile(50) }\n      })\n      .to(EventOut, event => {\n        const events = this.state.percentile50Out;\n        events.push(event);\n        this.setState({ percentile50Out: events });\n      });\n\n    //\n    // Setup our interval to advance the time and generate raw events\n    //\n\n    const increment = minute;\n    this.interval = setInterval(() => {\n      const t = new Date(this.state.time.getTime() + increment);\n      const event = this.getNewEvent(t);\n\n      // Raw events\n      const newEvents = this.state.events;\n      newEvents.push(event);\n      this.setState({ time: t, events: newEvents });\n\n      // Let our aggregators process the event\n      this.stream.addEvent(event);\n    }, rate);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const latestTime = `${this.state.time}`;\n\n    const fiveMinuteStyle = {\n      value: {\n        normal: { fill: \"#619F3A\", opacity: 0.2 },\n        highlight: { fill: \"619F3A\", opacity: 0.5 },\n        selected: { fill: \"619F3A\", opacity: 0.5 }\n      }\n    };\n\n    const scatterStyle = {\n      value: {\n        normal: {\n          fill: \"steelblue\",\n          opacity: 0.5\n        }\n      }\n    };\n\n    //\n    // Create a TimeSeries for our raw, 5min and hourly events\n    //\n\n    const eventSeries = new TimeSeries({\n      name: \"raw\",\n      events: this.state.events.toArray()\n    });\n\n    const perc50Series = new TimeSeries({\n      name: \"five minute perc50\",\n      events: this.state.percentile50Out.toArray()\n    });\n\n    const perc90Series = new TimeSeries({\n      name: \"five minute perc90\",\n      events: this.state.percentile90Out.toArray()\n    });\n\n    // Timerange for the chart axis\n    // const initialBeginTime = new Date(2015, 0, 1);\n    const initialBeginTime = new Date(); // Current Date\n\n    const timeWindow = 3 * hours;\n\n    let beginTime;\n    const endTime = new Date(this.state.time.getTime() + minute);\n    if (endTime.getTime() - timeWindow < initialBeginTime.getTime()) {\n      beginTime = initialBeginTime;\n    } else {\n      beginTime = new Date(endTime.getTime() - timeWindow);\n    }\n    const timeRange = new TimeRange(beginTime, endTime);\n\n    // Charts (after a certain amount of time, just show hourly rollup)\n    const charts = (\n      <Charts>\n        <BarChart\n          axis=\"y\"\n          series={perc90Series}\n          style={fiveMinuteStyle}\n          columns={[\"value\"]}\n        />\n        <BarChart\n          axis=\"y\"\n          series={perc50Series}\n          style={fiveMinuteStyle}\n          columns={[\"value\"]}\n        />\n        <ScatterChart axis=\"y\" series={eventSeries} style={scatterStyle} />\n      </Charts>\n    );\n\n    const dateStyle = {\n      fontSize: 12,\n      color: \"#AAA\",\n      borderWidth: 1,\n      borderColor: \"#F4F4F4\"\n    };\n\n    const style = styler([\n      { key: \"perc50\", color: \"#C5DCB7\", width: 1, dashed: true },\n      { key: \"perc90\", color: \"#DFECD7\", width: 2 }\n    ]);\n\n    return (\n      <div id='chart'>\n        <div className=\"row\">\n          <div className=\"col-md-4\">\n            <Legend\n              type=\"swatch\"\n              style={style}\n              categories={[\n                {\n                  key: \"perc50\",\n                  label: \"Regular dB Levels\",\n                  style: { fill: \"#C5DCB7\" }\n                },\n                {\n                  key: \"perc90\",\n                  label: \"Highest dB Levels\",\n                  style: { fill: \"#DFECD7\" }\n                }\n              ]}\n            />\n          </div>\n          <div className=\"col-md-8\">\n            <span style={dateStyle}>{latestTime}</span>\n          </div>\n        </div>\n        <hr />\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n\n              <ChartContainer title=\"Active Noise Level\" timeRange={timeRange} width=\"1200\">\n                <ChartRow height=\"250\">\n                  <YAxis\n                    id=\"y\"\n                    label=\"dB Levels\"\n                    min={0}\n                    max={150} // This changes the y value of graph in terms of dB levels should be 0-200\n                    width=\"100\"\n                    type=\"linear\"\n                  />\n                  {charts}\n                </ChartRow>\n              </ChartContainer>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Realtime;","import React from 'react';\nimport { TimeSeries } from \"pondjs\";\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  LineChart\n} from \"react-timeseries-charts\";\n\n\n// Data\nconst data = require(\"../usd_vs_euro.json\");\nconst points = data.widget[0].data.reverse();\nconst series1 = new TimeSeries({\n  name: \"USD_vs_EURO\",\n  columns: [\"time\", \"value\"],\n  points\n});\n\nconst series2 = new TimeSeries({\n  name: \"USD_vs_EURO\",\n  columns: [\"time\", \"value\"],\n  points\n});\n\nclass Baselines extends React.Component {\n  state = {\n    tracker: null,\n    timerange: series1.range()\n  };\n\n  handleTrackerChanged = tracker => {\n    this.setState({ tracker });\n  };\n\n  handleTimeRangeChange = timerange => {\n    this.setState({ timerange });\n  };\n\n  render() {\n      return (\n          //<Resizable>\n        /*\n        <ChartContainer\n            title=\"Euro price (USD)\"\n            titleStyle={{ fill: \"#555\", fontWeight: 500 }}\n            timeRange={series.range()}\n            format=\"%b '%y\"\n            timeAxisTickCount={5}\n            width={3440}\n        >\n        <ChartRow height=\"800\">\n        <YAxis\n            id=\"price\"\n            label=\"Price ($)\"\n            min={series.min()}\n            max={series.max()}\n            width=\"60\"\n            format=\"$,.2f\"\n        />\n        <Charts>\n              <LineChart axis=\"price\" series={series} style={style} />\n              <Baseline\n                axis=\"price\"\n                style={baselineStyleLite}\n                value={series.max()}\n                label=\"Max\"\n                position=\"right\"\n              />\n              <Baseline\n                axis=\"price\"\n                style={baselineStyleLite}\n                value={series.min()}\n                label=\"Min\"\n                position=\"right\"\n              />\n              <Baseline\n                axis=\"price\"\n                style={baselineStyleExtraLite}\n                value={series.avg() - series.stdev()}\n              />\n              <Baseline\n                axis=\"price\"\n                style={baselineStyleExtraLite}\n                value={series.avg() + series.stdev()}\n              />\n              <Baseline\n                axis=\"price\"\n                style={baselineStyle}\n                value={series.avg()}\n                label=\"Avg\"\n                position=\"right\"\n              />\n            </Charts>\n          </ChartRow>\n        </ChartContainer>\n*/\n      //</Resizable>\n      // <Resizable>\n          <ChartContainer title=\"Average Hospital Noise Level Overall\" format=\"%b '%y\" timeRange={series1.timerange()} width={1200}>\n         <ChartRow height=\"200\">\n           <YAxis id=\"axis1\" label=\"dB Level\" min={0} max={100} width=\"60\" type=\"linear\" />\n           <Charts>\n             <LineChart axis=\"axis1\" series={series1} />\n             <LineChart axis=\"axis2\" series={series2} />\n           </Charts>\n             <YAxis id=\"axis2\" label=\"dB Level\" min={0} max={100} width=\"80\" type=\"linear\" />\n         </ChartRow>\n      </ChartContainer>\n      // </Resizable>\n\n    );\n  }\n}\n\nexport default Baselines;","import React from 'react'\nimport Chart from \"chart.js\";\nvar Component = React.Component;\n\n\nexport default class IoTChart extends Component {\n    componentDidMount() {\n      var jsonfiles = require('../test-data-files/users.json');\n      jsonfiles.forEach((item, i) => {\n        var currentFile = require('../test-data-files/' + item + '.json')\n        var dict = new Object();\n\t\t\t\tvar labels = currentFile.map(function(e) {\n\t\t\t\t\tdict[e.time_obs] = e.db_reading;\n\t\t\t\t\tif(dict[e.time_obs] < e.db_reading)\n\t\t\t\t\t{\n\t\t\t\t\t\tdict[e.time_obs] = e.db_reading;\n\t\t\t\t\t}\n\t\t\t\t\tvar dateObj = new Date(e.time_obs * 1000);\n\t\t\t\t\tvar hours = dateObj.getUTCHours();\n\t\t\t\t\t// Get minutes part from the timestamp\n\t\t\t\t\tvar minutes = dateObj.getUTCMinutes();\n\t\t\t\t\t// Get seconds part from the timestamp\n\t\t\t\t\tvar seconds = dateObj.getUTCSeconds();\n\t\t\t\t\tvar formattedTime = hours.toString().padStart(2, '0') + ':' +\n                minutes.toString().padStart(2, '0') + ':' +\n                seconds.toString().padStart(2, '0');\n\t\t\t\t  return formattedTime\n\t\t\t\t});\n\t\t\t\tvar data = currentFile.map(function(e) {\n\t\t\t\t   return dict[e.time_obs]\n        });\n        var canvas = document.createElement('canvas'),\n        chartId = 'chart' + i;\n        canvas.id = chartId;\n        document.body.appendChild(canvas);\n        var context = document.getElementById(chartId).getContext('2d');\n        window[chartId] = new Chart(context, {\n        type: 'line',\n        data: {\n            //Bring in data\n            labels: labels,\n            datasets: [\n                {\n                    label: \"DB Levels\",\n                    data: data,\n                }\n            ]\n        }\n      });\n\n      });\n\n\n  }\n  render() {\n      return (\n          <div>\n          </div>\n      )\n  }\n}\n","import React from 'react'\nimport Chart from \"chart.js\";\nvar Component = React.Component;\n\n\nexport default class FrankLineGraph extends Component {\n    chartRef = React.createRef();\n\n    componentDidMount() {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n\t\t\t\tvar jsonfile = require('../test-data-files/Debug.json');\n\t\t\t\tvar dict = new Object();\n\t\t\t\tvar labels = jsonfile.map(function(e) {\n\t\t\t\t\tdict[e.time_obs] = e.db_reading;\n\t\t\t\t\tif(dict[e.time_obs] < e.db_reading)\n\t\t\t\t\t{\n\t\t\t\t\t\tdict[e.time_obs] = e.db_reading;\n\t\t\t\t\t}\n\t\t\t\t\tvar dateObj = new Date(e.time_obs * 1000);\n\t\t\t\t\tvar hours = dateObj.getUTCHours();\n\t\t\t\t\t// Get minutes part from the timestamp\n\t\t\t\t\tvar minutes = dateObj.getUTCMinutes();\n\n\t\t\t\t\t// Get seconds part from the timestamp\n\t\t\t\t\tvar seconds = dateObj.getUTCSeconds();\n\t\t\t\t\tvar formattedTime = hours.toString().padStart(2, '0') + ':' +\n                minutes.toString().padStart(2, '0') + ':' +\n                seconds.toString().padStart(2, '0');\n\t\t\t\t  return formattedTime\n\t\t\t\t});\n\t\t\t\tvar data = jsonfile.map(function(e) {\n\t\t\t\t   return dict[e.time_obs]\n\t\t\t\t});;\n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                labels: labels,\n                datasets: [\n                    {\n                        label: \"DB Levels\",\n                        data: data,\n                    }\n                ]\n            },\n            options: {\n                //Customize chart options\n            }\n        });\n    }\n    render() {\n        return (\n            <div>\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport '../App.css';\nimport Realtime from '../components/Realtime';\nimport Baselines from '../components/Baselines';\nimport FrankLineGraph from '../components/FranksChart'\nimport IoTChart from '../components/IoTChart.js'\n\nconst Home = () => {\n    return (\n      <div>\n        <h1>Noise Manager WebApp</h1>\n        <p>Real time data of each section/device</p>\n\n        <IoTChart />\n      </div>\n    );\n\n}\n\nexport default Home;\n","import React from 'react';\n\n\nclass ReportTable extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          data: [\n            {\n                \"time_obs\": 1586030214,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 43\n            },\n            {\n                \"time_obs\": 1586030214,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 67\n            },\n            {\n                \"time_obs\": 1586030215,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 33\n            },\n            {\n                \"time_obs\": 1586030215,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 63\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 64\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 61\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 53\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 58\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 62\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 53\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 46\n            },\n            {\n                \"time_obs\": 1586030219,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 50\n            },\n            {\n                \"time_obs\": 1586030221,\n                \"user_id\": \"Debug\",\n                \"db_reading\": 45\n            }\n        ]\n        \n\n        };\n\n\n    }\n\n\n    getTime( obs_time ) {\n\n        let date = new Date(0);\n        var myDate = new Date( obs_time *100);\n        return myDate;\n        // while( count < data_array.length ) {\n\n        //     let db_level = data_array[count].db_reading;\n        //     let timeobs = data_array[count].time_obs;\n        //     let date = new Date(0);\n\n\n        //     // Date from the api data\n        //     var myDate = new Date( timeobs *100);\n\n        //     console.log('myDate', myDate);\n        //     console.log('COUNT', count);\n        //     console.log('Date()', t);\n\n        //     count++;\n\n        //     return new TimeEvent( myDate, db_level);\n        // }\n        \n    }\n\n\n\n    render() {\n        return (\n\n            <div>\n\n\n                <h3>Daily Summary Table</h3>\n\n                <table>\n\n                    <thead id='table-header'>\n                        <tr>\n                            <th>ID Number</th>\n                            <th>Avg dB</th>\n                            <th>Peak dB</th>\n                        </tr>\n                    </thead>\n\n                    <tr>\n                        <th>1</th>\n                        <th>55 dB</th>\n                        <th>{this.state.data[0].db_reading} dB</th>\n                        {/* {this.state.data.map( item => \n                            <th> { item.db_reading } </th>\n                            )} */}\n                    </tr>\n\n                    <tr>\n                        <th>2</th>\n                        <th>52 dB</th>\n                        <th>72 dB</th>\n                    </tr>\n\n                    <tr>\n                        <th>3</th>\n                        <th>68 dB</th>\n                        <th>87 dB</th>\n                    </tr>\n\n                    <tr>\n                        <th>4</th>\n                        <th>70 dB</th>\n                        <th>73 dB</th>\n                    </tr>\n\n                    <tr>\n                        <th>5</th>\n                        <th>60 dB</th>\n                        <th>69 dB</th>\n                    </tr>\n\n\n                </table>\n\n\n            </div>\n\n\n        );\n    }\n\n\n\n\n}\n\n\n\n\n  \n  export default ReportTable;","/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nimport _ from \"underscore\";\nimport colorbrewer from \"colorbrewer\";\n\n/**\n * For our Style we want to represent two things:\n *\n *   1. The overall style of an AreaChart should be consistent across a site\n *   2. The specific style of a columnName (e.g. \"pressure\") should be consistent\n *\n * The overall style is implemented with methods specific to\n * each chart type or entity:\n *\n *   - lineChartStyle()\n *   - areaChartStyle()\n *   - legendStyle()\n *   - etc\n *\n * These will render out an object that can be passed into the\n * charts themselves and will control the visual appearance,\n * keyed by columnName. This abstracts away the SVG details of the\n * underlying DOM elements.\n *\n * For the specific style we define here three out of the box parameters\n * by which one column can be different from another when rendered:\n *   - color\n *   - width (of a line)\n *   - dashed or not\n *\n */\nexport class Styler {\n    /**\n     * The columns define the style associated with a particular\n     * quantity, such as \"inTraffic\" or \"temperature\". The columns\n     * are an array, with each element being either a string, or\n     * and object defining the style.\n     *\n     *  * Using a string makes the assumption that you want to use a\n     * color scheme, so you need to define that if you don't want the\n     * default. A color will be then assigned to each column based\n     * on the scheme. The string is the column name.\n     *\n     *  * In the second case of providing an object, you define properties\n     * of the style yourself. Each object should contain a \"key\" property\n     * which is the column name and optionally the `width` and `dashed`\n     * property. If you don't supply the color, then the color\n     * will come from the scheme.\n     *\n     */\n    constructor(columns, scheme = \"Paired\") {\n        this.columnStyles = {};\n        if (_.isArray(columns)) {\n            columns.forEach(column => {\n                if (_.isString(column)) {\n                    this.columnStyles[column] = { key: column };\n                } else if (_.isObject(column)) {\n                    const { key, ...style } = column;\n                    this.columnStyles[key] = style;\n                }\n            });\n        }\n        this.columnNames = _.map(columns, c => {\n            const cc = _.isString(c) ? c : c.key;\n            return cc;\n        });\n\n        if (scheme && !_.has(colorbrewer, scheme)) {\n            throw new Error(`Unknown scheme '${scheme}' supplied to Style constructor`);\n        }\n        this.colorScheme = scheme;\n    }\n\n    numColumns() {\n        return this.columnNames.length;\n    }\n\n    /**\n     * Returns the color scheme with the appropiate number of colors.\n     * If there are more columns than the largest set in the scheme then\n     * just the largest scheme set will be returned.\n     * If there are less columns than the smallest set in the scheme then\n     * just the smallest scheme will be returned.\n     * @param  {number} columnCount The number of columns to apply the scheme to\n     * @return {array}              An array with the scheme colors in it.\n     */\n    colorLookup(columnCount) {\n        const colorSchemeKeys = _.keys(colorbrewer[this.colorScheme]);\n        const minSchemeSize = _.min(colorSchemeKeys);\n        const maxSchemeSize = _.max(colorSchemeKeys);\n        let colorLookupSize = columnCount > maxSchemeSize ? maxSchemeSize : columnCount;\n        colorLookupSize = _.max([colorLookupSize, minSchemeSize]);\n        return this.colorScheme ? colorbrewer[this.colorScheme][colorLookupSize] : [];\n    }\n\n    /**\n     */\n    legendStyle(column, type) {\n        const numColumns = this.numColumns();\n        const colorLookup = this.colorLookup(numColumns);\n        const i = _.indexOf(this.columnNames, column);\n        const columnName = this.columnNames[i];\n        const { color, width = 1, dashed = false } = this.columnStyles[columnName];\n        const c = color || colorLookup[i % colorLookup.length];\n\n        let styleSymbol = {};\n        if (type === \"swatch\" || type === \"dot\") {\n            styleSymbol = {\n                fill: c,\n                opacity: 0.9,\n                stroke: c,\n                cursor: \"pointer\"\n            };\n        } else if (type === \"line\") {\n            styleSymbol = {\n                opacity: 0.9,\n                stroke: c,\n                strokeWidth: width,\n                cursor: \"pointer\"\n            };\n            if (dashed) {\n                styleSymbol.strokeDasharray = \"4,2\";\n            }\n        }\n\n        const labelStyle = {\n            fontSize: \"normal\",\n            color: \"#333\",\n            paddingRight: 10,\n            cursor: \"pointer\"\n        };\n        const valueStyle = {\n            fontSize: \"smaller\",\n            color: \"#999\",\n            cursor: \"pointer\"\n        };\n        const legendStyle = {\n            symbol: {\n                normal: { ...styleSymbol, opacity: 0.7 },\n                highlighted: { ...styleSymbol, opacity: 0.8 },\n                selected: { ...styleSymbol, opacity: 0.8 },\n                muted: { ...styleSymbol, opacity: 0.2 }\n            },\n            label: {\n                normal: { ...labelStyle, opacity: 0.7 },\n                highlighted: { ...labelStyle, opacity: 0.8 },\n                selected: { ...labelStyle, opacity: 0.8 },\n                muted: { ...labelStyle, opacity: 0.5 }\n            },\n            value: {\n                normal: { ...valueStyle, opacity: 0.7 },\n                highlighted: { ...valueStyle, opacity: 0.8 },\n                selected: { ...valueStyle, opacity: 0.8 },\n                muted: { ...valueStyle, opacity: 0.5 }\n            }\n        };\n        return legendStyle;\n    }\n\n    areaChartStyle() {\n        const style = {};\n\n        const numColumns = this.numColumns();\n        const colorLookup = this.colorLookup(numColumns);\n\n        let i = 0;\n        _.forEach(this.columnStyles, ({ color, selected, width = 1, dashed = false }, column) => {\n            const c = color || colorLookup[i % colorLookup.length];\n            const styleLine = {\n                stroke: c,\n                fill: \"none\",\n                strokeWidth: width\n            };\n            const styleSelectedLine = {\n                stroke: selected || color,\n                fill: \"none\",\n                strokeWidth: width\n            };\n            if (dashed) {\n                styleLine.strokeDasharray = \"4,2\";\n            }\n            const styleArea = {\n                fill: c,\n                stroke: \"none\"\n            };\n            const styleSelectedArea = {\n                fill: selected || color,\n                stroke: \"none\"\n            };\n            style[column] = {\n                line: {\n                    normal: { ...styleLine, opacity: 0.9 },\n                    highlighted: { ...styleLine, opacity: 1.0 },\n                    selected: { ...styleSelectedLine, opacity: 1.0 },\n                    muted: { ...styleLine, opacity: 0.4 }\n                },\n                area: {\n                    normal: { ...styleArea, opacity: 0.7 },\n                    highlighted: { ...styleArea, opacity: 0.8 },\n                    selected: { ...styleSelectedArea, opacity: 0.8 },\n                    muted: { ...styleArea, opacity: 0.2 }\n                }\n            };\n            i += 1;\n        });\n        return style;\n    }\n\n    lineChartStyle() {\n        const numColumns = this.numColumns();\n        const colorLookup = this.colorLookup(numColumns);\n        const style = {};\n        _.forEach(this.columnStyles, ({ color, selected, width = 1, dashed = false }, column) => {\n            const i = _.indexOf(this.columnNames, column);\n            const c = color || colorLookup[i % colorLookup.length];\n            const styleLine = {\n                stroke: c,\n                strokeWidth: width,\n                fill: \"none\"\n            };\n            const styleSelectedLine = {\n                stroke: selected || c,\n                strokeWidth: width,\n                fill: \"none\"\n            };\n\n            if (dashed) {\n                styleLine.strokeDasharray = \"4,2\";\n            }\n            style[column] = {\n                normal: { ...styleLine, opacity: 0.8, strokeWidth: width },\n                highlighted: { ...styleLine, opacity: 1.0, strokeWidth: width },\n                selected: { ...styleSelectedLine, opacity: 1.0, strokeWidth: width },\n                muted: { ...styleLine, opacity: 0.2, strokeWidth: width }\n            };\n        });\n        return style;\n    }\n\n    barChartStyle() {\n        const numColumns = this.numColumns();\n        const colorLookup = this.colorLookup(numColumns);\n        const style = {};\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\n            const i = _.indexOf(this.columnNames, column);\n            const c = color || colorLookup[i % colorLookup.length];\n            const fillStyle = {\n                fill: c\n            };\n            const selectedStyle = {\n                fill: selected || c\n            };\n            style[column] = {\n                normal: { ...fillStyle, opacity: 0.8 },\n                highlighted: { ...fillStyle, opacity: 1.0 },\n                selected: { ...selectedStyle, opacity: 1.0 },\n                muted: { ...fillStyle, opacity: 0.2 }\n            };\n        });\n        return style;\n    }\n\n    scatterChartStyle() {\n        const numColumns = this.numColumns();\n        const colorLookup = this.colorLookup(numColumns);\n        const style = {};\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\n            const i = _.indexOf(this.columnNames, column);\n            const c = color || colorLookup[i % colorLookup.length];\n            const fillStyle = {\n                fill: c\n            };\n            const selectedStyle = {\n                fill: selected || c\n            };\n            style[column] = {\n                normal: { ...fillStyle, opacity: 0.8 },\n                highlighted: { ...fillStyle, opacity: 1.0 },\n                selected: { ...selectedStyle, opacity: 1.0 },\n                muted: { ...fillStyle, opacity: 0.2 }\n            };\n        });\n        return style;\n    }\n\n    axisStyle(column) {\n        const numColumns = this.numColumns();\n        const colorLookup = this.colorLookup(numColumns);\n        const i = _.indexOf(this.columnNames, column);\n        const columnName = this.columnNames[i];\n        const { color } = this.columnStyles[columnName];\n        const c = color || colorLookup[i % colorLookup.length];\n        return {\n            label: {\n                fill: c\n            }\n        };\n    }\n\n    boxChartStyle() {\n        const style = {};\n\n        const numColumns = this.numColumns();\n        const colorLookup = this.colorLookup(numColumns);\n\n        let i = 0;\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\n            const c = color || colorLookup[i % colorLookup.length];\n            const styleArea = {\n                fill: c,\n                stroke: \"none\"\n            };\n            const styleSelectedArea = {\n                fill: selected || color,\n                stroke: \"none\"\n            };\n            style[column] = [\n                {\n                    normal: { ...styleArea, opacity: 0.2 },\n                    highlighted: { ...styleArea, opacity: 0.3 },\n                    selected: { ...styleSelectedArea, opacity: 0.3 },\n                    muted: { ...styleArea, opacity: 0.1 }\n                },\n                {\n                    normal: { ...styleArea, opacity: 0.5 },\n                    highlighted: { ...styleArea, opacity: 0.6 },\n                    selected: { ...styleSelectedArea, opacity: 0.6 },\n                    muted: { ...styleArea, opacity: 0.2 }\n                },\n                {\n                    normal: { ...styleArea, opacity: 0.9 },\n                    highlighted: { ...styleArea, opacity: 1.0 },\n                    selected: { ...styleSelectedArea, opacity: 1.0 },\n                    muted: { ...styleArea, opacity: 0.2 }\n                }\n            ];\n            i += 1;\n        });\n        return style;\n    }\n}\n\nexport default function styler(columns, scheme) {\n    return new Styler(columns, scheme);\n}","/**\n *  Copyright (c) 2015-present, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nimport _ from \"underscore\";\nimport merge from \"merge\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Styler } from \"../src/js/styler\";\n\nconst defaultStyle = {\n    symbol: {\n        normal: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 1 },\n        highlighted: { stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1 },\n        selected: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 2 },\n        muted: { stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1 }\n    },\n    label: {\n        normal: { fontSize: \"normal\", color: \"#333\" },\n        highlighted: { fontSize: \"normal\", color: \"#222\" },\n        selected: { fontSize: \"normal\", color: \"#333\" },\n        muted: { fontSize: \"normal\", color: \"#333\", opacity: 0.4 }\n    },\n    value: {\n        normal: { fontSize: \"normal\", color: \"#333\" },\n        highlighted: { fontSize: \"normal\", color: \"#222\" },\n        selected: { fontSize: \"normal\", color: \"#333\" },\n        muted: { fontSize: \"normal\", color: \"#333\", opacity: 0.4 }\n    }\n};\n\n/**\n * Legends are simple to define.\n *\n * First specify the styles you want each item to have. This is either\n * the CSS that should be appied to rendered symbol. Or you can provide\n * a Styler object. See below for full styling details.\n *\n * ```\n * const style = Styler([\n *     {key: \"aud\", color: \"steelblue\", width: 1, dashed: true},\n *     {key: \"euro\", color: \"#F68B24\", width: 2}\n * ]);\n * ```\n *\n * Next build a list of categories you want in the legend.\n *\n * ```\n * const categories = [\n *     {key: \"aust\", label: \"AUD\", value: \"1.52\", disabled: true},\n *     {key: \"usa\", label: \"USD\", value: \"1.43\", disabled: false}\n * ];\n * ```\n * For each category to display you must provide a key, a label and\n * if it should be displayed disabled or not.\n *\n * Then render the legend, with type either \"line\", \"swatch\" or \"dot\":\n *\n * ```\n * <Legend type=\"line\" style={style} categories={categories} />\n * ```\n *\n * Optionally you can also display a value below the label. This is\n * useful when hovering over another chart on the page, or to display\n * the current value of live data. You can see this defined in the\n * above categories.\n *\n * The legend can also be supplied with callback functions which will\n * tell you if the user has clicked or hovered over on one of the legend\n * items. You can use this to sync highlighting and selection to a\n * chart.\n *\n * ## Styling\n *\n * There are three methods of styling a legend:\n *  - using a Styler object\n *  - using an object containing inline styles\n *  - using a function which returns an inline style\n *\n * A Styler object can be supplied directly to the `style` prop\n * of the legend. This is the simplest approach, since you can\n * usually just use the same Styler as you use for your chart.\n *\n * Supplying an object to the `style` prop gives you more control\n * than the Styler, since you can provide the actual CSS properties\n * for each element of the legend. The format for the object is:\n *\n * ```\n * {\n *     columnName1: {\n      symbol: {\n        normal: {...styleSymbol},\n        highlighted: {...styleSymbol},\n        selected: {...styleSymbol},\n        muted: {...styleSymbol}\n      },\n      label: {\n        normal: {...labelStyle},\n        highlighted: {...labelStyle},\n        selected: {...labelStyle},\n        muted: {...labelStyle}\n      },\n      value: {\n        normal: {...valueStyle},\n        highlighted: {...valueStyle},\n        selected: {...valueStyle},\n        muted: {...valueStyle}\n      }\n *     },\n *     columnName2 : {\n *         ...\n *     },\n *     ...\n *  }\n *\n *  - symbolStyle is the CSS properties for the symbol, which\n * is either a swatch, dot or line. For a line, you'd want to\n * provide the SVG <line> properties, for a swatch you'd provide\n * the SVG <rect> properties and for a dot the <ellipse> properties.\n *  - labelStyle is the main label for the legend item. It is a\n *  SVG <text> element, so you can control the font properties.\n *  - valueStyle is the optional value. As with the labelStyle you\n *  this is an SVG <text> element.\n *\n * Finally, you can provide a function to the `style` prop. This\n * is similar to providing an object, except your function will\n * be called with the columnName and you should return the map\n * containing symbol, label and value styles.\n */\n\nclass LegendItem extends React.Component {\n    handleClick(e, key) {\n        e.stopPropagation();\n        if (this.props.onSelectionChange) {\n            this.props.onSelectionChange(key);\n        }\n    }\n\n    handleHover(e, key) {\n        if (this.props.onHighlightChange) {\n            this.props.onHighlightChange(key);\n        }\n    }\n\n    handleHoverLeave() {\n        if (this.props.onHighlightChange) {\n            this.props.onHighlightChange(null);\n        }\n    }\n\n    renderLine(style) {\n        const { symbolWidth, symbolHeight } = this.props;\n        return (\n            <svg style={{ float: \"left\" }} width={symbolWidth} height={symbolHeight}>\n                <line\n                    style={style}\n                    x1={0}\n                    y1={parseInt(symbolWidth / 2, 10)}\n                    x2={symbolWidth}\n                    y2={parseInt(symbolWidth / 2, 10)}\n                    stroke=\"black\"\n                    strokeWidth=\"2\"\n                />\n            </svg>\n        );\n    }\n\n    renderSwatch(style) {\n        const { symbolWidth, symbolHeight } = this.props;\n        return (\n            <svg style={{ float: \"left\" }} width={symbolWidth} height={symbolHeight}>\n                <rect\n                    style={style}\n                    x={2}\n                    y={2}\n                    width={symbolWidth - 4}\n                    height={symbolHeight - 4}\n                    rx={2}\n                    ry={2}\n                />\n            </svg>\n        );\n    }\n\n    renderDot(style) {\n        const { symbolWidth, symbolHeight } = this.props;\n        const w = parseInt(symbolWidth / 2, 10);\n        const h = parseInt(symbolHeight / 2, 10);\n        const radius = w * 0.75;\n\n        return (\n            <svg style={{ float: \"left\" }} width={symbolWidth} height={symbolHeight}>\n                <circle style={style} cx={w} cy={h} r={radius} />\n            </svg>\n        );\n    }\n\n    render() {\n        const { symbolStyle, labelStyle, valueStyle, itemKey, symbolType } = this.props;\n\n        let symbol;\n        switch (symbolType) {\n            case \"swatch\":\n                symbol = this.renderSwatch(symbolStyle);\n                break;\n            case \"line\":\n                symbol = this.renderLine(symbolStyle);\n                break;\n            case \"dot\":\n                symbol = this.renderDot(symbolStyle);\n                break;\n            default:\n            //pass\n        }\n\n        // TODO: We shouldn't be adding interactions to a element like this.\n        //       The alternative it to put it on a <a> or something?\n\n        return (\n            <div\n                style={{\n                    display: \"flex\",\n                    flexDirection: \"column\"\n                }}\n                key={itemKey}\n                onClick={e => this.handleClick(e, itemKey)}\n                onMouseMove={e => this.handleHover(e, itemKey)}\n                onMouseLeave={() => this.handleHoverLeave()}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        alignItems: \"center\"\n                    }}\n                >\n                    <div style={{ width: \"20px\" }}>{symbol}</div>\n                    <div\n                        style={{\n                            display: \"flex\",\n                            flexDirection: \"column\"\n                        }}\n                    >\n                        <div style={labelStyle}>{this.props.label}</div>\n                        <div style={valueStyle}>{this.props.value}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default class Legend extends React.Component {\n    handleClick(e, key) {\n        e.stopPropagation();\n        if (this.props.onSelectionChange) {\n            this.props.onSelectionChange(key);\n        }\n    }\n\n    handleHover(e, key) {\n        if (this.props.onHighlightChange) {\n            this.props.onHighlightChange(key);\n        }\n    }\n\n    handleHoverLeave() {\n        if (this.props.onHighlightChange) {\n            this.props.onHighlightChange(null);\n        }\n    }\n\n    /**\n     * For each category item we get the users stle preference. This\n     * can be supplied in a number of ways:\n     *  * Typically you would get the legend stle from a Style instance\n     *  * Alternatively, you can pass in a style object which has your\n     *    category in it and the associated style\n     *  * Finally, the provided style can also be a function\n     */\n    providedStyle(category, type) {\n        let style = {};\n        if (this.props.style) {\n            if (this.props.style instanceof Styler) {\n                style = this.props.style.legendStyle(category.key, type);\n            } else if (_.isFunction(this.props.style)) {\n                style = this.props.style(category.key);\n            } else if (_.isObject(this.props.style)) {\n                style = this.props.style ? this.props.style[category.key] : defaultStyle;\n            }\n        }\n        return style;\n    }\n\n    /**\n     * For each category this function takes the current\n     * selected and highlighted item, along with the disabled\n     * state of the item, and returns the mode it should be\n     * rendered in: normal, selected, highlighted, or muted\n     */\n    styleMode(category) {\n        const isHighlighted = this.props.highlight && category.key === this.props.highlight;\n        const isSelected = this.props.selection && category.key === this.props.selection;\n        const isDisabled = category.disabled;\n\n        let mode = \"normal\";\n        if (this.props.selection) {\n            if (isSelected) {\n                mode = \"selected\";\n            } else if (isHighlighted) {\n                mode = \"highlighted\";\n            } else {\n                mode = \"muted\";\n            }\n        } else if (isHighlighted) {\n            mode = \"highlighted\";\n        } else if (isDisabled) {\n            mode = \"muted\";\n        }\n        return mode;\n    }\n\n    symbolStyle(category, type) {\n        const styleMap = this.providedStyle(category, type);\n        const styleMode = this.styleMode(category);\n        return merge(\n            true,\n            defaultStyle[styleMode],\n            styleMap.symbol ? styleMap.symbol[styleMode] : {}\n        );\n    }\n\n    labelStyle(category) {\n        const styleMap = this.providedStyle(category);\n        const styleMode = this.styleMode(category);\n        return merge(\n            true,\n            defaultStyle[styleMode],\n            styleMap.label ? styleMap.label[styleMode] : {}\n        );\n    }\n\n    valueStyle(category) {\n        const styleMap = this.providedStyle(category);\n        const styleMode = this.styleMode(category);\n        return merge(\n            true,\n            defaultStyle[styleMode],\n            styleMap.value ? styleMap.value[styleMode] : {}\n        );\n    }\n\n    render() {\n        const { type = \"swatch\", symbolWidth, symbolHeight } = this.props;\n        const items = this.props.categories.map(category => {\n            const { key, label, value, symbolType = type } = category;\n            const symbolStyle = this.symbolStyle(category, symbolType);\n            const labelStyle = this.labelStyle(category);\n            const valueStyle = this.valueStyle(category);\n            return (\n                <LegendItem\n                    key={key}\n                    type={type}\n                    itemKey={key}\n                    label={label}\n                    value={value}\n                    symbolType={symbolType}\n                    symbolWidth={symbolWidth}\n                    symbolHeight={symbolHeight}\n                    symbolStyle={symbolStyle}\n                    labelStyle={labelStyle}\n                    valueStyle={valueStyle}\n                    onSelectionChange={this.props.onSelectionChange}\n                    onHighlightChange={this.props.onHighlightChange}\n                />\n            );\n        });\n\n        const align = this.props.align === \"left\" ? \"flex-start\" : \"flex-end\";\n\n        if (this.props.stack) {\n            return (\n                <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: align,\n                        flexDirection: \"column\",\n                        marginBottom: this.props.marginBottom\n                    }}\n                >\n                    {items}\n                </div>\n            );\n        } else {\n            return (\n                <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: align,\n                        flexWrap: \"wrap\",\n                        marginBottom: this.props.marginBottom\n                    }}\n                >\n                    {items}\n                </div>\n            );\n        }\n    }\n}\n\nLegend.propTypes = {\n    /**\n     * The overall style of the legend items, either a color \"swatch\", a\n     * colored \"line\", or a \"dot\".\n     */\n    type: PropTypes.oneOf([\"swatch\", \"line\", \"dot\"]),\n\n    /**\n     * Alignment of the legend within the available space. Either left or right.\n     */\n    align: PropTypes.oneOf([\"left\", \"right\"]),\n\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.instanceOf(Styler)]),\n\n    /**\n     * The categories array specifies details and style for each item in the legend. For each item:\n     *  * \"key\" - (required) the name by which the legend will be known\n     *  * \"label\" - (required) the displayed label\n     *  * \"style\" - the swatch, dot, or line style. Typically you'd just\n     *              specify {backgroundColor: \"#1f77b4\"}\n     *  * \"labelStyle\" - the label style\n     *  * \"disabled\" - a disabled state\n     *\n     * ```\n     * const categories = [\n     *    {key: \"aust\", label: \"AUD\", disabled: this.state.disabled[\"aust\"],\n     *      style: {backgroundColor: \"#1f77b4\"}},\n     *    {key: \"usa\", label: \"USD\", disabled: this.state.disabled[\"usa\"],\n     *      style: {backgroundColor: \"#aec7e8\"}}\n     * ];\n     * ```\n     */\n    categories: PropTypes.arrayOf(\n        PropTypes.shape({\n            key: PropTypes.string.isRequired, // eslint-disable-line\n            label: PropTypes.string.isRequired, // eslint-disable-line\n            disabled: PropTypes.bool, // eslint-disable-line\n            style: PropTypes.object, // eslint-disable-line\n            labelStyle: PropTypes.object // eslint-disable-line\n        })\n    ).isRequired,\n\n    /**\n     * The width of the legend symbol\n     */\n    symbolWidth: PropTypes.number,\n\n    /**\n     * The height of the legend symbol\n     */\n    symbolHeight: PropTypes.number,\n\n    /**\n     * Which item, specified by its key, should be rendered as highlighted\n     */\n    highlight: PropTypes.string,\n\n    /**\n     * Which item, specified by its key, should be rendered as selected\n     */\n    selection: PropTypes.string,\n\n    /**\n     * Callback will be called with a legend item is selected (i.e. it is clicked\n     * on by the user)\n     */\n    onSelectionChange: PropTypes.func,\n\n    /**\n     * Callback will be called with a legend item is highlighted (i.e. it is hovered\n     * over by the user)\n     */\n    onHighlightChange: PropTypes.func,\n\n    /**\n     * Defines whether to stack legend items vertically or not\n     */\n    stack: PropTypes.bool,\n\n    /**\n     * The margin at the bottom. Default value is 20px\n     */\n    marginBottom: PropTypes.string\n};\n\nLegend.defaultProps = {\n    style: {},\n    labelStyle: {},\n    type: \"swatch\", // or \"line\" or \"dot\"\n    align: \"left\",\n    symbolWidth: 16,\n    symbolHeight: 16,\n    stack: false,\n    marginBottom: \"20px\"\n};","/**\n *  Copyright (c) 2016, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nexport function scaleAsString(scale) {\n    return `${scale.domain()}-${scale.range()}`;\n}\n\n// http://stackoverflow.com/a/28857255\nexport function getElementOffset(element) {\n    const de = document.documentElement;\n    const box = element.getBoundingClientRect();\n    const top = box.top + window.pageYOffset - de.clientTop;\n    const left = box.left + window.pageXOffset - de.clientLeft;\n    return { top, left };\n}","/**\n *  Copyright (c) 2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nimport {\n    curveBasisClosed,\n    curveBasisOpen,\n    curveBasis,\n    curveBundle,\n    curveCardinalClosed,\n    curveCardinalOpen,\n    curveCardinal,\n    curveCatmullRomClosed,\n    curveCatmullRomOpen,\n    curveCatmullRom,\n    curveLinearClosed,\n    curveLinear,\n    curveMonotoneX,\n    curveMonotoneY,\n    curveNatural,\n    curveStep,\n    curveStepAfter,\n    curveStepBefore\n} from \"d3-shape\";\n\nexport default {\n    curveBasisClosed,\n    curveBasisOpen,\n    curveBasis,\n    curveBundle,\n    curveCardinalClosed,\n    curveCardinalOpen,\n    curveCardinal,\n    curveCatmullRomClosed,\n    curveCatmullRomOpen,\n    curveCatmullRom,\n    curveLinearClosed,\n    curveLinear,\n    curveMonotoneX,\n    curveMonotoneY,\n    curveNatural,\n    curveStep,\n    curveStepAfter,\n    curveStepBefore\n};","/**\n *  Copyright (c) 2015-present, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nimport _ from \"underscore\";\nimport { line } from \"d3-shape\";\nimport merge from \"merge\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TimeSeries } from \"pondjs\";\n\nimport { Styler } from \"../js/styler\";\nimport { scaleAsString } from \"../js/util\";\nimport curves from \"../js/curve\";\n\nconst defaultStyle = {\n    normal: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 1 },\n    highlighted: { stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1 },\n    selected: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 2 },\n    muted: { stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1 }\n};\n\n/**\n * The `<LineChart>` component is able to display multiple columns of a TimeSeries\n * as separate line charts.\n *\n * The `<LineChart>` should be used within `<ChartContainer>` etc., as this will\n * construct the horizontal and vertical axis, and manage other elements.\n *\n * Here is an example of two columns of a TimeSeries being plotted with the `<LineChart>`:\n *\n * ```\n  <ChartContainer timeRange={this.state.timerange} >\n    <ChartRow height=\"200\">\n      <YAxis id=\"y\" label=\"Price ($)\" min={0.5} max={1.5} format=\"$,.2f\" />\n      <Charts>\n        <LineChart\n          axis=\"y\"\n          breakLine={false}\n          series={currencySeries}\n          columns={[\"aud\", \"euro\"]}\n          style={style}\n          interpolation=\"curveBasis\" />\n      </Charts>\n    </ChartRow>\n  </ChartContainer>\n * ```\n */\nexport default class LineChart extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        const newSeries = nextProps.series;\n        const oldSeries = this.props.series;\n\n        const width = nextProps.width;\n        const timeScale = nextProps.timeScale;\n        const yScale = nextProps.yScale;\n        const interpolation = nextProps.interpolation;\n        const highlight = nextProps.highlight;\n        const selection = nextProps.selection;\n        const columns = nextProps.columns;\n\n        // What changed?\n        const widthChanged = this.props.width !== width;\n        const timeScaleChanged = scaleAsString(this.props.timeScale) !== scaleAsString(timeScale);\n        const yAxisScaleChanged = this.props.yScale !== yScale;\n        const interpolationChanged = this.props.interpolation !== interpolation;\n        const highlightChanged = this.props.highlight !== highlight;\n        const selectionChanged = this.props.selection !== selection;\n        const columnsChanged = this.props.columns !== columns;\n\n        let seriesChanged = false;\n        if (oldSeries.size() !== newSeries.size()) {\n            seriesChanged = true;\n        } else {\n            seriesChanged = !TimeSeries.is(oldSeries, newSeries);\n        }\n\n        return (\n            widthChanged ||\n            seriesChanged ||\n            timeScaleChanged ||\n            yAxisScaleChanged ||\n            interpolationChanged ||\n            highlightChanged ||\n            selectionChanged ||\n            columnsChanged\n        );\n    }\n\n    handleHover(e, column) {\n        if (this.props.onHighlightChange) {\n            this.props.onHighlightChange(column);\n        }\n    }\n\n    handleHoverLeave() {\n        if (this.props.onHighlightChange) {\n            this.props.onHighlightChange(null);\n        }\n    }\n\n    handleClick(e, column) {\n        e.stopPropagation();\n        if (this.props.onSelectionChange) {\n            this.props.onSelectionChange(column);\n        }\n    }\n\n    providedPathStyleMap(column) {\n        let style = {};\n        if (this.props.style) {\n            if (this.props.style instanceof Styler) {\n                style = this.props.style.lineChartStyle()[column];\n            } else if (_.isFunction(this.props.style)) {\n                style = this.props.style(column);\n            } else if (_.isObject(this.props.style)) {\n                style = this.props.style ? this.props.style[column] : defaultStyle;\n            }\n        }\n        return style;\n    }\n\n    /**\n     * Returns the style used for drawing the path\n     */\n    pathStyle(column) {\n        let style;\n\n        const styleMap = this.providedPathStyleMap(column);\n        const isHighlighted = this.props.highlight && column === this.props.highlight;\n        const isSelected = this.props.selection && column === this.props.selection;\n\n        if (this.props.selection) {\n            if (isSelected) {\n                style = merge(\n                    true,\n                    defaultStyle.selected,\n                    styleMap.selected ? styleMap.selected : {}\n                );\n            } else if (isHighlighted) {\n                style = merge(\n                    true,\n                    defaultStyle.highlighted,\n                    styleMap.highlighted ? styleMap.highlighted : {}\n                );\n            } else {\n                style = merge(true, defaultStyle.muted, styleMap.muted ? styleMap.muted : {});\n            }\n        } else if (isHighlighted) {\n            style = merge(\n                true,\n                defaultStyle.highlighted,\n                styleMap.highlighted ? styleMap.highlighted : {}\n            );\n        } else {\n            style = merge(true, defaultStyle.normal, styleMap.normal);\n        }\n\n        style.pointerEvents = \"none\";\n\n        return style;\n    }\n\n    renderPath(data, column, key) {\n        const hitStyle = {\n            stroke: \"white\",\n            fill: \"none\",\n            opacity: 0.0,\n            strokeWidth: 7,\n            cursor: \"crosshair\",\n            pointerEvents: \"stroke\"\n        };\n\n        // D3 generates each path\n        const path = line()\n            .curve(curves[this.props.interpolation])\n            .x(d => this.props.timeScale(d.x))\n            .y(d => this.props.yScale(d.y))(data);\n\n        return (\n            <g key={key}>\n                <path d={path} style={this.pathStyle(column)} />\n                <path\n                    d={path}\n                    style={hitStyle}\n                    onClick={e => this.handleClick(e, column)}\n                    onMouseLeave={() => this.handleHoverLeave()}\n                    onMouseMove={e => this.handleHover(e, column)}\n                />\n            </g>\n        );\n    }\n\n    renderLines() {\n        return _.map(this.props.columns, column => this.renderLine(column));\n    }\n\n    renderLine(column) {\n        const pathLines = [];\n        let count = 1;\n        if (this.props.breakLine) {\n            // Remove nulls and NaNs from the line by generating a break in the line\n            let currentPoints = null;\n            for (const d of this.props.series.events()) {\n                const timestamp = new Date(\n                    d.begin().getTime() + (d.end().getTime() - d.begin().getTime()) / 2\n                );\n                const value = d.get(column);\n                const badPoint = _.isNull(value) || _.isNaN(value) || !_.isFinite(value);\n                if (!badPoint) {\n                    if (!currentPoints) currentPoints = [];\n                    currentPoints.push({ x: timestamp, y: value });\n                } else if (currentPoints) {\n                    if (currentPoints.length > 1) {\n                        pathLines.push(this.renderPath(currentPoints, column, count));\n                        count += 1;\n                    }\n                    currentPoints = null;\n                }\n            }\n            if (currentPoints && currentPoints.length > 1) {\n                pathLines.push(this.renderPath(currentPoints, column, count));\n                count += 1;\n            }\n        } else {\n            // Ignore nulls and NaNs in the line\n            const cleanedPoints = [];\n            for (const d of this.props.series.events()) {\n                const timestamp = new Date(\n                    d.begin().getTime() + (d.end().getTime() - d.begin().getTime()) / 2\n                );\n                const value = d.get(column);\n                const badPoint = _.isNull(value) || _.isNaN(value) || !_.isFinite(value);\n                if (!badPoint) {\n                    cleanedPoints.push({ x: timestamp, y: value });\n                }\n            }\n\n            pathLines.push(this.renderPath(cleanedPoints, column, count));\n            count += 1;\n        }\n\n        return <g key={column}>{pathLines}</g>;\n    }\n\n    render() {\n        return <g>{this.renderLines()}</g>;\n    }\n}\n\nLineChart.propTypes = {\n    /**\n     * Show or hide this chart\n     */\n    visible: PropTypes.bool,\n\n    /**\n     * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize\n     */\n    series: PropTypes.instanceOf(TimeSeries).isRequired,\n\n    /**\n     * Reference to the axis which provides the vertical scale for drawing.\n     * e.g. specifying `axis=\"trafficRate\"` would refer the y-scale of the YAxis\n     * with id=\"trafficRate\".\n     */\n    axis: PropTypes.string.isRequired, // eslint-disable-line\n\n    /**\n     * Which columns from the series to draw.\n     * \n     * NOTE : Columns can't have periods because periods \n     * represent a path to deep data in the underlying events \n     * (i.e. reference into nested data structures)\n     */\n    columns: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * The styles to apply to the underlying SVG lines. This is a mapping\n     * of column names to objects with style attributes, in the following\n     * format:\n     *\n     * ```\n     * const style = {\n     *     in: {\n     *         normal: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\n     *         highlighted: {stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1},\n     *         selected: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\n     *         muted: {stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1}\n     *     },\n     *     out: {\n     *         ...\n     *     }\n     * };\n     *\n     *  <LineChart style={style} ... />\n     * ```\n     *\n     * Alternatively, you can pass in a `Styler`. For example:\n     *\n     * ```\n     * const currencyStyle = Styler([\n     *     {key: \"aud\", color: \"steelblue\", width: 1, dashed: true},\n     *     {key: \"euro\", color: \"#F68B24\", width: 2}\n     * ]);\n     *\n     * <LineChart columns={[\"aud\", \"euro\"]} style={currencyStyle} ... />\n     *\n     * ```\n     */\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.instanceOf(Styler)]),\n\n    /**\n     * Any of D3's interpolation modes.\n     */\n    interpolation: PropTypes.oneOf([\n        \"curveBasis\",\n        \"curveBasisOpen\",\n        \"curveBundle\",\n        \"curveCardinal\",\n        \"curveCardinalOpen\",\n        \"curveCatmullRom\",\n        \"curveCatmullRomOpen\",\n        \"curveLinear\",\n        \"curveMonotoneX\",\n        \"curveMonotoneY\",\n        \"curveNatural\",\n        \"curveRadial\",\n        \"curveStep\",\n        \"curveStepAfter\",\n        \"curveStepBefore\"\n    ]),\n\n    /**\n     * The determines how to handle bad/missing values in the supplied\n     * TimeSeries. A missing value can be null or NaN. If breakLine\n     * is set to true (the default) then the line will be broken on either\n     * side of the bad value(s). If breakLine is false bad values\n     * are simply removed and the adjoining points are connected.\n     */\n    breakLine: PropTypes.bool,\n\n    /**\n     * The selected item, which will be rendered in the \"selected\" style.\n     * If a line is selected, all other lines will be rendered in the \"muted\" style.\n     *\n     * See also `onSelectionChange`\n     */\n    selection: PropTypes.string,\n\n    /**\n     * A callback that will be called when the selection changes. It will be called\n     * with the column corresponding to the line being clicked.\n     */\n    onSelectionChange: PropTypes.func,\n\n    /**\n     * The highlighted column, which will be rendered in the \"highlighted\" style.\n     *\n     * See also `onHighlightChange`\n     */\n    highlight: PropTypes.string,\n\n    /**\n     * A callback that will be called when the hovered over line changes.\n     * It will be called with the corresponding column.\n     */\n    onHighlightChange: PropTypes.func,\n\n    /**\n     * [Internal] The timeScale supplied by the surrounding ChartContainer\n     */\n    timeScale: PropTypes.func,\n\n    /**\n     * [Internal] The yScale supplied by the associated YAxis\n     */\n    yScale: PropTypes.func,\n\n    /**\n     * [Internal] The width supplied by the surrounding ChartContainer\n     */\n    width: PropTypes.number\n};\n\nLineChart.defaultProps = {\n    visible: true,\n    columns: [\"value\"],\n    smooth: true,\n    interpolation: \"curveLinear\",\n    breakLine: true\n};","import React from 'react';\nimport { TimeSeries } from \"pondjs\";\nimport _ from \"underscore\";\nimport {\n    Charts,\n    ChartContainer,\n    ChartRow,\n    YAxis,\n    Baseline,\n    Resizable\n  } from \"react-timeseries-charts\";\n  \n import styler from './../js/styler' \nimport Legend from './../Legend'\nimport LineChart from './LineChart'\n\n\n\nconst test_data = require('./../test_data.json');\n\n\nfunction buildPoints() {\n\n    let result = [];\n\n    for(let i = 0; i < test_data.length ; i++) {\n\n        var time = new Date( test_data[i].time_obs *100 );\n        result.push( [time,  test_data[i].db_reading, (test_data[i].db_reading -10) ] );\n\n    }\n\n    return result;\n\n\n}\n\nconst noiseSeries = new TimeSeries({\n    name: \"Noise\",\n    columns: [\"time\", \"debug1\"],  //columns: [\"time\", \"debug1\", \"debug2\"],\n    points: buildPoints()\n});\n\nconst style = styler([\n    { key: \"debug1\", color: \"steelblue\", width: 3 },\n    // { key: \"debug2\", color: \"#F68B24\", width: 2 }\n]);\n\n\nclass ReportChart extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tracker: null,\n            timerange: noiseSeries.range(),\n            x: null,\n            y: null\n        };\n\n    }\n    handleTrackerChanged = tracker => {\n        if (!tracker) {\n            this.setState({ tracker, x: null, y: null });\n        } else {\n            this.setState({ tracker });\n        }\n    };\n\n    handleTimeRangeChange = timerange => {\n        this.setState({ timerange });\n    };\n\n    handleMouseMove = (x, y) => {\n        this.setState({ x, y });\n    };\n\n    render() {\n        const range = this.state.timerange;\n\n\n        return (\n            <div>\n\n                <p><strong>*Scroll up to Zoom in chart</strong></p>\n\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Resizable>\n                            <ChartContainer\n                                timeRange={range}\n                                timeAxisStyle={{\n                                    ticks: {\n                                        stroke: \"black\",\n                                        opacity: 0.25,\n                                        \"stroke-dasharray\": \"1,1\"\n                                        // Note: this isn't in camel case because this is\n                                        // passed into d3's style\n                                    },\n                                    values: {\n                                        fill: \"black\",\n                                        \"font-size\": 12\n                                    }\n                                }}\n                                showGrid={true}\n                                paddingRight={125}\n                                maxTime={noiseSeries.range().end()}\n                                minTime={noiseSeries.range().begin()}\n                                timeAxisAngledLabels={true}\n                                timeAxisHeight={65}\n                                onTrackerChanged={this.handleTrackerChanged}\n                                onBackgroundClick={() => this.setState({ selection: null })}\n                                enablePanZoom={true}\n                                onTimeRangeChanged={this.handleTimeRangeChange}\n                                onMouseMove={(x, y) => this.handleMouseMove(x, y)}\n                                minDuration={1000 * 60 * 60 * 24 * 30}\n                            >\n                                <ChartRow height=\"400\">\n                                    <YAxis\n                                        id=\"y\"\n                                        label=\"(dB) Noise Level\"\n                                        min={0}\n                                        max={100}\n                                        style={{\n                                            ticks: {\n                                                stroke: \"#AAA\",\n                                                opacity: 0.25,\n                                                \"stroke-dasharray\": \"1,1\"\n                                                // Note: this isn't in camel case because this is\n                                                // passed into d3's style\n                                            }\n       \n                                        }}\n                                        showGrid\n                                        hideAxisLine\n                                        width=\"50\"\n                                        type=\"linear\"\n                                        format=\"\"\n                                    />\n                                    <Charts>\n                                        <LineChart\n                                            axis=\"y\"\n                                            breakLine={false}\n                                            series={noiseSeries}\n                                            columns={[\"debug1\"]} //columns={[\"debug1\", \"debug2\"]}\n                                            style={style}\n                                            interpolation=\"curveBasis\"\n                                            highlight={this.state.highlight}\n                                            onHighlightChange={highlight =>\n                                                this.setState({ highlight })\n                                            }\n                                            selection={this.state.selection}\n                                            onSelectionChange={selection =>\n                                                this.setState({ selection })\n                                            }\n                                        />\n                                        <Baseline\n                                            axis=\"y\"\n                                            value={70}\n                                            label=\"Noise (dB) Level Cap\"\n                                            position=\"right\"\n\n                                        />\n                                    </Charts>\n                                </ChartRow>\n                            </ChartContainer>\n                        </Resizable>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <span>\n                            <Legend\n                                type=\"line\"\n                                align=\"right\"\n                                style={style}\n                                highlight={this.state.highlight}\n                                onHighlightChange={highlight => this.setState({ highlight })}\n                                selection={this.state.selection}\n                                onSelectionChange={selection => this.setState({ selection })}\n                                categories={[\n                                    { key: \"debug1\", label: \"User1 (Debug)\"},\n                                    // { key: \"debug2\", label: \"User2\"}\n                                ]}\n                            />\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n\n\n  \n  export default ReportChart;","import React from 'react';\nimport ReportTable from '../components/ReportTable';\nimport ReportChart from '../components/ReportChart';\nimport Button from 'react-bootstrap/Button';\n\n\nconst Report = () => {\n   var curr = new Date();\n   function printPage(e) {\n     e.preventDefault();\n     window.print();\n   }\n    return (\n       <div>\n        <div class=\"no-print print-btn\">\n          <Button variant=\"info\" size=\"lg\" onClick={printPage}>Print report</Button>\n        </div>\n\n          <h1>Your Noise Report Summary</h1>\n          {/*JS Date() declared January the 0th month*/}\n          <p>Report for: { curr.getMonth()+1 }/{ curr.getDate() }/{ curr.getFullYear() }</p>\n\n          <ReportChart/>\n          <ReportTable/>\n       </div>\n    );\n}\n\nexport default Report;\n","import React from 'react';\n\nconst Help = () => {\n    return (\n       <div>\n          <h1>Help</h1>\n          <p>Please contact UCI's team Chubby Cats.</p>\n          <p>ziv@uci.edu</p>\n       </div>\n    );\n}\n\nexport default Help;\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nimport {\n  BrowserRouter,\n  HashRouter,\n  Route,\n  Link,\n  NavLink,\n  Switch,\n  Redirect\n} from 'react-router-dom';\n\n//Pages\nimport Home from './pages/Home.js';\nimport Report from './pages/Report';\nimport Help from './pages/Help';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <HashRouter basename='/'>\n              <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" >\n                <Navbar.Brand as={Link} to=\"/\">React Demo App</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                  <Nav className=\"mr-auto\">\n                    <Nav.Link as={NavLink} to=\"/host-website\">Home</Nav.Link>\n                    <Nav.Link as={NavLink} to=\"/report\">Report</Nav.Link>\n                    <Nav.Link as={NavLink} to=\"/help\">Help</Nav.Link>\n                  </Nav>\n                </Navbar.Collapse>\n              </Navbar>\n              < br />\n              <Switch>\n                <Route exact path='/host-website' component={Home}/>\n                <Route exact path='/report' component={Report}/>\n                <Route exact path='/help' component={Help}/>\n                <Redirect from=\"/\" to=\"/host-website\"/>\n              </Switch>\n          </HashRouter>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(<Router>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}