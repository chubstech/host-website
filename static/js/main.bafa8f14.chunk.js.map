{"version":3,"sources":["components/IoTChart.js","pages/Home.js","components/ReportTable.js","components/ReportChart.js","pages/Report.js","pages/Help.js","App.js","serviceWorker.js","index.js","test-data-files sync /^/.*/.json$"],"names":["IoTChart","require","forEach","item","i","currentFile","dict","Object","labels","map","e","time_obs","db_reading","dateObj","Date","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","toString","padStart","data","canvas","document","createElement","chartId","id","heading1","chartLabel","createTextNode","appendChild","querySelector","context","getElementById","getContext","window","Chart","type","datasets","label","React","Component","Home","ReportTable","jsonfiles","table","row","values","o","peak","Math","max","apply","avg","round","reduce","a","b","length","push","listItems","rows","dr_data","esp32_data","nurse_data","patient_data","debug_data","getAvgHourlyData","json_data","sec_result","result","chart_index","final_result","activeHour","dbAvg","hourlyNumCount","time","getHours","time_list","time_stamps","prevTime","getCorrectTimestamp","s","indexOf","chartOptions","showScale","pointDot","title","display","text","fontSize","scales","yAxes","scaleLabel","labelString","ReportChart","props","chartReference","createRef","state","chartData","fill","backgroundColor","borderColor","ref","this","options","height","width","Report","curr","class","Button","variant","size","onClick","preventDefault","print","getMonth","getDate","getFullYear","Help","App","Container","basename","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","className","NavLink","exact","path","component","from","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","webpackContext","req","webpackContextResolve","__webpack_require__","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.bafa8f14.chunk.js","sourcesContent":["import React from 'react'\r\nimport Chart from \"chart.js\";\r\nvar Component = React.Component;\r\n\r\n\r\nexport default class IoTChart extends Component {\r\n    componentDidMount() {\r\n      var jsonfiles = require('../test-data-files/users.json');\r\n      jsonfiles.forEach((item, i) => {\r\n        var currentFile = require('../test-data-files/' + item + '.json')\r\n        var dict = new Object();\r\n\t\t\t\tvar labels = currentFile.map(function(e) {\r\n\t\t\t\t\tdict[e.time_obs] = e.db_reading;\r\n\t\t\t\t\tif(dict[e.time_obs] < e.db_reading)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdict[e.time_obs] = e.db_reading;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar dateObj = new Date(e.time_obs * 1000);\r\n\t\t\t\t\tvar hours = dateObj.getUTCHours();\r\n\t\t\t\t\t// Get minutes part from the timestamp\r\n\t\t\t\t\tvar minutes = dateObj.getUTCMinutes();\r\n\t\t\t\t\t// Get seconds part from the timestamp\r\n                    var seconds = dateObj.getUTCSeconds();\r\n                    //dateObj.toDateString() + \" \" + \r\n                    var formattedTime = hours.toString().padStart(2, '0') + ':' +\r\n                minutes.toString().padStart(2, '0') + ':' +\r\n                seconds.toString().padStart(2, '0');\r\n\t\t\t\t  return formattedTime\r\n\t\t\t\t});\r\n\t\t\t\tvar data = currentFile.map(function(e) {\r\n\t\t\t\t   return dict[e.time_obs]\r\n        });\r\n        var canvas = document.createElement('canvas'),\r\n        chartId = 'chart' + i;\r\n        canvas.id = chartId;\r\n        var heading1 = document.createElement(\"H2\"); //creates heading2 tag\r\n        var chartLabel = document.createTextNode(item); //creates label text\r\n        heading1.appendChild(chartLabel);//appends heading2 to the text\r\n        document.querySelector(\"#chartContainer\").appendChild(heading1); //appends label to chartContainer div\r\n        document.querySelector(\"#chartContainer\").appendChild(canvas);// appends chart to chartCOntainer div\r\n        //document.body.appendChild(canvas) //old code\r\n\r\n        var context = document.getElementById(chartId).getContext('2d');\r\n        window[chartId] = new Chart(context, {\r\n        type: 'line',\r\n        data: {\r\n            //Bring in data\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: \"DB Levels\",\r\n                    data: data,\r\n                }\r\n            ]\r\n        }\r\n      });\r\n\r\n      });\r\n\r\n\r\n  }\r\n  render() {\r\n      return (\r\n          <div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport IoTChart from '../components/IoTChart.js'\r\n\r\nconst Home = () => {\r\n    return (\r\n      <div>\r\n        <h1>Noise Manager WebApp</h1>\r\n        <p>Real time data of each section/device</p>\r\n            <div id=\"chartContainer\">\r\n                <IoTChart />\r\n            </div>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\n\r\nclass ReportTable extends React.Component {\r\n\r\n    render() {\r\n      var jsonfiles = require('../test-data-files/users.json');\r\n      var table = [];\r\n      jsonfiles.forEach((item, i) => {\r\n        var currentFile = require('../test-data-files/' + item + '.json')\r\n        var row = [];\r\n        var values = currentFile.map(function(o) {return o.db_reading;});\r\n        var peak = Math.max.apply(Math, values);\r\n        var avg = Math.round(values.reduce(function(a,b){return a+b;}, 0) / values.length);\r\n        // var avg = values.reduce(function(a,b){return a+b;}, 0) / values.length;\r\n        row.push(item, avg, peak);\r\n        table.push(row);\r\n      })\r\n      const listItems = table.map((rows) =>\r\n        <tr>\r\n        <td>{rows[0]}</td>\r\n        <td>{rows[1]} dB</td>\r\n        <td>{rows[2]} dB</td>\r\n        </tr>);\r\n\r\n        return (\r\n            <div>\r\n                <h3>Daily Summary Table</h3>\r\n                <table>\r\n                  <tr>\r\n                   <th>Device Location</th>\r\n                   <th>Average dB</th>\r\n                   <th>Peak dB</th>\r\n                  </tr>\r\n                  {listItems}\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n  export default ReportTable;\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst dr_data = require('./../test-data-files/Dr1.json');\r\nconst esp32_data = require('./../test-data-files/Esp32.json');\r\nconst nurse_data = require('./../test-data-files/Nurse1.json');\r\nconst patient_data = require('./../test-data-files/Patient1.json');\r\nconst debug_data = require('./../test-data-files/Debug.json');\r\n\r\n\r\nfunction getCorrectTimestamp( time_list ) { // Converts any time stamps 13-24 to Clockwise numbers i.e. 1-12\r\n    const time_stamps = [ [13, 1], [14, 2], [15, 3], [16, 4], [17, 5], [18, 6], [19, 7], [20, 8], [21, 9], [22, 10], [23, 11], [24, 12]];\r\n    for(let i = 0; i < time_list.length ; i++) {   \r\n        if( time_list[i][1] > 12 ) {\r\n            let prevTime = time_list[i][1];\r\n            for(let a = 0; a < time_stamps.length ; a++) { \r\n                if( time_stamps[a][0] == prevTime ) {  time_list[i][1] = time_stamps[a][1] }; \r\n        }\r\n        }\r\n    }\r\n    return time_list;\r\n}\r\n\r\nfunction getAvgHourlyData( json_data ) { //Gathers the db Levels of each hour from the json and finds avg db level per hr\r\n\r\n    let result = [];\r\n    let sec_result = [];\r\n    let chart_index = [8,9,10,11,12,1,2,3,4,5,6,7,8];\r\n    let final_result = [0,0,0,0,0,0,0,0,0,0,0,0, 0]\r\n    let activeHour = 0;\r\n    let dbAvg = 0;\r\n    let hourlyNumCount = 0;\r\n\r\n    for(let i = 0; i < json_data.length ; i++) {\r\n        var time = new Date( json_data[i].time_obs *1000 );\r\n        if( activeHour == 0 ) {\r\n            activeHour = time.getHours();\r\n        } else if ( time.getHours() != activeHour ) {\r\n            result.push( [Math.round(dbAvg / hourlyNumCount), activeHour ])\r\n            activeHour = time.getHours();\r\n            dbAvg = 0;\r\n            hourlyNumCount = 0;\r\n        } else if ( i == json_data.length-1 ) {\r\n            result.push( [Math.round(dbAvg / hourlyNumCount), activeHour ])\r\n        }\r\n        dbAvg+= json_data[i].db_reading;\r\n        hourlyNumCount++;\r\n        \r\n    }\r\n    sec_result = getCorrectTimestamp(result);\r\n\r\n    for( var s = 0; s<sec_result.length; s++){\r\n            let desiredIndex = chart_index.indexOf( sec_result[s][1] );\r\n            final_result[ desiredIndex ] = sec_result[s][0];\r\n    }\r\n    return final_result;\r\n\r\n}\r\n\r\nvar chartOptions = {\r\n    showScale: true,\r\n    pointDot: true,\r\n\r\n    title: {\r\n        display: true,\r\n        text: 'Average Noise Levels (Hourly)',\r\n        fontSize:20\r\n    },\r\n    scales: {\r\n        yAxes: [{\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Noise (dB) Levels'\r\n            }\r\n          }]\r\n       }\r\n\r\n}\r\n\r\n\r\nclass ReportChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.chartReference = React.createRef();\r\n        this.label = ['8AM','9AM','10AM','11AM','12PM','1PM','2PM','3PM','4PM','5PM','6PM','7PM','8PM'];\r\n        this.state = {\r\n            chartData:\r\n             {\r\n                labels: this.label,\r\n                datasets: [ \r\n                {\r\n                    label: \"Doctor 1\",\r\n                    fill:false,\r\n                    backgroundColor: 'rgb(25, 129, 102)',\r\n                    borderColor: 'rgb(25, 129, 102)',\r\n                    data: getAvgHourlyData( dr_data ), \r\n                },\r\n                {\r\n                    label: \"Debug\",\r\n                    fill:false,\r\n                    backgroundColor: 'rgba(171,185,255)',\r\n                    borderColor: 'rgba(171,185,255)',\r\n                    data: getAvgHourlyData( debug_data ), \r\n                },\r\n                {\r\n                    label: \"Esp32\",\r\n                    fill:false,\r\n                    backgroundColor: 'rgb(19, 72, 250)',\r\n                    borderColor: 'rgb(19, 72, 250)',\r\n                    data: getAvgHourlyData( esp32_data ), \r\n                },\r\n                {\r\n                    label: \"Nurse1\",\r\n                    fill:false,\r\n                    backgroundColor: 'rgb(174, 255, 171)',\r\n                    borderColor: 'rgb(174, 255, 171)',\r\n                    data: getAvgHourlyData( nurse_data ), \r\n                },\r\n                {\r\n                    label: \"Patient1\",\r\n                    fill:false,\r\n                    backgroundColor: 'rgb(255, 205, 139)',\r\n                    borderColor: 'rgb(255, 205, 139)',\r\n                    data: getAvgHourlyData( patient_data ), \r\n                }\r\n                ]\r\n             }\r\n        };\r\n\r\n    }\r\n\r\n        render() {\r\n\r\n            return (\r\n\r\n                <div>\r\n                    <Line \r\n                    ref={this.chartReference}\r\n                    data={this.state.chartData}\r\n                    options={chartOptions}\r\n                    height={240}\r\n                    width={600}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n  export default ReportChart;","import React from 'react';\r\nimport ReportTable from '../components/ReportTable';\r\nimport ReportChart from '../components/ReportChart';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst Report = () => {\r\n   var curr = new Date();\r\n   function printPage(e) {\r\n     e.preventDefault();\r\n     window.print();\r\n   }\r\n    return (\r\n       <div>\r\n        <div class=\"no-print print-btn\">\r\n          <Button variant=\"info\" size=\"lg\" onClick={printPage}>Print report</Button>\r\n        </div>\r\n\r\n          <h1>Your Noise Report Summary</h1>\r\n          {/*JS Date() declared January the 0th month*/}\r\n          <p>Report for: { curr.getMonth()+1 }/{ curr.getDate() }/{ curr.getFullYear() }</p>\r\n\r\n          <ReportChart/>\r\n          <ReportTable/>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Report;\r\n","import React from 'react';\r\n\r\nconst Help = () => {\r\n    return (\r\n       <div>\r\n          <h1>Help</h1>\r\n          <p>Please contact UCI's team Chubby Cats.</p>\r\n          <p>ziv@uci.edu</p>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Help;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nimport {\r\n  HashRouter,\r\n  Route,\r\n  Link,\r\n  NavLink,\r\n  Switch,\r\n  Redirect\r\n} from 'react-router-dom';\r\n\r\n//Pages\r\nimport Home from './pages/Home.js';\r\nimport Report from './pages/Report';\r\nimport Help from './pages/Help';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <HashRouter basename='/'>\r\n              <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" >\r\n                <Navbar.Brand as={Link} to=\"/\">React Demo App</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                  <Nav className=\"mr-auto\">\r\n                    <Nav.Link as={NavLink} to=\"/host-website\">Home</Nav.Link>\r\n                    <Nav.Link as={NavLink} to=\"/report\">Report</Nav.Link>\r\n                    <Nav.Link as={NavLink} to=\"/help\">Help</Nav.Link>\r\n                  </Nav>\r\n                </Navbar.Collapse>\r\n              </Navbar>\r\n              < br />\r\n              <Switch>\r\n                <Route exact path='/host-website' component={Home}/>\r\n                <Route exact path='/report' component={Report}/>\r\n                <Route exact path='/help' component={Help}/>\r\n                <Redirect from=\"/\" to=\"/host-website\"/>\r\n              </Switch>\r\n          </HashRouter>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(<Router>< App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","var map = {\n\t\"./Debug.json\": 55,\n\t\"./Dr1.json\": 56,\n\t\"./Esp32.json\": 57,\n\t\"./Nurse1.json\": 58,\n\t\"./Patient1.json\": 59,\n\t\"./users.json\": 40\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 54;"],"sourceRoot":""}