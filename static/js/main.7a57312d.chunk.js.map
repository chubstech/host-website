{"version":3,"sources":["components/IoTChart.js","components/AnaChart.js","pages/Home.js","components/ReportTable.js","components/ReportChart.js","pages/Report.js","pages/Help.js","App.js","serviceWorker.js","index.js","test-data-files sync /^/.//.*/.json$"],"names":["data","makeNiceTime","dateObj","hours","getHours","minutes","getMinutes","ampm","IoTChart","require","forEach","item","i","userType","baseAPIURL","fetch","then","response","json","makeAPIRequest","info","JSON","stringify","parse","current","date","Date","getFullYear","getMonth","getDate","getSeconds","getMilliseconds","getCurrentDate","dict","Object","filteredJson","filter","e","time_obs","labels","map","time","loudness","storage","nice","db_reading","keys","canvas","document","createElement","chartId","id","heading1","chartLabel","createTextNode","appendChild","querySelector","context","getElementById","getContext","window","Chart","type","datasets","label","React","Component","Home","ReportTable","jsonfiles","table","currentFile","row","values","o","peak","Math","max","apply","avg","round","reduce","a","b","length","peaktimes","push","toLocaleTimeString","listItems","rows","key","dr_data","esp32_data","nurse_data","patient_data","debug_data","getAvgHourlyData","json_data","sec_result","result","chart_index","final_result","activeHour","dbAvg","hourlyNumCount","time_list","time_stamps","prevTime","getCorrectTimestamp","s","indexOf","chartOptions","showScale","pointDot","title","display","text","fontSize","scales","yAxes","scaleLabel","labelString","ReportChart","props","chartReference","createRef","state","chartData","fill","backgroundColor","borderColor","ref","this","options","height","width","Report","curr","className","Button","variant","size","onClick","preventDefault","print","Help","App","Container","basename","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","NavLink","exact","path","component","from","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","webpackContext","req","webpackContextResolve","__webpack_require__","Error","code","resolve","module","exports"],"mappings":"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","file":"static/js/main.7a57312d.chunk.js","sourcesContent":["import React from 'react'\nimport Chart from \"chart.js\";\nvar Component = React.Component;\n\nvar data;\nfunction makeAPIRequest(userType) {\n    var baseAPIURL = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/';\n    baseAPIURL = baseAPIURL + userType;\n    return fetch(baseAPIURL)\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\nfunction getCurrentDate()\n{\n  var toBuild;\n  var date = new Date();\n  toBuild = new Date(date.getFullYear(), date.getMonth(), date.getDate()-1, date.getHours()-2, date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n  return toBuild;\n}\n\nfunction getLoudestOne(time, loudness, storage)\n{\n  if(time in storage)\n  {\n    if(storage[time] < loudness)\n    {\n      storage[time] = loudness\n    }\n  }\n  else {\n      storage[time] = loudness\n  }\n}\n\nfunction makeNiceTime(dateObj)\n{\n  var hours = dateObj.getHours();\n  // Get minutes part from the timestamp\n  var minutes = dateObj.getMinutes();\n  // Get seconds part from the timestamp\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0'+minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n\n}\n\nexport default class IoTChart extends Component {\n    componentDidMount() {\n        var jsonfiles = require('../test-data-files/users.json');//iterates through list of user\n        jsonfiles.forEach((item, i) => {\n            var promiseA = makeAPIRequest(item).then(info => {\n                var json = JSON.stringify(info);\n                json = JSON.parse(json);\n                var current = getCurrentDate();\n                var dict = new Object();\n                var filteredJson = json.filter(function(e){\n                  var tempTimeStampDate = new Date(e.time_obs * 1000);\n                  if(tempTimeStampDate >= current){\n                    return e.time_obs\n                    }\n                  }\n                );\n                var dict = new Object();\n                var labels = filteredJson.map(function(e)\n                {\n                  var timeStampDate = new Date(e.time_obs * 1000);\n                  var nice = makeNiceTime(timeStampDate)\n                  getLoudestOne(nice, e.db_reading, dict);\n                  return Object.keys(dict)[0];\n                });\n                data = filteredJson.map(function(e)\n                {\n                  var timeStampDate = new Date(e.time_obs * 1000);\n                  var nice = makeNiceTime(timeStampDate)\n                  return dict[nice];\n                });\n                var canvas = document.createElement('canvas'),\n                chartId = 'chart' + i;\n                canvas.id = chartId;\n                var heading1 = document.createElement(\"H2\"); //creates heading2 tag\n                var chartLabel = document.createTextNode(item); //creates label text\n                heading1.appendChild(chartLabel);//appends heading2 to the text\n                document.querySelector(\"#chartContainer\").appendChild(heading1); //appends label to chartContainer div\n                document.querySelector(\"#chartContainer\").appendChild(canvas);// appends chart to chartCOntainer div\n                //document.body.appendChild(canvas) //old code\n\n                var context = document.getElementById(chartId).getContext('2d');\n                window[chartId] = new Chart(context, {\n                type: 'line',\n                    data: {\n                        //Bring in data\n                        labels: labels,\n                        datasets: [\n                            {\n                                label: \"DB Levels\",\n                                data: data,\n                            }\n                        ]\n                    }\n                });\n\n            });\n\n        });\n    }\n  render() {\n      return (\n          <div>\n          </div>\n      )\n  }\n}\n","import React from 'react'\nimport Chart from \"chart.js\";\nvar Component = React.Component;\n\nfunction makeAPIRequest(userType) {\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/Patient1')\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            //console.log(json);\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\nexport default class AnaChart extends Component {\n    chartRef = React.createRef();\n\n    componentDidMount() {\n        //console.log(makeAPIRequest(\"dummyInput\")); //makeAPI request works and user is able to see data after waiting in console only\n        \n        var promiseA =\n            makeAPIRequest(\"Patient1\").then(info => {\n                //console.log(info);\n                var json = JSON.stringify(info);\n                json = JSON.parse(json);\n                //console.log(json);\n                //console.log(typeof json);\n                var dataDict = new Object();\n                var dataArr = [];\n                for (var i = 0; i < json.length; i++) {\n                    //console.log(json[i].time_obs);\n                    dataDict[json[i].time_obs] = json[i].db_reading;\n                    dataArr.push(json[i]);\n                    \n                }\n                //console.log(dataDict);\n                //console.log(dataArr); \n\n                const myChartRef = this.chartRef.current.getContext(\"2d\"); //creates a 2D chart\n                var labels = dataArr.map(function (e) { //generates the labels for the data\n                    var dateObj = new Date(e.time_obs * 1000); //converts Unix Time Stamp to date object and places it in variable dateObj\n                    //console.log(dateObj.toDateString);\n                    var hours = dateObj.getUTCHours(); // variable hours (label) is assigned\n                    var minutes = dateObj.getUTCMinutes(); //variable mins (label) is assigned\n\n                    // Get seconds part from the timestamp\n                    var seconds = dateObj.getUTCSeconds(); // variable seconds (label) is assigned\n                    //dateObj.toDateString() + \" \" + \n                    var formattedTime = hours.toString().padStart(2, '0') + ':' + ///formats the time into a more readable maner HH:MM:SS 24HRS Mode using the variables we created earlier\n                        minutes.toString().padStart(2, '0') + ':' +\n                        seconds.toString().padStart(2, '0');\n                    return formattedTime //returns the string with the readable time\n                });\n                var data = dataArr.map(function (e) {\n                    return e.db_reading;\n                });\n\n                new Chart(myChartRef, {\n                    type: \"line\",\n                    data: {\n                        //Bring in data\n                        labels: labels,\n                        datasets: [\n                            {\n                                label: \"DB Levels\",\n                                data: data,\n                            }\n                        ]\n                    },\n                    options: {\n                        //Customize chart options\n                    }\n                });\n            });\n    }\n    render() {\n        return (\n            <div>\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport '../App.css';\nimport IoTChart from '../components/IoTChart.js'\nimport AnaChart from '../components/AnaChart.js'\n\nconst Home = () => {\n    return (\n      <div>\n        <h1>Noise Manager WebApp</h1>\n            <p>Real time data of each section/device</p>\n            <div id=\"chartContainer\">\n                <IoTChart />\n            </div>\n      </div>\n    );\n\n}\n\nexport default Home;\n","import React from 'react';\n\n\nclass ReportTable extends React.Component {\n\n    render() {\n      var jsonfiles = require('../test-data-files/users.json');\n      var table = [];\n      jsonfiles.forEach((item, i) => {\n        var currentFile = require('../test-data-files/' + item + '.json')\n        var row = [];\n        var values = currentFile.map(function(o) {return o.db_reading;});\n        var peak = Math.max.apply(Math, values);\n        var avg = Math.round(values.reduce(function(a,b){return a+b;}, 0) / values.length);\n\n        var peaktimes = [];\n        currentFile.forEach((item, i) => {\n          if (item.db_reading == peak) {\n            var time = new Date(item.time_obs * 1000);\n            peaktimes.push(time.toLocaleTimeString(), \", \");\n          }\n        })\n        row.push(item, avg, peak, peaktimes);\n        table.push(row);\n      })\n\n      const listItems = table.map((rows) =>\n        <tr key={rows[0]}>\n        <td>{rows[0]}</td>\n        <td>{rows[1]} dB</td>\n        <td>{rows[2]} dB</td>\n        {/*display nicer without hardcoding \",\"*/}\n        <td>{rows[3]}</td>\n        </tr>);\n\n        return (\n            <div>\n                <h3>Daily Summary Table</h3>\n                <table>\n                <tbody>\n                  <tr>\n                   <th id=\"table-header\">Section Name</th>\n                   <th id=\"table-header\">Average dB</th>\n                   <th id=\"table-header\">Peak dB</th>\n                   <th id=\"table-header\">Peak dB Time</th>\n                  </tr>\n                  {listItems}\n                  </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n  export default ReportTable;\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nconst dr_data = require('./../test-data-files/Dr1.json');\nconst esp32_data = require('./../test-data-files/Esp32.json');\nconst nurse_data = require('./../test-data-files/Nurse1.json');\nconst patient_data = require('./../test-data-files/Patient1.json');\nconst debug_data = require('./../test-data-files/Debug.json');\n\n\nfunction getCorrectTimestamp( time_list ) { // Converts any time stamps 13-24 to Clockwise numbers i.e. 1-12\n    const time_stamps = [ [13, 1], [14, 2], [15, 3], [16, 4], [17, 5], [18, 6], [19, 7], [20, 8], [21, 9], [22, 10], [23, 11], [24, 12]];\n    for(let i = 0; i < time_list.length ; i++) {   \n        if( time_list[i][1] > 12 ) {\n            let prevTime = time_list[i][1];\n            for(let a = 0; a < time_stamps.length ; a++) { \n                if( time_stamps[a][0] == prevTime ) {  time_list[i][1] = time_stamps[a][1] }; \n        }\n        }\n    }\n    return time_list;\n}\n\nfunction getAvgHourlyData( json_data ) { //Gathers the db Levels of each hour from the json and finds avg db level per hr\n\n    let result = [];\n    let sec_result = [];\n    let chart_index = [8,9,10,11,12,1,2,3,4,5,6,7,8];\n    let final_result = [0,0,0,0,0,0,0,0,0,0,0,0, 0]\n    let activeHour = 0;\n    let dbAvg = 0;\n    let hourlyNumCount = 0;\n\n    for(let i = 0; i < json_data.length ; i++) {\n        var time = new Date( json_data[i].time_obs *1000 );\n        if( activeHour == 0 ) {\n            activeHour = time.getHours();\n        } else if ( time.getHours() != activeHour ) {\n            result.push( [Math.round(dbAvg / hourlyNumCount), activeHour ])\n            activeHour = time.getHours();\n            dbAvg = 0;\n            hourlyNumCount = 0;\n        } else if ( i == json_data.length-1 ) {\n            result.push( [Math.round(dbAvg / hourlyNumCount), activeHour ])\n        }\n        dbAvg+= json_data[i].db_reading;\n        hourlyNumCount++;\n        \n    }\n    sec_result = getCorrectTimestamp(result);\n\n    for( var s = 0; s<sec_result.length; s++){\n            let desiredIndex = chart_index.indexOf( sec_result[s][1] );\n            final_result[ desiredIndex ] = sec_result[s][0];\n    }\n    return final_result;\n\n}\n\nvar chartOptions = {\n    showScale: true,\n    pointDot: true,\n\n    title: {\n        display: true,\n        text: 'Average Noise Levels (Hourly)',\n        fontSize:20\n    },\n    scales: {\n        yAxes: [{\n            scaleLabel: {\n                display: true,\n                labelString: 'Noise (dB) Levels'\n            }\n          }]\n       }\n\n}\n\n\nclass ReportChart extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.chartReference = React.createRef();\n        this.label = ['8AM','9AM','10AM','11AM','12PM','1PM','2PM','3PM','4PM','5PM','6PM','7PM','8PM'];\n        this.state = {\n            chartData:\n             {\n                labels: this.label,\n                datasets: [ \n                {\n                    label: \"Doctor 1\",\n                    fill:false,\n                    backgroundColor: 'rgb(25, 129, 102)',\n                    borderColor: 'rgb(25, 129, 102)',\n                    data: getAvgHourlyData( dr_data ), \n                },\n                {\n                    label: \"Debug\",\n                    fill:false,\n                    backgroundColor: 'rgba(171,185,255)',\n                    borderColor: 'rgba(171,185,255)',\n                    data: getAvgHourlyData( debug_data ), \n                },\n                {\n                    label: \"Esp32\",\n                    fill:false,\n                    backgroundColor: 'rgb(19, 72, 250)',\n                    borderColor: 'rgb(19, 72, 250)',\n                    data: getAvgHourlyData( esp32_data ), \n                },\n                {\n                    label: \"Nurse1\",\n                    fill:false,\n                    backgroundColor: 'rgb(174, 255, 171)',\n                    borderColor: 'rgb(174, 255, 171)',\n                    data: getAvgHourlyData( nurse_data ), \n                },\n                {\n                    label: \"Patient1\",\n                    fill:false,\n                    backgroundColor: 'rgb(255, 205, 139)',\n                    borderColor: 'rgb(255, 205, 139)',\n                    data: getAvgHourlyData( patient_data ), \n                }\n                ]\n             }\n        };\n\n    }\n\n        render() {\n\n            return (\n\n                <div>\n                    <Line \n                    ref={this.chartReference}\n                    data={this.state.chartData}\n                    options={chartOptions}\n                    height={240}\n                    width={600}\n                    />\n                </div>\n            );\n        }\n    }\n\n\n  export default ReportChart;","import React from 'react';\nimport ReportTable from '../components/ReportTable';\nimport ReportChart from '../components/ReportChart';\nimport Button from 'react-bootstrap/Button';\n\n\nconst Report = () => {\n   var curr = new Date();\n   function printPage(e) {\n     e.preventDefault();\n     window.print();\n   }\n    return (\n       <div>\n        <div className=\"no-print print-btn\">\n          <Button variant=\"info\" size=\"lg\" onClick={printPage}>Print report</Button>\n        </div>\n\n          <h1>Your Noise Report Summary</h1>\n          {/*JS Date() declared January the 0th month*/}\n          <p>Report for: { curr.getMonth()+1 }/{ curr.getDate() }/{ curr.getFullYear() }</p>\n\n          <ReportChart/>\n          <br></br>\n          <br></br>\n          <ReportTable/>\n       </div>\n    );\n}\n\nexport default Report;\n","import React from 'react';\n\nconst Help = () => {\n    return (\n       <div>\n          <h1>Help</h1>\n          <p>Please contact UCI's team Chubby Cats.</p>\n          <p>ziv@uci.edu</p>\n       </div>\n    );\n}\n\nexport default Help;\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nimport {\n  HashRouter,\n  Route,\n  Link,\n  NavLink,\n  Switch,\n  Redirect\n} from 'react-router-dom';\n\n//Pages\nimport Home from './pages/Home.js';\nimport Report from './pages/Report';\nimport Help from './pages/Help';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <HashRouter basename='/'>\n              <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" >\n                <Navbar.Brand as={Link} to=\"/\">React Demo App</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                  <Nav className=\"mr-auto\">\n                    <Nav.Link as={NavLink} to=\"/host-website\">Home</Nav.Link>\n                    <Nav.Link as={NavLink} to=\"/report\">Report</Nav.Link>\n                    <Nav.Link as={NavLink} to=\"/help\">Help</Nav.Link>\n                  </Nav>\n                </Navbar.Collapse>\n              </Navbar>\n              < br />\n              <Switch>\n                <Route exact path='/host-website' component={Home}/>\n                <Route exact path='/report' component={Report}/>\n                <Route exact path='/help' component={Help}/>\n                <Redirect from=\"/\" to=\"/host-website\"/>\n              </Switch>\n          </HashRouter>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var map = {\n\t\"./Debug.json\": 54,\n\t\"./Dr1.json\": 55,\n\t\"./Esp32.json\": 56,\n\t\"./Nurse1.json\": 57,\n\t\"./Patient1.json\": 58,\n\t\"./users.json\": 40\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 91;"],"sourceRoot":""}