{"version":3,"sources":["components/IoTChart.js","components/AnaChart.js","pages/Home.js","components/ReportTableAPI.js","components/ReportChart.js","pages/Report.js","pages/Help.js","App.js","serviceWorker.js","index.js"],"names":["IoTChart","fetch","then","response","json","devices","jsonUsers","JSON","stringify","parse","console","log","map","e","user_id","userType","baseAPIURL","makeAPIRequest","info","today","Math","floor","Date","getTime","past","round","filteredJson","filter","time_obs","dict","Object","time","loudness","unixStorage","niceTime","dateObj","hours","getHours","minutes","getMinutes","ampm","makeNiceTime","db_reading","canvas","document","createElement","chartId","id","heading1","chartLabel","createTextNode","appendChild","querySelector","context","getElementById","getContext","window","Chart","type","data","labels","keys","reverse","datasets","label","values","options","title","display","text","scales","xAxes","ticks","maxTicksLimit","yAxes","beginAtZero","React","Component","Home","color_count","createDataset","user_file","user","colors","help","json_data","peak","peaktimes","avg","avgBase","result","activeHour","dbAvg","hourlyNumCount","final_result","i","length","push","toLocaleString","s","getAvgHourlyData","fill","backgroundColor","borderColor","chartOptions","showScale","pointDot","fontSize","scaleLabel","labelString","ReportChart","props","changeText","state","setState","chartReference","createRef","chartData","json_files","dataset_list","forEach","item","dataset","className","ref","this","height","width","key","Report","curr","Button","variant","size","onClick","preventDefault","print","toLocaleDateString","Help","App","Container","basename","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","NavLink","exact","path","component","from","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.686368dc.chunk.js","sourcesContent":["import React from 'react'\nimport Chart from \"chart.js\";\nvar Component = React.Component;\n\nvar data;\nfunction makeAPIRequest(userType) {\n    var baseAPIURL = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/';\n    baseAPIURL = baseAPIURL + userType;\n    return fetch(baseAPIURL)\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\nfunction makeAPIRequestUsers() {\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\nfunction getLoudestOne(time, loudness, unixStorage)\n{\n    if(time in unixStorage){\n        if (unixStorage[time] < loudness) {\n            unixStorage[time] = loudness\n        }\n    }\n    else {\n        unixStorage[time] = loudness\n    }\n}\n\nfunction makeNiceTime(dateObj)\n{\n  var hours = dateObj.getHours();\n  // Get minutes part from the timestamp\n  var minutes = dateObj.getMinutes();\n  // Get seconds part from the timestamp\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0'+minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n\n}\n\nexport default class IoTChart extends Component {\n    componentDidMount() {\n        var promiseA = makeAPIRequestUsers().then(devices => { //uncomment once we are ready to use api to call for user list\n            //var jsonFiles = require('../test-data-files/users.json');//iterates through list of user\n            var jsonUsers = JSON.stringify(devices); //uncomment once we are ready to use api to call for user list\n            jsonUsers = JSON.parse(jsonUsers); //uncomment once we are ready to use api to call for user list\n            console.log(jsonUsers); //uncomment once we are ready to use api to call for user list\n            var count = 0;\n            jsonUsers.map(function (e) { //uncomment once we are ready to use api to call for user list\n            console.log(e.user_id);\n                                //jsonFiles.forEach((item, i) => { //comment once we are ready to use api to call for user list\n                        var promiseB = makeAPIRequest(e.user_id).then(info => { //uncomment once we are ready to use api to call for user list\n                          //  var promiseB = makeAPIRequest(info).then(info => {\n                                var json = JSON.stringify(info);\n                                json = JSON.parse(json);\n                                var today = Math.floor(new Date().getTime()/1000.0);\n                                var past = Math.round(today - 7200); //past 2 hours in epoch time\n                                var filteredJson = json.filter(function (e) {\n                                    if (e.time_obs >= past && e.time_obs < today) {\n                                        return e.time_obs;\n                                    }\n                                }\n                              );\n                                console.log(filteredJson);\n                                var dict = new Object();\n                                filteredJson.map(function (e) {\n                                    var timeStampDate = new Date(e.time_obs * 1000);\n                                    var niceTime = makeNiceTime(timeStampDate);\n                                    getLoudestOne(niceTime, e.db_reading, dict);\n                                });\n                                var canvas = document.createElement('canvas'),\n                                chartId = 'chart' + e.user_id;\n                                canvas.id = chartId;\n                                var heading1 = document.createElement(\"H2\"); //creates heading2 tag\n                                var chartLabel = document.createTextNode(e.user_id); //creates label text //uncomment once we are ready to call api for user list\n                                //var chartLabel = document.createTextNode(item); //creates label text //comment once we are ready to call api for user list\n                                heading1.appendChild(chartLabel);//appends heading2 to the text\n                                document.querySelector(\"#chartContainer\").appendChild(heading1); //appends label to chartContainer div\n                                document.querySelector(\"#chartContainer\").appendChild(canvas);// appends chart to chartCOntainer div\n                                //document.body.appendChild(canvas) //old code\n\n                                var context = document.getElementById(chartId).getContext('2d');\n                                window[chartId] = new Chart(context, {\n                                    type: 'line',\n                                    data: {\n                                        //Bring in data\n                                        labels: Object.keys(dict).reverse(),\n                                        datasets: [\n                                            {\n                                                label: \"DB Levels\",\n                                                data: Object.values(dict).reverse(),\n                                            }\n                                        ]\n                                    },\n                                    options: {\n                                        title: {\n                                            display: true,\n                                            //text: item //comment once we are ready to use api to call for user list\n                                            text: e.user_id //uncomment once we are ready to use api to call for user list\n                                        },\n                                        scales: {\n                                            xAxes: [{\n                                                ticks: {\n                                                    maxTicksLimit: 20\n                                                }\n                                            }],\n                                            yAxes: [{\n                                                ticks: {\n                                                    beginAtZero: true\n                                                }\n                                            }]\n                                        }\n                                    }\n                                });\n\n                            //});\n                        }); //uncomment once we are ready to use api to call for user list\n                    //}); //comment once we are ready to use api to call for user list\n            }); //uncomment once we are ready to use api to call for user list\n        }); //uncomment once we are ready to use api to call for user list\n\n    }\n  render() {\n      return (\n          <div>\n          </div>\n      )\n  }\n}\n","import React from 'react'\nimport Chart from \"chart.js\";\nvar Component = React.Component;\n\nfunction makeAPIRequest(userType) {\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/Patient1')\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            //console.log(json);\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\nexport default class AnaChart extends Component {\n    chartRef = React.createRef();\n\n    componentDidMount() {\n        //console.log(makeAPIRequest(\"dummyInput\")); //makeAPI request works and user is able to see data after waiting in console only\n        \n        var promiseA =\n            makeAPIRequest(\"Patient1\").then(info => {\n                //console.log(info);\n                var json = JSON.stringify(info);\n                json = JSON.parse(json);\n                //console.log(json);\n                //console.log(typeof json);\n                var dataDict = new Object();\n                var dataArr = [];\n                for (var i = 0; i < json.length; i++) {\n                    //console.log(json[i].time_obs);\n                    dataDict[json[i].time_obs] = json[i].db_reading;\n                    dataArr.push(json[i]);\n                    \n                }\n                //console.log(dataDict);\n                //console.log(dataArr); \n\n                const myChartRef = this.chartRef.current.getContext(\"2d\"); //creates a 2D chart\n                var labels = dataArr.map(function (e) { //generates the labels for the data\n                    var dateObj = new Date(e.time_obs * 1000); //converts Unix Time Stamp to date object and places it in variable dateObj\n                    //console.log(dateObj.toDateString);\n                    var hours = dateObj.getUTCHours(); // variable hours (label) is assigned\n                    var minutes = dateObj.getUTCMinutes(); //variable mins (label) is assigned\n\n                    // Get seconds part from the timestamp\n                    var seconds = dateObj.getUTCSeconds(); // variable seconds (label) is assigned\n                    //dateObj.toDateString() + \" \" + \n                    var formattedTime = hours.toString().padStart(2, '0') + ':' + ///formats the time into a more readable maner HH:MM:SS 24HRS Mode using the variables we created earlier\n                        minutes.toString().padStart(2, '0') + ':' +\n                        seconds.toString().padStart(2, '0');\n                    return formattedTime //returns the string with the readable time\n                });\n                var data = dataArr.map(function (e) {\n                    return e.db_reading;\n                });\n\n                new Chart(myChartRef, {\n                    type: \"line\",\n                    data: {\n                        //Bring in data\n                        labels: labels,\n                        datasets: [\n                            {\n                                label: \"DB Levels\",\n                                data: data,\n                            }\n                        ]\n                    },\n                    options: {\n                        //Customize chart options\n                    }\n                });\n            });\n    }\n    render() {\n        return (\n            <div>\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport '../App.css';\nimport IoTChart from '../components/IoTChart.js'\nimport AnaChart from '../components/AnaChart.js'\n\nconst Home = () => {\n    return (\n      <div>\n        <h1>Noise Manager WebApp</h1>\n            <p>Real time data of each section/device</p>\n            <div id=\"chartContainer\">\n                <IoTChart />\n            </div>\n      </div>\n    );\n\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction makeAPIRequest(userType) {\n    var baseAPIURL = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/';\n    baseAPIURL = baseAPIURL + userType\n    return fetch(baseAPIURL)\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            return json;\n        });\n}\n\nfunction makeAPIRequestUsers() {\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            return json;\n        });\n}\n\nclass ReportTable extends React.Component {\n\n  componentDidMount() {\n    var curr = Math.floor(Date.now() / 1000);\n    // var pastDay =  Math.round(curr - 43200); //12 hours\n    var pastDay =  Math.round(curr - 86400); //24 hours\n    makeAPIRequestUsers()\n      .then((users) => {\n        var jsonUsers = JSON.stringify(users);\n        jsonUsers = JSON.parse(jsonUsers);\n        jsonUsers.forEach(function(e) {\n          makeAPIRequest(e.user_id)\n            .then((rawdata) => {\n              var data = JSON.stringify(rawdata);\n              data = JSON.parse(data);\n              var filteredJson = data.filter(function (e) {\n                if (e.time_obs >= pastDay && e.time_obs < curr) {\n                  return e.time_obs;\n                }\n              }\n              );\n\n              var peak = 0;\n              var avg = 0;\n              var peaktimes = {};\n\n              filteredJson.forEach((item, i) => {\n                avg += item.db_reading;\n                if (item.db_reading >= peak) {\n                  delete peaktimes[peak];\n                  peak = item.db_reading;\n                  var time = new Date(item.time_obs * 1000);\n                  if (peaktimes[item.db_reading]) {\n                    peaktimes[item.db_reading].push(time.toLocaleString());\n                  }\n                  else {\n                    peaktimes[item.db_reading] = [time.toLocaleString()];\n                  }\n                }\n              })\n              console.log(\"peaktimes\");\n              console.log(peaktimes);\n              var d1 = document.getElementById('table');\n              d1.insertAdjacentHTML('beforeend', '<tr><td>'+e.user_id+'</td><td>'+ Math.round(avg/data.length)+'</td><td>'+ peak +'</td><td>'+ peaktimes[peak] +'</tr>');\n            })\n        })\n      })\n  }\n\n    render() {\n        return (\n          <div>\n              <h3>Daily Summary Table</h3>\n              <table>\n              <tbody id=\"table\">\n                <tr>\n                 <th id=\"table-header\">Section Name</th>\n                 <th id=\"table-header\">Average dB</th>\n                 <th id=\"table-header\">Peak dB</th>\n                 <th id=\"table-header\">Peak dB Time</th>\n                </tr>\n                </tbody>\n              </table>\n          </div>\n        );\n  }\n}\nexport default ReportTable;\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport Button from 'react-bootstrap/Button';\nlet color_count = 0;\n\n\nfunction getAvgHourlyData( json_data ) { //Gathers the db Levels of each hour from the json and finds avg db level per hr\n  var peak = 0;\n  var peaktimes = {};\n  let avg = 0;\n  let avgBase = 0;\n\n    let result = [];\n    let activeHour = 0;\n    let dbAvg = 0;\n    let hourlyNumCount = 0;\n    // let chart_index = [0,1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12];\n    let final_result = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];//25\n    let activeDate = 0;\n\n    for(let i = 0; i < json_data.length ; i++) {\n        var time = new Date( json_data[i].time_obs *1000 );\n\n        if( activeHour == 0 ) {\n            activeHour = time.getHours();\n        } else if ( time.getHours() != activeHour ) {\n            result.push( [Math.round(dbAvg / hourlyNumCount), activeHour ])\n            activeHour = time.getHours();\n            dbAvg = 0;\n            hourlyNumCount = 0;\n        } else if ( i == json_data.length-1 ) {\n            result.push( [Math.round(dbAvg / hourlyNumCount), activeHour ])\n        }\n        dbAvg+= json_data[i].db_reading;\n        if (json_data[i].db_reading >= peak) {\n          delete peaktimes[peak];\n          peak = json_data[i].db_reading;\n          if (peaktimes[json_data[i].db_reading]) {\n            peaktimes[json_data[i].db_reading].push(time.toLocaleString());\n          }\n          else {\n            peaktimes[json_data[i].db_reading] = [time.toLocaleString()];\n          }\n        }\n        hourlyNumCount++;\n\n    }\n    for( var s = 0; s < result.length; s++){ // Loops through the list to put it on the final list that is shown in the data\n            let desiredIndex = result[s][1] ;\n            final_result[ desiredIndex ] = result[s][0];\n            if (result[s][0] !== 0) {\n              avg += result[s][0];\n              avgBase++;\n            }\n    }\n    return [final_result, Math.round(avg/avgBase), peak, peaktimes[peak]];\n\n}\n\nfunction createDataset( user_file, user ) { //Creates a dataset given the json file\n\n    const colors = [ 'rgb(25, 129, 102)', 'rgba(171,185,255)', 'rgb(19, 72, 250)', 'rgb(174, 255, 171)', 'rgb(255, 205, 139)', 'rgb(252, 58, 113)', 'rgb(232, 222, 46)', 'rgb(178, 62, 207)', 'rgb(158, 56, 5)'];\n    var help = getAvgHourlyData( user_file )\n    let result = {\n        label: user,\n        fill:false,\n        backgroundColor: colors[color_count],\n        borderColor: colors[color_count],\n        data: help[0],\n        avg: help[1],\n        peak: help[2],\n        peaktimes: help[3]\n    };\n    color_count++;\n    return result;\n}\n\n\n\nvar chartOptions = {\n    showScale: true,\n    pointDot: true,\n    title: {\n        display: true,\n        text: 'Average Noise Levels in the Past 24 Hours (Hourly)',\n        fontSize:20\n    },\n    scales: {\n        yAxes: [{\n            scaleLabel: {\n                display: true,\n                labelString: 'Noise (dB) Levels'\n            }\n          }]\n       }\n\n}\n\nfunction makeAPIRequest(userType) {\n    let api_site = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/'+ userType;\n    return fetch( api_site )\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\n\nfunction makeAPIRequestUsers() {\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\n\n\nclass ReportChart extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.chartReference = React.createRef();\n        this.label = ['12AM', '1AM', '2AM', '3AM', '4AM', '5AM', '6AM', '7AM', '8AM','9AM','10AM','11AM','12PM','1PM','2PM','3PM','4PM','5PM','6PM','7PM','8PM', '9PM', '10PM', '11PM'];\n        this.state = {\n            text: 'Weekly Report',\n            chartData:\n             {\n                labels: this.label,\n                datasets: []\n             },\n             json_files: []\n        };\n\n    }\n\n    changeText = () => { //Changes text whenever the button is clicked -- going to add the functionality to switch graphs\n        if ( this.state.text == 'Weekly Report' ) {\n            this.setState({ text: 'Daily Report' });\n        } else {\n            this.setState({ text: 'Weekly Report' });\n\n        }\n      }\n\n\n\n    componentDidMount() { //Sets the state of datasets from the json files that are present\n\n        let dataset_list = [];\n\n        var promiseA = makeAPIRequestUsers().then(devices => { // Makes API request to get current users list\n            var jsonUsers = JSON.stringify(devices);\n            jsonUsers = JSON.parse(jsonUsers);\n            jsonUsers.forEach((item, i) => {\n                var api_data = makeAPIRequest(item.user_id).then(info => { //Loops through each user to create dataset and pushes it to the state\n                    var json = JSON.stringify(info);\n                    json = JSON.parse(json);\n                    var dataset = createDataset( json, json[0].user_id );\n                                                              console.log(dataset);\n                    dataset_list.push( dataset);\n                    if ( dataset_list.length == jsonUsers.length) {\n                        this.setState({\n                            chartData: {\n                                datasets: dataset_list\n                            }\n                        });\n                        return dataset_list;\n                    }\n                });\n        });\n\n\n    });\n\n}\n        render() {\n            return (\n              <div>\n                <div className='lineChart'>\n                    <Line\n                    ref={this.chartReference}\n                    data={this.state.chartData}\n                    options={chartOptions}\n                    height={250}\n                    width={600}\n                    />\n                </div>\n                <br></br><br></br>\n                <div>\n                    <h3>Daily Summary Table</h3>\n                    <table>\n                    <tbody>\n                      <tr>\n                       <th id=\"table-header\">Section Name</th>\n                       <th id=\"table-header\">Average dB</th>\n                       <th id=\"table-header\">Peak dB</th>\n                       <th id=\"table-header\">Peak dB Time</th>\n                      </tr>\n                      {this.state.chartData.datasets.map((item) =>\n                        <tr key={item.label}>\n                        <td>{item.label}</td>\n                        <td>{item.avg}</td>\n                        <td> {item.peak}</td>\n                        <td>{item.peaktimes}</td>\n                        </tr>\n                      )}\n                      </tbody>\n                    </table>\n                </div>\n                </div>\n            );\n        }\n    }\n\n\n  export default ReportChart;\n","import React from 'react';\nimport ReportTable from '../components/ReportTableAPI';\nimport ReportChart from '../components/ReportChart';\nimport Button from 'react-bootstrap/Button';\n\n\nconst Report = () => {\n   var curr = new Date();\n   function printPage(e) {\n     e.preventDefault();\n     window.print();\n   }\n    return (\n       <div>\n        <div className=\"no-print print-btn\">\n          <Button variant=\"info\" size=\"lg\" onClick={printPage}>Print report</Button>\n        </div>\n\n          <h1>Your Noise Report Summary</h1>\n          <p>Generated on <b>{ curr.toLocaleDateString() }</b></p>\n\n          <ReportChart/>\n          <br></br>\n          <br></br>\n          {/*<ReportTable/>*/}\n       </div>\n    );\n}\n\nexport default Report;\n","import React from 'react';\n\nconst Help = () => {\n    return (\n       <div>\n          <h1>Help</h1>\n          <p>Please contact UCI's team Chubby Cats.</p>\n          <p>ziv@uci.edu</p>\n       </div>\n    );\n}\n\nexport default Help;\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nimport {\n  HashRouter,\n  Route,\n  Link,\n  NavLink,\n  Switch,\n  Redirect\n} from 'react-router-dom';\n\n//Pages\nimport Home from './pages/Home.js';\nimport Report from './pages/Report';\nimport Help from './pages/Help';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <HashRouter basename='/'>\n              <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" >\n                <Navbar.Brand as={Link} to=\"/\">React Demo App</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                  <Nav className=\"mr-auto\">\n                    <Nav.Link as={NavLink} to=\"/host-website\">Home</Nav.Link>\n                    <Nav.Link as={NavLink} to=\"/report\">Report</Nav.Link>\n                    <Nav.Link as={NavLink} to=\"/help\">Help</Nav.Link>\n                  </Nav>\n                </Navbar.Collapse>\n              </Navbar>\n              < br />\n              <Switch>\n                <Route exact path='/host-website' component={Home}/>\n                <Route exact path='/report' component={Report}/>\n                <Route exact path='/help' component={Help}/>\n                <Redirect from=\"/\" to=\"/host-website\"/>\n              </Switch>\n          </HashRouter>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}