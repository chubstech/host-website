{"version":3,"sources":["test-data-files sync /^/.*/.json$","components/IoTChart.js","pages/Home.js","components/ReportTable.js","js/styler.js","Legend.js","js/util.js","js/curve.js","components/LineChart.js","components/ReportChart.js","pages/Report.js","pages/Help.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","IoTChart","require","forEach","item","i","currentFile","dict","labels","time_obs","db_reading","dateObj","Date","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","toString","padStart","data","canvas","document","createElement","chartId","heading1","chartLabel","createTextNode","appendChild","querySelector","context","getElementById","getContext","window","Chart","type","datasets","label","React","Component","Home","ReportTable","jsonfiles","table","row","values","peak","Math","max","apply","avg","round","reduce","a","b","length","push","listItems","rows","Styler","columns","scheme","this","columnStyles","_","isArray","column","isString","key","isObject","style","columnNames","c","has","colorbrewer","colorScheme","columnCount","colorSchemeKeys","minSchemeSize","min","maxSchemeSize","colorLookupSize","numColumns","colorLookup","indexOf","columnName","color","width","dashed","styleSymbol","fill","opacity","stroke","cursor","strokeWidth","strokeDasharray","labelStyle","fontSize","paddingRight","valueStyle","legendStyle","symbol","normal","highlighted","selected","muted","value","styleLine","styleSelectedLine","styleArea","styleSelectedArea","line","area","fillStyle","selectedStyle","defaultStyle","LegendItem","stopPropagation","props","onSelectionChange","onHighlightChange","symbolWidth","symbolHeight","float","height","x1","y1","parseInt","x2","y2","x","y","rx","ry","w","h","radius","cx","cy","r","symbolStyle","itemKey","symbolType","renderSwatch","renderLine","renderDot","display","flexDirection","onClick","handleClick","onMouseMove","handleHover","onMouseLeave","handleHoverLeave","alignItems","Legend","category","isFunction","isHighlighted","highlight","isSelected","selection","isDisabled","disabled","mode","styleMap","providedStyle","styleMode","merge","items","categories","align","stack","justifyContent","marginBottom","flexWrap","defaultProps","scaleAsString","scale","domain","range","curveBasisClosed","curveBasisOpen","curveBasis","curveBundle","curveCardinalClosed","curveCardinalOpen","curveCardinal","curveCatmullRomClosed","curveCatmullRomOpen","curveCatmullRom","curveLinearClosed","curveLinear","curveMonotoneX","curveMonotoneY","curveNatural","curveStep","curveStepAfter","curveStepBefore","LineChart","nextProps","newSeries","series","oldSeries","timeScale","yScale","interpolation","widthChanged","timeScaleChanged","yAxisScaleChanged","interpolationChanged","highlightChanged","selectionChanged","columnsChanged","seriesChanged","size","TimeSeries","is","lineChartStyle","providedPathStyleMap","pointerEvents","path","curve","curves","d","pathStyle","pathLines","count","breakLine","currentPoints","events","timestamp","begin","getTime","end","get","isNull","isNaN","isFinite","renderPath","cleanedPoints","renderLines","visible","smooth","test_data","noiseSeries","name","points","result","time","buildPoints","ReportChart","handleTrackerChanged","tracker","setState","handleTimeRangeChange","timerange","handleMouseMove","state","className","timeRange","timeAxisStyle","ticks","showGrid","maxTime","minTime","timeAxisAngledLabels","timeAxisHeight","onTrackerChanged","onBackgroundClick","enablePanZoom","onTimeRangeChanged","minDuration","hideAxisLine","format","axis","position","Report","curr","class","Button","variant","preventDefault","print","getMonth","getDate","getFullYear","Help","App","Container","basename","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","NavLink","exact","component","from","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ffeb704f.chunk.js","sourcesContent":["var map = {\n\t\"./Debug.json\": 186,\n\t\"./Dr1.json\": 187,\n\t\"./Esp32.json\": 188,\n\t\"./Nurse1.json\": 189,\n\t\"./Patient1.json\": 190,\n\t\"./users.json\": 113\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 137;","import React from 'react'\r\nimport Chart from \"chart.js\";\r\nvar Component = React.Component;\r\n\r\n\r\nexport default class IoTChart extends Component {\r\n    componentDidMount() {\r\n      var jsonfiles = require('../test-data-files/users.json');\r\n      jsonfiles.forEach((item, i) => {\r\n        var currentFile = require('../test-data-files/' + item + '.json')\r\n        var dict = new Object();\r\n\t\t\t\tvar labels = currentFile.map(function(e) {\r\n\t\t\t\t\tdict[e.time_obs] = e.db_reading;\r\n\t\t\t\t\tif(dict[e.time_obs] < e.db_reading)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdict[e.time_obs] = e.db_reading;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar dateObj = new Date(e.time_obs * 1000);\r\n\t\t\t\t\tvar hours = dateObj.getUTCHours();\r\n\t\t\t\t\t// Get minutes part from the timestamp\r\n\t\t\t\t\tvar minutes = dateObj.getUTCMinutes();\r\n\t\t\t\t\t// Get seconds part from the timestamp\r\n                    var seconds = dateObj.getUTCSeconds();\r\n                    //dateObj.toDateString() + \" \" + \r\n                    var formattedTime = hours.toString().padStart(2, '0') + ':' +\r\n                minutes.toString().padStart(2, '0') + ':' +\r\n                seconds.toString().padStart(2, '0');\r\n\t\t\t\t  return formattedTime\r\n\t\t\t\t});\r\n\t\t\t\tvar data = currentFile.map(function(e) {\r\n\t\t\t\t   return dict[e.time_obs]\r\n        });\r\n        var canvas = document.createElement('canvas'),\r\n        chartId = 'chart' + i;\r\n        canvas.id = chartId;\r\n        var heading1 = document.createElement(\"H2\"); //creates heading2 tag\r\n        var chartLabel = document.createTextNode(item); //creates label text\r\n        heading1.appendChild(chartLabel);//appends heading2 to the text\r\n        document.querySelector(\"#chartContainer\").appendChild(heading1); //appends label to chartContainer div\r\n        document.querySelector(\"#chartContainer\").appendChild(canvas);// appends chart to chartCOntainer div\r\n        //document.body.appendChild(canvas) //old code\r\n\r\n        var context = document.getElementById(chartId).getContext('2d');\r\n        window[chartId] = new Chart(context, {\r\n        type: 'line',\r\n        data: {\r\n            //Bring in data\r\n            labels: labels,\r\n            datasets: [\r\n                {\r\n                    label: \"DB Levels\",\r\n                    data: data,\r\n                }\r\n            ]\r\n        }\r\n      });\r\n\r\n      });\r\n\r\n\r\n  }\r\n  render() {\r\n      return (\r\n          <div>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport IoTChart from '../components/IoTChart.js'\r\n\r\nconst Home = () => {\r\n    return (\r\n      <div>\r\n        <h1>Noise Manager WebApp</h1>\r\n        <p>Real time data of each section/device</p>\r\n            <div id=\"chartContainer\">\r\n                <IoTChart />\r\n            </div>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\n\r\nclass ReportTable extends React.Component {\r\n\r\n    render() {\r\n      var jsonfiles = require('../test-data-files/users.json');\r\n      var table = [];\r\n      jsonfiles.forEach((item, i) => {\r\n        var currentFile = require('../test-data-files/' + item + '.json')\r\n        var row = [];\r\n        var values = currentFile.map(function(o) {return o.db_reading;});\r\n        var peak = Math.max.apply(Math, values);\r\n        var avg = Math.round(values.reduce(function(a,b){return a+b;}, 0) / values.length);\r\n        // var avg = values.reduce(function(a,b){return a+b;}, 0) / values.length;\r\n        row.push(item, avg, peak);\r\n        table.push(row);\r\n      })\r\n      const listItems = table.map((rows) =>\r\n        <tr>\r\n        <td>{rows[0]}</td>\r\n        <td>{rows[1]} dB</td>\r\n        <td>{rows[2]} dB</td>\r\n        </tr>);\r\n\r\n        return (\r\n            <div>\r\n                <h3>Daily Summary Table</h3>\r\n                <table>\r\n                  <tr>\r\n                   <th>Device Location</th>\r\n                   <th>Average dB</th>\r\n                   <th>Peak dB</th>\r\n                  </tr>\r\n                  {listItems}\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n  export default ReportTable;\r\n","/**\r\n *  Copyright (c) 2016, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport _ from \"underscore\";\r\nimport colorbrewer from \"colorbrewer\";\r\n\r\n/**\r\n * For our Style we want to represent two things:\r\n *\r\n *   1. The overall style of an AreaChart should be consistent across a site\r\n *   2. The specific style of a columnName (e.g. \"pressure\") should be consistent\r\n *\r\n * The overall style is implemented with methods specific to\r\n * each chart type or entity:\r\n *\r\n *   - lineChartStyle()\r\n *   - areaChartStyle()\r\n *   - legendStyle()\r\n *   - etc\r\n *\r\n * These will render out an object that can be passed into the\r\n * charts themselves and will control the visual appearance,\r\n * keyed by columnName. This abstracts away the SVG details of the\r\n * underlying DOM elements.\r\n *\r\n * For the specific style we define here three out of the box parameters\r\n * by which one column can be different from another when rendered:\r\n *   - color\r\n *   - width (of a line)\r\n *   - dashed or not\r\n *\r\n */\r\nexport class Styler {\r\n    /**\r\n     * The columns define the style associated with a particular\r\n     * quantity, such as \"inTraffic\" or \"temperature\". The columns\r\n     * are an array, with each element being either a string, or\r\n     * and object defining the style.\r\n     *\r\n     *  * Using a string makes the assumption that you want to use a\r\n     * color scheme, so you need to define that if you don't want the\r\n     * default. A color will be then assigned to each column based\r\n     * on the scheme. The string is the column name.\r\n     *\r\n     *  * In the second case of providing an object, you define properties\r\n     * of the style yourself. Each object should contain a \"key\" property\r\n     * which is the column name and optionally the `width` and `dashed`\r\n     * property. If you don't supply the color, then the color\r\n     * will come from the scheme.\r\n     *\r\n     */\r\n    constructor(columns, scheme = \"Paired\") {\r\n        this.columnStyles = {};\r\n        if (_.isArray(columns)) {\r\n            columns.forEach(column => {\r\n                if (_.isString(column)) {\r\n                    this.columnStyles[column] = { key: column };\r\n                } else if (_.isObject(column)) {\r\n                    const { key, ...style } = column;\r\n                    this.columnStyles[key] = style;\r\n                }\r\n            });\r\n        }\r\n        this.columnNames = _.map(columns, c => {\r\n            const cc = _.isString(c) ? c : c.key;\r\n            return cc;\r\n        });\r\n\r\n        if (scheme && !_.has(colorbrewer, scheme)) {\r\n            throw new Error(`Unknown scheme '${scheme}' supplied to Style constructor`);\r\n        }\r\n        this.colorScheme = scheme;\r\n    }\r\n\r\n    numColumns() {\r\n        return this.columnNames.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the color scheme with the appropiate number of colors.\r\n     * If there are more columns than the largest set in the scheme then\r\n     * just the largest scheme set will be returned.\r\n     * If there are less columns than the smallest set in the scheme then\r\n     * just the smallest scheme will be returned.\r\n     * @param  {number} columnCount The number of columns to apply the scheme to\r\n     * @return {array}              An array with the scheme colors in it.\r\n     */\r\n    colorLookup(columnCount) {\r\n        const colorSchemeKeys = _.keys(colorbrewer[this.colorScheme]);\r\n        const minSchemeSize = _.min(colorSchemeKeys);\r\n        const maxSchemeSize = _.max(colorSchemeKeys);\r\n        let colorLookupSize = columnCount > maxSchemeSize ? maxSchemeSize : columnCount;\r\n        colorLookupSize = _.max([colorLookupSize, minSchemeSize]);\r\n        return this.colorScheme ? colorbrewer[this.colorScheme][colorLookupSize] : [];\r\n    }\r\n\r\n    /**\r\n     */\r\n    legendStyle(column, type) {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const i = _.indexOf(this.columnNames, column);\r\n        const columnName = this.columnNames[i];\r\n        const { color, width = 1, dashed = false } = this.columnStyles[columnName];\r\n        const c = color || colorLookup[i % colorLookup.length];\r\n\r\n        let styleSymbol = {};\r\n        if (type === \"swatch\" || type === \"dot\") {\r\n            styleSymbol = {\r\n                fill: c,\r\n                opacity: 0.9,\r\n                stroke: c,\r\n                cursor: \"pointer\"\r\n            };\r\n        } else if (type === \"line\") {\r\n            styleSymbol = {\r\n                opacity: 0.9,\r\n                stroke: c,\r\n                strokeWidth: width,\r\n                cursor: \"pointer\"\r\n            };\r\n            if (dashed) {\r\n                styleSymbol.strokeDasharray = \"4,2\";\r\n            }\r\n        }\r\n\r\n        const labelStyle = {\r\n            fontSize: \"normal\",\r\n            color: \"#333\",\r\n            paddingRight: 10,\r\n            cursor: \"pointer\"\r\n        };\r\n        const valueStyle = {\r\n            fontSize: \"smaller\",\r\n            color: \"#999\",\r\n            cursor: \"pointer\"\r\n        };\r\n        const legendStyle = {\r\n            symbol: {\r\n                normal: { ...styleSymbol, opacity: 0.7 },\r\n                highlighted: { ...styleSymbol, opacity: 0.8 },\r\n                selected: { ...styleSymbol, opacity: 0.8 },\r\n                muted: { ...styleSymbol, opacity: 0.2 }\r\n            },\r\n            label: {\r\n                normal: { ...labelStyle, opacity: 0.7 },\r\n                highlighted: { ...labelStyle, opacity: 0.8 },\r\n                selected: { ...labelStyle, opacity: 0.8 },\r\n                muted: { ...labelStyle, opacity: 0.5 }\r\n            },\r\n            value: {\r\n                normal: { ...valueStyle, opacity: 0.7 },\r\n                highlighted: { ...valueStyle, opacity: 0.8 },\r\n                selected: { ...valueStyle, opacity: 0.8 },\r\n                muted: { ...valueStyle, opacity: 0.5 }\r\n            }\r\n        };\r\n        return legendStyle;\r\n    }\r\n\r\n    areaChartStyle() {\r\n        const style = {};\r\n\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n\r\n        let i = 0;\r\n        _.forEach(this.columnStyles, ({ color, selected, width = 1, dashed = false }, column) => {\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const styleLine = {\r\n                stroke: c,\r\n                fill: \"none\",\r\n                strokeWidth: width\r\n            };\r\n            const styleSelectedLine = {\r\n                stroke: selected || color,\r\n                fill: \"none\",\r\n                strokeWidth: width\r\n            };\r\n            if (dashed) {\r\n                styleLine.strokeDasharray = \"4,2\";\r\n            }\r\n            const styleArea = {\r\n                fill: c,\r\n                stroke: \"none\"\r\n            };\r\n            const styleSelectedArea = {\r\n                fill: selected || color,\r\n                stroke: \"none\"\r\n            };\r\n            style[column] = {\r\n                line: {\r\n                    normal: { ...styleLine, opacity: 0.9 },\r\n                    highlighted: { ...styleLine, opacity: 1.0 },\r\n                    selected: { ...styleSelectedLine, opacity: 1.0 },\r\n                    muted: { ...styleLine, opacity: 0.4 }\r\n                },\r\n                area: {\r\n                    normal: { ...styleArea, opacity: 0.7 },\r\n                    highlighted: { ...styleArea, opacity: 0.8 },\r\n                    selected: { ...styleSelectedArea, opacity: 0.8 },\r\n                    muted: { ...styleArea, opacity: 0.2 }\r\n                }\r\n            };\r\n            i += 1;\r\n        });\r\n        return style;\r\n    }\r\n\r\n    lineChartStyle() {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const style = {};\r\n        _.forEach(this.columnStyles, ({ color, selected, width = 1, dashed = false }, column) => {\r\n            const i = _.indexOf(this.columnNames, column);\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const styleLine = {\r\n                stroke: c,\r\n                strokeWidth: width,\r\n                fill: \"none\"\r\n            };\r\n            const styleSelectedLine = {\r\n                stroke: selected || c,\r\n                strokeWidth: width,\r\n                fill: \"none\"\r\n            };\r\n\r\n            if (dashed) {\r\n                styleLine.strokeDasharray = \"4,2\";\r\n            }\r\n            style[column] = {\r\n                normal: { ...styleLine, opacity: 0.8, strokeWidth: width },\r\n                highlighted: { ...styleLine, opacity: 1.0, strokeWidth: width },\r\n                selected: { ...styleSelectedLine, opacity: 1.0, strokeWidth: width },\r\n                muted: { ...styleLine, opacity: 0.2, strokeWidth: width }\r\n            };\r\n        });\r\n        return style;\r\n    }\r\n\r\n    barChartStyle() {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const style = {};\r\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\r\n            const i = _.indexOf(this.columnNames, column);\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const fillStyle = {\r\n                fill: c\r\n            };\r\n            const selectedStyle = {\r\n                fill: selected || c\r\n            };\r\n            style[column] = {\r\n                normal: { ...fillStyle, opacity: 0.8 },\r\n                highlighted: { ...fillStyle, opacity: 1.0 },\r\n                selected: { ...selectedStyle, opacity: 1.0 },\r\n                muted: { ...fillStyle, opacity: 0.2 }\r\n            };\r\n        });\r\n        return style;\r\n    }\r\n\r\n    scatterChartStyle() {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const style = {};\r\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\r\n            const i = _.indexOf(this.columnNames, column);\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const fillStyle = {\r\n                fill: c\r\n            };\r\n            const selectedStyle = {\r\n                fill: selected || c\r\n            };\r\n            style[column] = {\r\n                normal: { ...fillStyle, opacity: 0.8 },\r\n                highlighted: { ...fillStyle, opacity: 1.0 },\r\n                selected: { ...selectedStyle, opacity: 1.0 },\r\n                muted: { ...fillStyle, opacity: 0.2 }\r\n            };\r\n        });\r\n        return style;\r\n    }\r\n\r\n    axisStyle(column) {\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n        const i = _.indexOf(this.columnNames, column);\r\n        const columnName = this.columnNames[i];\r\n        const { color } = this.columnStyles[columnName];\r\n        const c = color || colorLookup[i % colorLookup.length];\r\n        return {\r\n            label: {\r\n                fill: c\r\n            }\r\n        };\r\n    }\r\n\r\n    boxChartStyle() {\r\n        const style = {};\r\n\r\n        const numColumns = this.numColumns();\r\n        const colorLookup = this.colorLookup(numColumns);\r\n\r\n        let i = 0;\r\n        _.forEach(this.columnStyles, ({ color, selected }, column) => {\r\n            const c = color || colorLookup[i % colorLookup.length];\r\n            const styleArea = {\r\n                fill: c,\r\n                stroke: \"none\"\r\n            };\r\n            const styleSelectedArea = {\r\n                fill: selected || color,\r\n                stroke: \"none\"\r\n            };\r\n            style[column] = [\r\n                {\r\n                    normal: { ...styleArea, opacity: 0.2 },\r\n                    highlighted: { ...styleArea, opacity: 0.3 },\r\n                    selected: { ...styleSelectedArea, opacity: 0.3 },\r\n                    muted: { ...styleArea, opacity: 0.1 }\r\n                },\r\n                {\r\n                    normal: { ...styleArea, opacity: 0.5 },\r\n                    highlighted: { ...styleArea, opacity: 0.6 },\r\n                    selected: { ...styleSelectedArea, opacity: 0.6 },\r\n                    muted: { ...styleArea, opacity: 0.2 }\r\n                },\r\n                {\r\n                    normal: { ...styleArea, opacity: 0.9 },\r\n                    highlighted: { ...styleArea, opacity: 1.0 },\r\n                    selected: { ...styleSelectedArea, opacity: 1.0 },\r\n                    muted: { ...styleArea, opacity: 0.2 }\r\n                }\r\n            ];\r\n            i += 1;\r\n        });\r\n        return style;\r\n    }\r\n}\r\n\r\nexport default function styler(columns, scheme) {\r\n    return new Styler(columns, scheme);\r\n}","/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport _ from \"underscore\";\r\nimport merge from \"merge\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Styler } from \"../src/js/styler\";\r\n\r\nconst defaultStyle = {\r\n    symbol: {\r\n        normal: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 1 },\r\n        highlighted: { stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1 },\r\n        selected: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 2 },\r\n        muted: { stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1 }\r\n    },\r\n    label: {\r\n        normal: { fontSize: \"normal\", color: \"#333\" },\r\n        highlighted: { fontSize: \"normal\", color: \"#222\" },\r\n        selected: { fontSize: \"normal\", color: \"#333\" },\r\n        muted: { fontSize: \"normal\", color: \"#333\", opacity: 0.4 }\r\n    },\r\n    value: {\r\n        normal: { fontSize: \"normal\", color: \"#333\" },\r\n        highlighted: { fontSize: \"normal\", color: \"#222\" },\r\n        selected: { fontSize: \"normal\", color: \"#333\" },\r\n        muted: { fontSize: \"normal\", color: \"#333\", opacity: 0.4 }\r\n    }\r\n};\r\n\r\n/**\r\n * Legends are simple to define.\r\n *\r\n * First specify the styles you want each item to have. This is either\r\n * the CSS that should be appied to rendered symbol. Or you can provide\r\n * a Styler object. See below for full styling details.\r\n *\r\n * ```\r\n * const style = Styler([\r\n *     {key: \"aud\", color: \"steelblue\", width: 1, dashed: true},\r\n *     {key: \"euro\", color: \"#F68B24\", width: 2}\r\n * ]);\r\n * ```\r\n *\r\n * Next build a list of categories you want in the legend.\r\n *\r\n * ```\r\n * const categories = [\r\n *     {key: \"aust\", label: \"AUD\", value: \"1.52\", disabled: true},\r\n *     {key: \"usa\", label: \"USD\", value: \"1.43\", disabled: false}\r\n * ];\r\n * ```\r\n * For each category to display you must provide a key, a label and\r\n * if it should be displayed disabled or not.\r\n *\r\n * Then render the legend, with type either \"line\", \"swatch\" or \"dot\":\r\n *\r\n * ```\r\n * <Legend type=\"line\" style={style} categories={categories} />\r\n * ```\r\n *\r\n * Optionally you can also display a value below the label. This is\r\n * useful when hovering over another chart on the page, or to display\r\n * the current value of live data. You can see this defined in the\r\n * above categories.\r\n *\r\n * The legend can also be supplied with callback functions which will\r\n * tell you if the user has clicked or hovered over on one of the legend\r\n * items. You can use this to sync highlighting and selection to a\r\n * chart.\r\n *\r\n * ## Styling\r\n *\r\n * There are three methods of styling a legend:\r\n *  - using a Styler object\r\n *  - using an object containing inline styles\r\n *  - using a function which returns an inline style\r\n *\r\n * A Styler object can be supplied directly to the `style` prop\r\n * of the legend. This is the simplest approach, since you can\r\n * usually just use the same Styler as you use for your chart.\r\n *\r\n * Supplying an object to the `style` prop gives you more control\r\n * than the Styler, since you can provide the actual CSS properties\r\n * for each element of the legend. The format for the object is:\r\n *\r\n * ```\r\n * {\r\n *     columnName1: {\r\n      symbol: {\r\n        normal: {...styleSymbol},\r\n        highlighted: {...styleSymbol},\r\n        selected: {...styleSymbol},\r\n        muted: {...styleSymbol}\r\n      },\r\n      label: {\r\n        normal: {...labelStyle},\r\n        highlighted: {...labelStyle},\r\n        selected: {...labelStyle},\r\n        muted: {...labelStyle}\r\n      },\r\n      value: {\r\n        normal: {...valueStyle},\r\n        highlighted: {...valueStyle},\r\n        selected: {...valueStyle},\r\n        muted: {...valueStyle}\r\n      }\r\n *     },\r\n *     columnName2 : {\r\n *         ...\r\n *     },\r\n *     ...\r\n *  }\r\n *\r\n *  - symbolStyle is the CSS properties for the symbol, which\r\n * is either a swatch, dot or line. For a line, you'd want to\r\n * provide the SVG <line> properties, for a swatch you'd provide\r\n * the SVG <rect> properties and for a dot the <ellipse> properties.\r\n *  - labelStyle is the main label for the legend item. It is a\r\n *  SVG <text> element, so you can control the font properties.\r\n *  - valueStyle is the optional value. As with the labelStyle you\r\n *  this is an SVG <text> element.\r\n *\r\n * Finally, you can provide a function to the `style` prop. This\r\n * is similar to providing an object, except your function will\r\n * be called with the columnName and you should return the map\r\n * containing symbol, label and value styles.\r\n */\r\n\r\nclass LegendItem extends React.Component {\r\n    handleClick(e, key) {\r\n        e.stopPropagation();\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange(key);\r\n        }\r\n    }\r\n\r\n    handleHover(e, key) {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(key);\r\n        }\r\n    }\r\n\r\n    handleHoverLeave() {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(null);\r\n        }\r\n    }\r\n\r\n    renderLine(style) {\r\n        const { symbolWidth, symbolHeight } = this.props;\r\n        return (\r\n            <svg style={{ float: \"left\" }} width={symbolWidth} height={symbolHeight}>\r\n                <line\r\n                    style={style}\r\n                    x1={0}\r\n                    y1={parseInt(symbolWidth / 2, 10)}\r\n                    x2={symbolWidth}\r\n                    y2={parseInt(symbolWidth / 2, 10)}\r\n                    stroke=\"black\"\r\n                    strokeWidth=\"2\"\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    renderSwatch(style) {\r\n        const { symbolWidth, symbolHeight } = this.props;\r\n        return (\r\n            <svg style={{ float: \"left\" }} width={symbolWidth} height={symbolHeight}>\r\n                <rect\r\n                    style={style}\r\n                    x={2}\r\n                    y={2}\r\n                    width={symbolWidth - 4}\r\n                    height={symbolHeight - 4}\r\n                    rx={2}\r\n                    ry={2}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    renderDot(style) {\r\n        const { symbolWidth, symbolHeight } = this.props;\r\n        const w = parseInt(symbolWidth / 2, 10);\r\n        const h = parseInt(symbolHeight / 2, 10);\r\n        const radius = w * 0.75;\r\n\r\n        return (\r\n            <svg style={{ float: \"left\" }} width={symbolWidth} height={symbolHeight}>\r\n                <circle style={style} cx={w} cy={h} r={radius} />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { symbolStyle, labelStyle, valueStyle, itemKey, symbolType } = this.props;\r\n\r\n        let symbol;\r\n        switch (symbolType) {\r\n            case \"swatch\":\r\n                symbol = this.renderSwatch(symbolStyle);\r\n                break;\r\n            case \"line\":\r\n                symbol = this.renderLine(symbolStyle);\r\n                break;\r\n            case \"dot\":\r\n                symbol = this.renderDot(symbolStyle);\r\n                break;\r\n            default:\r\n            //pass\r\n        }\r\n\r\n        // TODO: We shouldn't be adding interactions to a element like this.\r\n        //       The alternative it to put it on a <a> or something?\r\n\r\n        return (\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\"\r\n                }}\r\n                key={itemKey}\r\n                onClick={e => this.handleClick(e, itemKey)}\r\n                onMouseMove={e => this.handleHover(e, itemKey)}\r\n                onMouseLeave={() => this.handleHoverLeave()}\r\n            >\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"row\",\r\n                        alignItems: \"center\"\r\n                    }}\r\n                >\r\n                    <div style={{ width: \"20px\" }}>{symbol}</div>\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\"\r\n                        }}\r\n                    >\r\n                        <div style={labelStyle}>{this.props.label}</div>\r\n                        <div style={valueStyle}>{this.props.value}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default class Legend extends React.Component {\r\n    handleClick(e, key) {\r\n        e.stopPropagation();\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange(key);\r\n        }\r\n    }\r\n\r\n    handleHover(e, key) {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(key);\r\n        }\r\n    }\r\n\r\n    handleHoverLeave() {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For each category item we get the users stle preference. This\r\n     * can be supplied in a number of ways:\r\n     *  * Typically you would get the legend stle from a Style instance\r\n     *  * Alternatively, you can pass in a style object which has your\r\n     *    category in it and the associated style\r\n     *  * Finally, the provided style can also be a function\r\n     */\r\n    providedStyle(category, type) {\r\n        let style = {};\r\n        if (this.props.style) {\r\n            if (this.props.style instanceof Styler) {\r\n                style = this.props.style.legendStyle(category.key, type);\r\n            } else if (_.isFunction(this.props.style)) {\r\n                style = this.props.style(category.key);\r\n            } else if (_.isObject(this.props.style)) {\r\n                style = this.props.style ? this.props.style[category.key] : defaultStyle;\r\n            }\r\n        }\r\n        return style;\r\n    }\r\n\r\n    /**\r\n     * For each category this function takes the current\r\n     * selected and highlighted item, along with the disabled\r\n     * state of the item, and returns the mode it should be\r\n     * rendered in: normal, selected, highlighted, or muted\r\n     */\r\n    styleMode(category) {\r\n        const isHighlighted = this.props.highlight && category.key === this.props.highlight;\r\n        const isSelected = this.props.selection && category.key === this.props.selection;\r\n        const isDisabled = category.disabled;\r\n\r\n        let mode = \"normal\";\r\n        if (this.props.selection) {\r\n            if (isSelected) {\r\n                mode = \"selected\";\r\n            } else if (isHighlighted) {\r\n                mode = \"highlighted\";\r\n            } else {\r\n                mode = \"muted\";\r\n            }\r\n        } else if (isHighlighted) {\r\n            mode = \"highlighted\";\r\n        } else if (isDisabled) {\r\n            mode = \"muted\";\r\n        }\r\n        return mode;\r\n    }\r\n\r\n    symbolStyle(category, type) {\r\n        const styleMap = this.providedStyle(category, type);\r\n        const styleMode = this.styleMode(category);\r\n        return merge(\r\n            true,\r\n            defaultStyle[styleMode],\r\n            styleMap.symbol ? styleMap.symbol[styleMode] : {}\r\n        );\r\n    }\r\n\r\n    labelStyle(category) {\r\n        const styleMap = this.providedStyle(category);\r\n        const styleMode = this.styleMode(category);\r\n        return merge(\r\n            true,\r\n            defaultStyle[styleMode],\r\n            styleMap.label ? styleMap.label[styleMode] : {}\r\n        );\r\n    }\r\n\r\n    valueStyle(category) {\r\n        const styleMap = this.providedStyle(category);\r\n        const styleMode = this.styleMode(category);\r\n        return merge(\r\n            true,\r\n            defaultStyle[styleMode],\r\n            styleMap.value ? styleMap.value[styleMode] : {}\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { type = \"swatch\", symbolWidth, symbolHeight } = this.props;\r\n        const items = this.props.categories.map(category => {\r\n            const { key, label, value, symbolType = type } = category;\r\n            const symbolStyle = this.symbolStyle(category, symbolType);\r\n            const labelStyle = this.labelStyle(category);\r\n            const valueStyle = this.valueStyle(category);\r\n            return (\r\n                <LegendItem\r\n                    key={key}\r\n                    type={type}\r\n                    itemKey={key}\r\n                    label={label}\r\n                    value={value}\r\n                    symbolType={symbolType}\r\n                    symbolWidth={symbolWidth}\r\n                    symbolHeight={symbolHeight}\r\n                    symbolStyle={symbolStyle}\r\n                    labelStyle={labelStyle}\r\n                    valueStyle={valueStyle}\r\n                    onSelectionChange={this.props.onSelectionChange}\r\n                    onHighlightChange={this.props.onHighlightChange}\r\n                />\r\n            );\r\n        });\r\n\r\n        const align = this.props.align === \"left\" ? \"flex-start\" : \"flex-end\";\r\n\r\n        if (this.props.stack) {\r\n            return (\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: align,\r\n                        flexDirection: \"column\",\r\n                        marginBottom: this.props.marginBottom\r\n                    }}\r\n                >\r\n                    {items}\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        justifyContent: align,\r\n                        flexWrap: \"wrap\",\r\n                        marginBottom: this.props.marginBottom\r\n                    }}\r\n                >\r\n                    {items}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nLegend.propTypes = {\r\n    /**\r\n     * The overall style of the legend items, either a color \"swatch\", a\r\n     * colored \"line\", or a \"dot\".\r\n     */\r\n    type: PropTypes.oneOf([\"swatch\", \"line\", \"dot\"]),\r\n\r\n    /**\r\n     * Alignment of the legend within the available space. Either left or right.\r\n     */\r\n    align: PropTypes.oneOf([\"left\", \"right\"]),\r\n\r\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.instanceOf(Styler)]),\r\n\r\n    /**\r\n     * The categories array specifies details and style for each item in the legend. For each item:\r\n     *  * \"key\" - (required) the name by which the legend will be known\r\n     *  * \"label\" - (required) the displayed label\r\n     *  * \"style\" - the swatch, dot, or line style. Typically you'd just\r\n     *              specify {backgroundColor: \"#1f77b4\"}\r\n     *  * \"labelStyle\" - the label style\r\n     *  * \"disabled\" - a disabled state\r\n     *\r\n     * ```\r\n     * const categories = [\r\n     *    {key: \"aust\", label: \"AUD\", disabled: this.state.disabled[\"aust\"],\r\n     *      style: {backgroundColor: \"#1f77b4\"}},\r\n     *    {key: \"usa\", label: \"USD\", disabled: this.state.disabled[\"usa\"],\r\n     *      style: {backgroundColor: \"#aec7e8\"}}\r\n     * ];\r\n     * ```\r\n     */\r\n    categories: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            key: PropTypes.string.isRequired, // eslint-disable-line\r\n            label: PropTypes.string.isRequired, // eslint-disable-line\r\n            disabled: PropTypes.bool, // eslint-disable-line\r\n            style: PropTypes.object, // eslint-disable-line\r\n            labelStyle: PropTypes.object // eslint-disable-line\r\n        })\r\n    ).isRequired,\r\n\r\n    /**\r\n     * The width of the legend symbol\r\n     */\r\n    symbolWidth: PropTypes.number,\r\n\r\n    /**\r\n     * The height of the legend symbol\r\n     */\r\n    symbolHeight: PropTypes.number,\r\n\r\n    /**\r\n     * Which item, specified by its key, should be rendered as highlighted\r\n     */\r\n    highlight: PropTypes.string,\r\n\r\n    /**\r\n     * Which item, specified by its key, should be rendered as selected\r\n     */\r\n    selection: PropTypes.string,\r\n\r\n    /**\r\n     * Callback will be called with a legend item is selected (i.e. it is clicked\r\n     * on by the user)\r\n     */\r\n    onSelectionChange: PropTypes.func,\r\n\r\n    /**\r\n     * Callback will be called with a legend item is highlighted (i.e. it is hovered\r\n     * over by the user)\r\n     */\r\n    onHighlightChange: PropTypes.func,\r\n\r\n    /**\r\n     * Defines whether to stack legend items vertically or not\r\n     */\r\n    stack: PropTypes.bool,\r\n\r\n    /**\r\n     * The margin at the bottom. Default value is 20px\r\n     */\r\n    marginBottom: PropTypes.string\r\n};\r\n\r\nLegend.defaultProps = {\r\n    style: {},\r\n    labelStyle: {},\r\n    type: \"swatch\", // or \"line\" or \"dot\"\r\n    align: \"left\",\r\n    symbolWidth: 16,\r\n    symbolHeight: 16,\r\n    stack: false,\r\n    marginBottom: \"20px\"\r\n};","/**\r\n *  Copyright (c) 2016, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nexport function scaleAsString(scale) {\r\n    return `${scale.domain()}-${scale.range()}`;\r\n}\r\n\r\n// http://stackoverflow.com/a/28857255\r\nexport function getElementOffset(element) {\r\n    const de = document.documentElement;\r\n    const box = element.getBoundingClientRect();\r\n    const top = box.top + window.pageYOffset - de.clientTop;\r\n    const left = box.left + window.pageXOffset - de.clientLeft;\r\n    return { top, left };\r\n}","/**\r\n *  Copyright (c) 2017, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport {\r\n    curveBasisClosed,\r\n    curveBasisOpen,\r\n    curveBasis,\r\n    curveBundle,\r\n    curveCardinalClosed,\r\n    curveCardinalOpen,\r\n    curveCardinal,\r\n    curveCatmullRomClosed,\r\n    curveCatmullRomOpen,\r\n    curveCatmullRom,\r\n    curveLinearClosed,\r\n    curveLinear,\r\n    curveMonotoneX,\r\n    curveMonotoneY,\r\n    curveNatural,\r\n    curveStep,\r\n    curveStepAfter,\r\n    curveStepBefore\r\n} from \"d3-shape\";\r\n\r\nexport default {\r\n    curveBasisClosed,\r\n    curveBasisOpen,\r\n    curveBasis,\r\n    curveBundle,\r\n    curveCardinalClosed,\r\n    curveCardinalOpen,\r\n    curveCardinal,\r\n    curveCatmullRomClosed,\r\n    curveCatmullRomOpen,\r\n    curveCatmullRom,\r\n    curveLinearClosed,\r\n    curveLinear,\r\n    curveMonotoneX,\r\n    curveMonotoneY,\r\n    curveNatural,\r\n    curveStep,\r\n    curveStepAfter,\r\n    curveStepBefore\r\n};","/**\r\n *  Copyright (c) 2015-present, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport _ from \"underscore\";\r\nimport { line } from \"d3-shape\";\r\nimport merge from \"merge\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TimeSeries } from \"pondjs\";\r\n\r\nimport { Styler } from \"../js/styler\";\r\nimport { scaleAsString } from \"../js/util\";\r\nimport curves from \"../js/curve\";\r\n\r\nconst defaultStyle = {\r\n    normal: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 1 },\r\n    highlighted: { stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1 },\r\n    selected: { stroke: \"steelblue\", fill: \"none\", strokeWidth: 2 },\r\n    muted: { stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1 }\r\n};\r\n\r\n/**\r\n * The `<LineChart>` component is able to display multiple columns of a TimeSeries\r\n * as separate line charts.\r\n *\r\n * The `<LineChart>` should be used within `<ChartContainer>` etc., as this will\r\n * construct the horizontal and vertical axis, and manage other elements.\r\n *\r\n * Here is an example of two columns of a TimeSeries being plotted with the `<LineChart>`:\r\n *\r\n * ```\r\n  <ChartContainer timeRange={this.state.timerange} >\r\n    <ChartRow height=\"200\">\r\n      <YAxis id=\"y\" label=\"Price ($)\" min={0.5} max={1.5} format=\"$,.2f\" />\r\n      <Charts>\r\n        <LineChart\r\n          axis=\"y\"\r\n          breakLine={false}\r\n          series={currencySeries}\r\n          columns={[\"aud\", \"euro\"]}\r\n          style={style}\r\n          interpolation=\"curveBasis\" />\r\n      </Charts>\r\n    </ChartRow>\r\n  </ChartContainer>\r\n * ```\r\n */\r\nexport default class LineChart extends React.Component {\r\n    shouldComponentUpdate(nextProps) {\r\n        const newSeries = nextProps.series;\r\n        const oldSeries = this.props.series;\r\n\r\n        const width = nextProps.width;\r\n        const timeScale = nextProps.timeScale;\r\n        const yScale = nextProps.yScale;\r\n        const interpolation = nextProps.interpolation;\r\n        const highlight = nextProps.highlight;\r\n        const selection = nextProps.selection;\r\n        const columns = nextProps.columns;\r\n\r\n        // What changed?\r\n        const widthChanged = this.props.width !== width;\r\n        const timeScaleChanged = scaleAsString(this.props.timeScale) !== scaleAsString(timeScale);\r\n        const yAxisScaleChanged = this.props.yScale !== yScale;\r\n        const interpolationChanged = this.props.interpolation !== interpolation;\r\n        const highlightChanged = this.props.highlight !== highlight;\r\n        const selectionChanged = this.props.selection !== selection;\r\n        const columnsChanged = this.props.columns !== columns;\r\n\r\n        let seriesChanged = false;\r\n        if (oldSeries.size() !== newSeries.size()) {\r\n            seriesChanged = true;\r\n        } else {\r\n            seriesChanged = !TimeSeries.is(oldSeries, newSeries);\r\n        }\r\n\r\n        return (\r\n            widthChanged ||\r\n            seriesChanged ||\r\n            timeScaleChanged ||\r\n            yAxisScaleChanged ||\r\n            interpolationChanged ||\r\n            highlightChanged ||\r\n            selectionChanged ||\r\n            columnsChanged\r\n        );\r\n    }\r\n\r\n    handleHover(e, column) {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(column);\r\n        }\r\n    }\r\n\r\n    handleHoverLeave() {\r\n        if (this.props.onHighlightChange) {\r\n            this.props.onHighlightChange(null);\r\n        }\r\n    }\r\n\r\n    handleClick(e, column) {\r\n        e.stopPropagation();\r\n        if (this.props.onSelectionChange) {\r\n            this.props.onSelectionChange(column);\r\n        }\r\n    }\r\n\r\n    providedPathStyleMap(column) {\r\n        let style = {};\r\n        if (this.props.style) {\r\n            if (this.props.style instanceof Styler) {\r\n                style = this.props.style.lineChartStyle()[column];\r\n            } else if (_.isFunction(this.props.style)) {\r\n                style = this.props.style(column);\r\n            } else if (_.isObject(this.props.style)) {\r\n                style = this.props.style ? this.props.style[column] : defaultStyle;\r\n            }\r\n        }\r\n        return style;\r\n    }\r\n\r\n    /**\r\n     * Returns the style used for drawing the path\r\n     */\r\n    pathStyle(column) {\r\n        let style;\r\n\r\n        const styleMap = this.providedPathStyleMap(column);\r\n        const isHighlighted = this.props.highlight && column === this.props.highlight;\r\n        const isSelected = this.props.selection && column === this.props.selection;\r\n\r\n        if (this.props.selection) {\r\n            if (isSelected) {\r\n                style = merge(\r\n                    true,\r\n                    defaultStyle.selected,\r\n                    styleMap.selected ? styleMap.selected : {}\r\n                );\r\n            } else if (isHighlighted) {\r\n                style = merge(\r\n                    true,\r\n                    defaultStyle.highlighted,\r\n                    styleMap.highlighted ? styleMap.highlighted : {}\r\n                );\r\n            } else {\r\n                style = merge(true, defaultStyle.muted, styleMap.muted ? styleMap.muted : {});\r\n            }\r\n        } else if (isHighlighted) {\r\n            style = merge(\r\n                true,\r\n                defaultStyle.highlighted,\r\n                styleMap.highlighted ? styleMap.highlighted : {}\r\n            );\r\n        } else {\r\n            style = merge(true, defaultStyle.normal, styleMap.normal);\r\n        }\r\n\r\n        style.pointerEvents = \"none\";\r\n\r\n        return style;\r\n    }\r\n\r\n    renderPath(data, column, key) {\r\n        const hitStyle = {\r\n            stroke: \"white\",\r\n            fill: \"none\",\r\n            opacity: 0.0,\r\n            strokeWidth: 7,\r\n            cursor: \"crosshair\",\r\n            pointerEvents: \"stroke\"\r\n        };\r\n\r\n        // D3 generates each path\r\n        const path = line()\r\n            .curve(curves[this.props.interpolation])\r\n            .x(d => this.props.timeScale(d.x))\r\n            .y(d => this.props.yScale(d.y))(data);\r\n\r\n        return (\r\n            <g key={key}>\r\n                <path d={path} style={this.pathStyle(column)} />\r\n                <path\r\n                    d={path}\r\n                    style={hitStyle}\r\n                    onClick={e => this.handleClick(e, column)}\r\n                    onMouseLeave={() => this.handleHoverLeave()}\r\n                    onMouseMove={e => this.handleHover(e, column)}\r\n                />\r\n            </g>\r\n        );\r\n    }\r\n\r\n    renderLines() {\r\n        return _.map(this.props.columns, column => this.renderLine(column));\r\n    }\r\n\r\n    renderLine(column) {\r\n        const pathLines = [];\r\n        let count = 1;\r\n        if (this.props.breakLine) {\r\n            // Remove nulls and NaNs from the line by generating a break in the line\r\n            let currentPoints = null;\r\n            for (const d of this.props.series.events()) {\r\n                const timestamp = new Date(\r\n                    d.begin().getTime() + (d.end().getTime() - d.begin().getTime()) / 2\r\n                );\r\n                const value = d.get(column);\r\n                const badPoint = _.isNull(value) || _.isNaN(value) || !_.isFinite(value);\r\n                if (!badPoint) {\r\n                    if (!currentPoints) currentPoints = [];\r\n                    currentPoints.push({ x: timestamp, y: value });\r\n                } else if (currentPoints) {\r\n                    if (currentPoints.length > 1) {\r\n                        pathLines.push(this.renderPath(currentPoints, column, count));\r\n                        count += 1;\r\n                    }\r\n                    currentPoints = null;\r\n                }\r\n            }\r\n            if (currentPoints && currentPoints.length > 1) {\r\n                pathLines.push(this.renderPath(currentPoints, column, count));\r\n                count += 1;\r\n            }\r\n        } else {\r\n            // Ignore nulls and NaNs in the line\r\n            const cleanedPoints = [];\r\n            for (const d of this.props.series.events()) {\r\n                const timestamp = new Date(\r\n                    d.begin().getTime() + (d.end().getTime() - d.begin().getTime()) / 2\r\n                );\r\n                const value = d.get(column);\r\n                const badPoint = _.isNull(value) || _.isNaN(value) || !_.isFinite(value);\r\n                if (!badPoint) {\r\n                    cleanedPoints.push({ x: timestamp, y: value });\r\n                }\r\n            }\r\n\r\n            pathLines.push(this.renderPath(cleanedPoints, column, count));\r\n            count += 1;\r\n        }\r\n\r\n        return <g key={column}>{pathLines}</g>;\r\n    }\r\n\r\n    render() {\r\n        return <g>{this.renderLines()}</g>;\r\n    }\r\n}\r\n\r\nLineChart.propTypes = {\r\n    /**\r\n     * Show or hide this chart\r\n     */\r\n    visible: PropTypes.bool,\r\n\r\n    /**\r\n     * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize\r\n     */\r\n    series: PropTypes.instanceOf(TimeSeries).isRequired,\r\n\r\n    /**\r\n     * Reference to the axis which provides the vertical scale for drawing.\r\n     * e.g. specifying `axis=\"trafficRate\"` would refer the y-scale of the YAxis\r\n     * with id=\"trafficRate\".\r\n     */\r\n    axis: PropTypes.string.isRequired, // eslint-disable-line\r\n\r\n    /**\r\n     * Which columns from the series to draw.\r\n     * \r\n     * NOTE : Columns can't have periods because periods \r\n     * represent a path to deep data in the underlying events \r\n     * (i.e. reference into nested data structures)\r\n     */\r\n    columns: PropTypes.arrayOf(PropTypes.string),\r\n\r\n    /**\r\n     * The styles to apply to the underlying SVG lines. This is a mapping\r\n     * of column names to objects with style attributes, in the following\r\n     * format:\r\n     *\r\n     * ```\r\n     * const style = {\r\n     *     in: {\r\n     *         normal: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\r\n     *         highlighted: {stroke: \"#5a98cb\", fill: \"none\", strokeWidth: 1},\r\n     *         selected: {stroke: \"steelblue\", fill: \"none\", strokeWidth: 1},\r\n     *         muted: {stroke: \"steelblue\", fill: \"none\", opacity: 0.4, strokeWidth: 1}\r\n     *     },\r\n     *     out: {\r\n     *         ...\r\n     *     }\r\n     * };\r\n     *\r\n     *  <LineChart style={style} ... />\r\n     * ```\r\n     *\r\n     * Alternatively, you can pass in a `Styler`. For example:\r\n     *\r\n     * ```\r\n     * const currencyStyle = Styler([\r\n     *     {key: \"aud\", color: \"steelblue\", width: 1, dashed: true},\r\n     *     {key: \"euro\", color: \"#F68B24\", width: 2}\r\n     * ]);\r\n     *\r\n     * <LineChart columns={[\"aud\", \"euro\"]} style={currencyStyle} ... />\r\n     *\r\n     * ```\r\n     */\r\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.instanceOf(Styler)]),\r\n\r\n    /**\r\n     * Any of D3's interpolation modes.\r\n     */\r\n    interpolation: PropTypes.oneOf([\r\n        \"curveBasis\",\r\n        \"curveBasisOpen\",\r\n        \"curveBundle\",\r\n        \"curveCardinal\",\r\n        \"curveCardinalOpen\",\r\n        \"curveCatmullRom\",\r\n        \"curveCatmullRomOpen\",\r\n        \"curveLinear\",\r\n        \"curveMonotoneX\",\r\n        \"curveMonotoneY\",\r\n        \"curveNatural\",\r\n        \"curveRadial\",\r\n        \"curveStep\",\r\n        \"curveStepAfter\",\r\n        \"curveStepBefore\"\r\n    ]),\r\n\r\n    /**\r\n     * The determines how to handle bad/missing values in the supplied\r\n     * TimeSeries. A missing value can be null or NaN. If breakLine\r\n     * is set to true (the default) then the line will be broken on either\r\n     * side of the bad value(s). If breakLine is false bad values\r\n     * are simply removed and the adjoining points are connected.\r\n     */\r\n    breakLine: PropTypes.bool,\r\n\r\n    /**\r\n     * The selected item, which will be rendered in the \"selected\" style.\r\n     * If a line is selected, all other lines will be rendered in the \"muted\" style.\r\n     *\r\n     * See also `onSelectionChange`\r\n     */\r\n    selection: PropTypes.string,\r\n\r\n    /**\r\n     * A callback that will be called when the selection changes. It will be called\r\n     * with the column corresponding to the line being clicked.\r\n     */\r\n    onSelectionChange: PropTypes.func,\r\n\r\n    /**\r\n     * The highlighted column, which will be rendered in the \"highlighted\" style.\r\n     *\r\n     * See also `onHighlightChange`\r\n     */\r\n    highlight: PropTypes.string,\r\n\r\n    /**\r\n     * A callback that will be called when the hovered over line changes.\r\n     * It will be called with the corresponding column.\r\n     */\r\n    onHighlightChange: PropTypes.func,\r\n\r\n    /**\r\n     * [Internal] The timeScale supplied by the surrounding ChartContainer\r\n     */\r\n    timeScale: PropTypes.func,\r\n\r\n    /**\r\n     * [Internal] The yScale supplied by the associated YAxis\r\n     */\r\n    yScale: PropTypes.func,\r\n\r\n    /**\r\n     * [Internal] The width supplied by the surrounding ChartContainer\r\n     */\r\n    width: PropTypes.number\r\n};\r\n\r\nLineChart.defaultProps = {\r\n    visible: true,\r\n    columns: [\"value\"],\r\n    smooth: true,\r\n    interpolation: \"curveLinear\",\r\n    breakLine: true\r\n};","import React from 'react';\r\nimport { TimeSeries } from \"pondjs\";\r\nimport _ from \"underscore\";\r\nimport {\r\n    Charts,\r\n    ChartContainer,\r\n    ChartRow,\r\n    YAxis,\r\n    Baseline,\r\n    Resizable\r\n  } from \"react-timeseries-charts\";\r\n  \r\n import styler from './../js/styler' \r\nimport Legend from './../Legend'\r\nimport LineChart from './LineChart'\r\n\r\n\r\n\r\nconst test_data = require('./../test_data.json');\r\n\r\n\r\nfunction buildPoints() {\r\n\r\n    let result = [];\r\n\r\n    for(let i = 0; i < test_data.length ; i++) {\r\n\r\n        var time = new Date( test_data[i].time_obs *100 );\r\n        result.push( [time,  test_data[i].db_reading, (test_data[i].db_reading -10) ] );\r\n\r\n    }\r\n\r\n    return result;\r\n\r\n\r\n}\r\n\r\nconst noiseSeries = new TimeSeries({\r\n    name: \"Noise\",\r\n    columns: [\"time\", \"debug1\"],  //columns: [\"time\", \"debug1\", \"debug2\"],\r\n    points: buildPoints()\r\n});\r\n\r\nconst style = styler([\r\n    { key: \"debug1\", color: \"steelblue\", width: 3 },\r\n    // { key: \"debug2\", color: \"#F68B24\", width: 2 }\r\n]);\r\n\r\n\r\nclass ReportChart extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tracker: null,\r\n            timerange: noiseSeries.range(),\r\n            x: null,\r\n            y: null\r\n        };\r\n\r\n    }\r\n    handleTrackerChanged = tracker => {\r\n        if (!tracker) {\r\n            this.setState({ tracker, x: null, y: null });\r\n        } else {\r\n            this.setState({ tracker });\r\n        }\r\n    };\r\n\r\n    handleTimeRangeChange = timerange => {\r\n        this.setState({ timerange });\r\n    };\r\n\r\n    handleMouseMove = (x, y) => {\r\n        this.setState({ x, y });\r\n    };\r\n\r\n    render() {\r\n        const range = this.state.timerange;\r\n\r\n\r\n        return (\r\n            <div>\r\n\r\n                <p><strong>*Scroll up to Zoom in chart</strong></p>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <Resizable>\r\n                            <ChartContainer\r\n                                timeRange={range}\r\n                                timeAxisStyle={{\r\n                                    ticks: {\r\n                                        stroke: \"black\",\r\n                                        opacity: 0.25,\r\n                                        \"stroke-dasharray\": \"1,1\"\r\n                                        // Note: this isn't in camel case because this is\r\n                                        // passed into d3's style\r\n                                    },\r\n                                    values: {\r\n                                        fill: \"black\",\r\n                                        \"font-size\": 12\r\n                                    }\r\n                                }}\r\n                                showGrid={true}\r\n                                paddingRight={125}\r\n                                maxTime={noiseSeries.range().end()}\r\n                                minTime={noiseSeries.range().begin()}\r\n                                timeAxisAngledLabels={true}\r\n                                timeAxisHeight={65}\r\n                                onTrackerChanged={this.handleTrackerChanged}\r\n                                onBackgroundClick={() => this.setState({ selection: null })}\r\n                                enablePanZoom={true}\r\n                                onTimeRangeChanged={this.handleTimeRangeChange}\r\n                                onMouseMove={(x, y) => this.handleMouseMove(x, y)}\r\n                                minDuration={1000 * 60 * 60 * 24 * 30}\r\n                            >\r\n                                <ChartRow height=\"400\">\r\n                                    <YAxis\r\n                                        id=\"y\"\r\n                                        label=\"(dB) Noise Level\"\r\n                                        min={0}\r\n                                        max={100}\r\n                                        style={{\r\n                                            ticks: {\r\n                                                stroke: \"#AAA\",\r\n                                                opacity: 0.25,\r\n                                                \"stroke-dasharray\": \"1,1\"\r\n                                                // Note: this isn't in camel case because this is\r\n                                                // passed into d3's style\r\n                                            }\r\n       \r\n                                        }}\r\n                                        showGrid\r\n                                        hideAxisLine\r\n                                        width=\"50\"\r\n                                        type=\"linear\"\r\n                                        format=\"\"\r\n                                    />\r\n                                    <Charts>\r\n                                        <LineChart\r\n                                            axis=\"y\"\r\n                                            breakLine={false}\r\n                                            series={noiseSeries}\r\n                                            columns={[\"debug1\"]} //columns={[\"debug1\", \"debug2\"]}\r\n                                            style={style}\r\n                                            interpolation=\"curveBasis\"\r\n                                            highlight={this.state.highlight}\r\n                                            onHighlightChange={highlight =>\r\n                                                this.setState({ highlight })\r\n                                            }\r\n                                            selection={this.state.selection}\r\n                                            onSelectionChange={selection =>\r\n                                                this.setState({ selection })\r\n                                            }\r\n                                        />\r\n                                        <Baseline\r\n                                            axis=\"y\"\r\n                                            value={70}\r\n                                            label=\"Noise (dB) Level Cap\"\r\n                                            position=\"right\"\r\n\r\n                                        />\r\n                                    </Charts>\r\n                                </ChartRow>\r\n                            </ChartContainer>\r\n                        </Resizable>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <span>\r\n                            <Legend\r\n                                type=\"line\"\r\n                                align=\"right\"\r\n                                style={style}\r\n                                highlight={this.state.highlight}\r\n                                onHighlightChange={highlight => this.setState({ highlight })}\r\n                                selection={this.state.selection}\r\n                                onSelectionChange={selection => this.setState({ selection })}\r\n                                categories={[\r\n                                    { key: \"debug1\", label: \"User1 (Debug)\"},\r\n                                    // { key: \"debug2\", label: \"User2\"}\r\n                                ]}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  export default ReportChart;","import React from 'react';\r\nimport ReportTable from '../components/ReportTable';\r\nimport ReportChart from '../components/ReportChart';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nconst Report = () => {\r\n   var curr = new Date();\r\n   function printPage(e) {\r\n     e.preventDefault();\r\n     window.print();\r\n   }\r\n    return (\r\n       <div>\r\n        <div class=\"no-print print-btn\">\r\n          <Button variant=\"info\" size=\"lg\" onClick={printPage}>Print report</Button>\r\n        </div>\r\n\r\n          <h1>Your Noise Report Summary</h1>\r\n          {/*JS Date() declared January the 0th month*/}\r\n          <p>Report for: { curr.getMonth()+1 }/{ curr.getDate() }/{ curr.getFullYear() }</p>\r\n\r\n          <ReportChart/>\r\n          <ReportTable/>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Report;\r\n","import React from 'react';\r\n\r\nconst Help = () => {\r\n    return (\r\n       <div>\r\n          <h1>Help</h1>\r\n          <p>Please contact UCI's team Chubby Cats.</p>\r\n          <p>ziv@uci.edu</p>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Help;\r\n","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nimport {\r\n  HashRouter,\r\n  Route,\r\n  Link,\r\n  NavLink,\r\n  Switch,\r\n  Redirect\r\n} from 'react-router-dom';\r\n\r\n//Pages\r\nimport Home from './pages/Home.js';\r\nimport Report from './pages/Report';\r\nimport Help from './pages/Help';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <HashRouter basename='/'>\r\n              <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" >\r\n                <Navbar.Brand as={Link} to=\"/\">React Demo App</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                  <Nav className=\"mr-auto\">\r\n                    <Nav.Link as={NavLink} to=\"/host-website\">Home</Nav.Link>\r\n                    <Nav.Link as={NavLink} to=\"/report\">Report</Nav.Link>\r\n                    <Nav.Link as={NavLink} to=\"/help\">Help</Nav.Link>\r\n                  </Nav>\r\n                </Navbar.Collapse>\r\n              </Navbar>\r\n              < br />\r\n              <Switch>\r\n                <Route exact path='/host-website' component={Home}/>\r\n                <Route exact path='/report' component={Report}/>\r\n                <Route exact path='/help' component={Help}/>\r\n                <Redirect from=\"/\" to=\"/host-website\"/>\r\n              </Switch>\r\n          </HashRouter>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(<Router>< App /></Router>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}